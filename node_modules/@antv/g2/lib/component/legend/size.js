function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @fileOverview The class of the size legend
 * @author sima.zhang
 */
var Util = require('../../util');
var Global = require('../../global');
var Continuous = require('./continuous');
var CIRCLE_GAP = 8;

var Size = function (_Continuous) {
  _inherits(Size, _Continuous);

  function Size() {
    _classCallCheck(this, Size);

    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
  }

  Size.prototype.getDefaultCfg = function getDefaultCfg() {
    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
    return Util.mix({}, cfg, {
      /**
       * 类型
       * @type {String}
       */
      type: 'size-legend',
      width: 100,
      height: 200,
      _circleStyle: {
        stroke: '#4E7CCC',
        fill: '#fff',
        fillOpacity: 0
      },
      textStyle: {
        fill: '#333',
        textAlign: 'start',
        textBaseline: 'middle',
        fontFamily: Global.fontFamily
      }
    });
  };

  Size.prototype._renderSliderShape = function _renderSliderShape() {
    var slider = this.get('slider');
    var backgroundElement = slider.get('backgroundElement');
    var width = this.get('width');
    var height = this.get('height');
    var inRange = this.get('inRange');
    var layout = this.get('layout');
    var points = layout === 'vertical' ? [[0, 0], [width, 0], [width, height]] : [[0, height], [width, 0], [width, height]];

    return this._addBackground(backgroundElement, 'Polygon', Util.mix({
      points: points
    }, inRange));
  };

  Size.prototype._addCircle = function _addCircle(x, y, r, text, maxWidth) {
    var group = this.addGroup();
    var circleStyle = this.get('_circleStyle');
    var textStyle = this.get('textStyle');
    var titleShape = this.get('titleShape');
    var titleGap = this.get('titleGap');
    if (titleShape) {
      titleGap += titleShape.getBBox().height;
    }

    group.addShape('circle', {
      attrs: Util.mix({
        x: x,
        y: y + titleGap,
        r: r === 0 ? 1 : r
      }, circleStyle)
    });
    group.addShape('text', {
      attrs: Util.mix({
        x: maxWidth + 5,
        y: y + titleGap,
        text: text === 0 ? '0' : text
      }, textStyle)
    });
  };

  Size.prototype._renderBackground = function _renderBackground() {
    var self = this;
    var minRadius = this.get('firstItem').attrValue * 1;
    var maxRadius = this.get('lastItem').attrValue * 1;
    var medianRadius = (minRadius + maxRadius) / 2;
    self._addCircle(maxRadius, maxRadius, maxRadius, medianRadius, 2 * maxRadius);
    self._addCircle(maxRadius, maxRadius * 2 + CIRCLE_GAP + medianRadius, medianRadius, (minRadius + medianRadius) / 2, 2 * maxRadius);
    self._addCircle(maxRadius, (maxRadius + CIRCLE_GAP + medianRadius) * 2 + minRadius, minRadius, minRadius, 2 * maxRadius);
  };

  return Size;
}(Continuous);

module.exports = Size;