'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  console.log();
  console.log(_chalk2.default.bold(_chalk2.default.red('dva-cli is deprecated, please use ' + _chalk2.default.blue('create-umi') + ' instead, checkout ' + _chalk2.default.gray(_chalk2.default.underline('https://umijs.org/guide/create-umi-app.html')) + ' for detail.')));
  console.log(_chalk2.default.bold(_chalk2.default.green('\u5982\u679C\u4F60\u662F\u8682\u8681\u91D1\u670D\u5185\u90E8\u7528\u6237\uFF0C\u8BF7\u4F7F\u7528 bigfish \u521B\u5EFA\u9879\u76EE\uFF0C\u8BE6\u89C1 https://bigfish.alipay.com/ \u3002')));
  console.log();
  _inquirer2.default.prompt([{
    type: 'confirm',
    name: 'insist',
    message: 'Do you insist on using dva-cli?',
    default: false
  }]).then(function (_ref2) {
    var insist = _ref2.insist;

    if (insist) {
      init.apply(undefined, args);
    } else {
      console.log('Have a good day!');
    }
  }).catch(function (e) {
    console.error(_chalk2.default.red('> Project init failed.'));
    console.error(e);
  });
};

var _path = require('path');

var _vinylFs = require('vinyl-fs');

var _vinylFs2 = _interopRequireDefault(_vinylFs);

var _fs = require('fs');

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _emptyDir = require('empty-dir');

var _leftPad = require('left-pad');

var _leftPad2 = _interopRequireDefault(_leftPad);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function info(type, message) {
  console.log(_chalk2.default.green.bold((0, _leftPad2.default)(type, 12)) + '  ' + message);
}

function error(message) {
  console.error(_chalk2.default.red(message));
}

function success(message) {
  console.error(_chalk2.default.green(message));
}

function init(_ref) {
  var demo = _ref.demo,
      install = _ref.install;

  var type = demo ? 'demo' : 'app';
  var cwd = (0, _path.join)(__dirname, '../boilerplates', type);
  var dest = process.cwd();
  var projectName = (0, _path.basename)(dest);

  if (!(0, _emptyDir.sync)(dest)) {
    error('Existing files here, please run init command in an empty folder!');
    process.exit(1);
  }

  console.log('Creating a new Dva app in ' + dest + '.');
  console.log();

  _vinylFs2.default.src(['**/*', '!node_modules/**/*'], { cwd: cwd, cwdbase: true, dot: true }).pipe(template(dest, cwd)).pipe(_vinylFs2.default.dest(dest)).on('end', function () {
    info('rename', 'gitignore -> .gitignore');
    (0, _fs.renameSync)((0, _path.join)(dest, 'gitignore'), (0, _path.join)(dest, '.gitignore'));
    if (install) {
      info('run', 'npm install');
      require('./install')(printSuccess);
    } else {
      printSuccess();
    }
  }).resume();

  function printSuccess() {
    success('\nSuccess! Created ' + projectName + ' at ' + dest + '.\n\nInside that directory, you can run several commands:\n  * npm start: Starts the development server.\n  * npm run build: Bundles the app into dist for production.\n  * npm test: Run test.\n\nWe suggest that you begin by typing:\n  cd ' + dest + '\n  npm start\n\nHappy hacking!');
  }
}

function template(dest, cwd) {
  return _through2.default.obj(function (file, enc, cb) {
    if (!file.stat.isFile()) {
      return cb();
    }

    info('create', file.path.replace(cwd + '/', ''));
    this.push(file);
    cb();
  });
}

;
module.exports = exports['default'];