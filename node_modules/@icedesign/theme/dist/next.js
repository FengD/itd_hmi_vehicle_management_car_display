(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"), require("moment"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom", "moment"], factory);
	else if(typeof exports === 'object')
		exports["Next"] = factory(require("react"), require("react-dom"), require("moment"));
	else
		root["Next"] = factory(root["React"], root["ReactDOM"], root["moment"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_10__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 57);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(9);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(90);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(94);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(9);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(60);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) {
  var ReactIs = require('react-is');

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(97)();
}


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(68);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(80);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 12 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 13 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(15);
var createDesc = __webpack_require__(23);
module.exports = __webpack_require__(17) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(21);
var IE8_DOM_DEFINE = __webpack_require__(41);
var toPrimitive = __webpack_require__(28);
var dP = Object.defineProperty;

exports.f = __webpack_require__(17) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(22)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(44);
var defined = __webpack_require__(29);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(32)('wks');
var uid = __webpack_require__(26);
var Symbol = __webpack_require__(11).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(11);
var core = __webpack_require__(12);
var ctx = __webpack_require__(40);
var hide = __webpack_require__(14);
var has = __webpack_require__(13);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(16);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(43);
var enumBugKeys = __webpack_require__(33);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 26 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(16);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(32)('keys');
var uid = __webpack_require__(26);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(12);
var global = __webpack_require__(11);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(25) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 33 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 34 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(21);
var dPs = __webpack_require__(73);
var enumBugKeys = __webpack_require__(33);
var IE_PROTO = __webpack_require__(31)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(42)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(74).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(15).f;
var has = __webpack_require__(13);
var TAG = __webpack_require__(19)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(19);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(11);
var core = __webpack_require__(12);
var LIBRARY = __webpack_require__(25);
var wksExt = __webpack_require__(38);
var defineProperty = __webpack_require__(15).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(63);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(17) && !__webpack_require__(22)(function () {
  return Object.defineProperty(__webpack_require__(42)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(16);
var document = __webpack_require__(11).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(13);
var toIObject = __webpack_require__(18);
var arrayIndexOf = __webpack_require__(65)(false);
var IE_PROTO = __webpack_require__(31)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(45);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 45 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(29);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(25);
var $export = __webpack_require__(20);
var redefine = __webpack_require__(48);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(35);
var $iterCreate = __webpack_require__(72);
var setToStringTag = __webpack_require__(37);
var getPrototypeOf = __webpack_require__(75);
var ITERATOR = __webpack_require__(19)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(14);


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(43);
var hiddenKeys = __webpack_require__(33).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(27);
var createDesc = __webpack_require__(23);
var toIObject = __webpack_require__(18);
var toPrimitive = __webpack_require__(28);
var has = __webpack_require__(13);
var IE8_DOM_DEFINE = __webpack_require__(41);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(17) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _CSSTransition = _interopRequireDefault(__webpack_require__(100));

var _ReplaceTransition = _interopRequireDefault(__webpack_require__(105));

var _TransitionGroup = _interopRequireDefault(__webpack_require__(55));

var _Transition = _interopRequireDefault(__webpack_require__(52));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  Transition: _Transition.default,
  TransitionGroup: _TransitionGroup.default,
  ReplaceTransition: _ReplaceTransition.default,
  CSSTransition: _CSSTransition.default
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(5));

var _react = _interopRequireDefault(__webpack_require__(0));

var _reactDom = _interopRequireDefault(__webpack_require__(8));

var _reactLifecyclesCompat = __webpack_require__(53);

var _PropTypes = __webpack_require__(54);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the components.
 * It's up to you to give meaning and effect to those states. For example we can
 * add styles to a component when it enters or exits:
 *
 * ```jsx
 * import Transition from 'react-transition-group/Transition';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {(state) => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
 * What it does do is track transition states over time so you can update the
 * component (such as by adding styles or classes) when it changes states.
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component begins the
 * "Enter" stage. During this stage, the component will shift from its current transition state,
 * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
 * it's complete. Let's take the following example:
 *
 * ```jsx
 * state = { in: false };
 *
 * toggleEnterState = () => {
 *   this.setState({ in: true });
 * }
 *
 * render() {
 *   return (
 *     <div>
 *       <Transition in={this.state.in} timeout={500} />
 *       <button onClick={this.toggleEnterState}>Click to Enter</button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state and
 * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
 *
 * ## Timing
 *
 * Timing is often the trickiest part of animation, mistakes can result in slight delays
 * that are hard to pin down. A common example is when you want to add an exit transition,
 * you should set the desired final styles when the state is `'exiting'`. That's when the
 * transition to those styles will start and, if you matched the `timeout` prop with the
 * CSS Transition duration, it will end exactly when the state changes to `'exited'`.
 *
 * > **Note**: For simpler transitions the `Transition` component might be enough, but
 * > take into account that it's platform-agnostic, while the `CSSTransition` component
 * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * > in order to make more complex transitions more predictable. For example, even though
 * > classes `example-enter` and `example-enter-active` are applied immediately one after
 * > another, you can still transition from one to the other because of the forced reflow
 * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)
 * > for more info). Take this into account when choosing between `Transition` and
 * > `CSSTransition`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);

    if (node) {
      if (this.props.addEndListener) {
        this.props.addEndListener(node, this.nextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    } else {
      setTimeout(this.nextCallback, 0);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes =  false ? {
  /**
   * A `function` child can be used instead of a React element.
   * This function is called with the current transition status
   * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can be used
   * to apply context specific props to a component.
   *
   * ```jsx
   * <Transition timeout={150}>
   *   {(status) => (
   *     <MyComponent className={`fade fade-${status}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided
   *
   * You may specify a single timeout for all transitions like: `timeout={500}`,
   * or individually like:
   *
   * ```jsx
   * timeout={{
   *  enter: 300,
   *  exit: 500,
   *  appear: 500,
   * }}
   * ```
   *
   * If the value of appear is not set, then the value from enter is taken.
   *
   * @type {number | { enter?: number, exit?: number }}
   */
  timeout: function timeout(props) {
    var pt = process.env.NODE_ENV !== "production" ? _PropTypes.timeoutsShape : {};;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func // Name the function so it is clearer in the documentation

} : {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

exports.default = _default;

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "polyfill", function() { return polyfill; });
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}




/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(5));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutsShape =  false ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
  enter: _propTypes.default.number,
  exit: _propTypes.default.number,
  appear: _propTypes.default.number
}).isRequired]) : null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape =  false ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  enter: _propTypes.default.string,
  exit: _propTypes.default.string,
  active: _propTypes.default.string
}), _propTypes.default.shape({
  enter: _propTypes.default.string,
  enterDone: _propTypes.default.string,
  enterActive: _propTypes.default.string,
  exit: _propTypes.default.string,
  exitDone: _propTypes.default.string,
  exitActive: _propTypes.default.string
})]) : null;
exports.classNamesShape = classNamesShape;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(5));

var _react = _interopRequireDefault(__webpack_require__(0));

var _reactLifecyclesCompat = __webpack_require__(53);

var _ChildMapping = __webpack_require__(106);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes =  false ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: _propTypes.default.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   */
  children: _propTypes.default.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: _propTypes.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var styleEqual = __webpack_require__(107);
var hasOwnProperty = Object.prototype.hasOwnProperty;

function type(a) {
  return Array.isArray(a) ? 'array' : typeof a;
}

function elementEquals(a, b) {
  var typeOfA = type(a);
  var typeOfB = type(b);

  if (typeOfA !== typeOfB) return false;

  switch (typeOfA) {
    case 'array':
      if (a.length !== b.length) return false;
      for (var i = 0; i < a.length; i++) {
        if (!elementEquals(a[i], b[i])) return false;
      }
      return true;
    case 'object':
      if (!a || !b) return a === b;
      if (a.type !== b.type) return false;
      if (a.key !== b.key) return false;
      if (a.ref !== b.ref) return false;
      return shallowElementEquals(a.props, b.props);
      break;
    default:
      return a === b;
  }
}

function shallowElementEquals(a, b) {
  var aCount = 0;
  var bCount = 0;

  for (var key in a) {
    if (hasOwnProperty.call(a, key)) {
      if (key === 'style') {
        // NOTE(lmr): kind of risky, but i'm assuming that a `style` prop is a React Native style,
        // and using the `styleEqual` algorithm here.
        if (!styleEqual(a[key], b[key])) return false;
      } else if (key === 'children') {
        // will compare children later
      } else {
        if (a[key] !== b[key]) return false;
      }
      aCount++;
    }
  }

  for (var key in b) {
    if (hasOwnProperty.call(b, key)) {
      bCount++;
    }
  }

  if (aCount !== bCount) return false;

  // compare children last...
  return elementEquals(a.children, b.children);
}

module.exports = shallowElementEquals;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(58);
module.exports = __webpack_require__(108);


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(59);

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
var env_namespaceObject = {};
__webpack_require__.d(env_namespaceObject, "ieVersion", function() { return ieVersion; });
__webpack_require__.d(env_namespaceObject, "isProduction", function() { return isProduction; });
__webpack_require__.d(env_namespaceObject, "default", function() { return env; });
var log_namespaceObject = {};
__webpack_require__.d(log_namespaceObject, "deprecated", function() { return log_deprecated; });
__webpack_require__.d(log_namespaceObject, "warning", function() { return log_warning; });
var object_namespaceObject = {};
__webpack_require__.d(object_namespaceObject, "typeOf", function() { return typeOf; });
__webpack_require__.d(object_namespaceObject, "isArrayLike", function() { return isArrayLike; });
__webpack_require__.d(object_namespaceObject, "isPromise", function() { return isPromise; });
__webpack_require__.d(object_namespaceObject, "isPlainObject", function() { return isPlainObject; });
__webpack_require__.d(object_namespaceObject, "shallowEqual", function() { return object_shallowEqual; });
__webpack_require__.d(object_namespaceObject, "each", function() { return each; });
__webpack_require__.d(object_namespaceObject, "pickOthers", function() { return pickOthers; });
__webpack_require__.d(object_namespaceObject, "pickAttrsWith", function() { return pickAttrsWith; });
var string_namespaceObject = {};
__webpack_require__.d(string_namespaceObject, "camelcase", function() { return camelcase; });
__webpack_require__.d(string_namespaceObject, "hyphenate", function() { return hyphenate; });
__webpack_require__.d(string_namespaceObject, "template", function() { return template; });
var dom_namespaceObject = {};
__webpack_require__.d(dom_namespaceObject, "hasDOM", function() { return hasDOM; });
__webpack_require__.d(dom_namespaceObject, "hasClass", function() { return hasClass; });
__webpack_require__.d(dom_namespaceObject, "addClass", function() { return addClass; });
__webpack_require__.d(dom_namespaceObject, "removeClass", function() { return removeClass; });
__webpack_require__.d(dom_namespaceObject, "toggleClass", function() { return toggleClass; });
__webpack_require__.d(dom_namespaceObject, "matches", function() { return matches; });
__webpack_require__.d(dom_namespaceObject, "getStyle", function() { return dom_getStyle; });
__webpack_require__.d(dom_namespaceObject, "setStyle", function() { return setStyle; });
__webpack_require__.d(dom_namespaceObject, "scrollbar", function() { return dom_scrollbar; });
__webpack_require__.d(dom_namespaceObject, "getOffset", function() { return getOffset; });
var events_namespaceObject = {};
__webpack_require__.d(events_namespaceObject, "off", function() { return _off; });
__webpack_require__.d(events_namespaceObject, "on", function() { return on; });
__webpack_require__.d(events_namespaceObject, "once", function() { return once; });
var func_namespaceObject = {};
__webpack_require__.d(func_namespaceObject, "noop", function() { return noop; });
__webpack_require__.d(func_namespaceObject, "prevent", function() { return prevent; });
__webpack_require__.d(func_namespaceObject, "makeChain", function() { return makeChain; });
__webpack_require__.d(func_namespaceObject, "bindCtx", function() { return bindCtx; });
__webpack_require__.d(func_namespaceObject, "promiseCall", function() { return promiseCall; });
var support_namespaceObject = {};
__webpack_require__.d(support_namespaceObject, "animation", function() { return support_animation; });
__webpack_require__.d(support_namespaceObject, "transition", function() { return transition; });
__webpack_require__.d(support_namespaceObject, "flex", function() { return flex; });
var focus_namespaceObject = {};
__webpack_require__.d(focus_namespaceObject, "getFocusNodeList", function() { return getFocusNodeList; });
__webpack_require__.d(focus_namespaceObject, "saveLastFocusNode", function() { return saveLastFocusNode; });
__webpack_require__.d(focus_namespaceObject, "clearLastFocusNode", function() { return clearLastFocusNode; });
__webpack_require__.d(focus_namespaceObject, "backLastFocusNode", function() { return backLastFocusNode; });
__webpack_require__.d(focus_namespaceObject, "limitTabRange", function() { return limitTabRange; });

// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/extends.js
var helpers_extends = __webpack_require__(4);
var extends_default = /*#__PURE__*/__webpack_require__.n(helpers_extends);

// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(1);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(2);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/inherits.js
var inherits = __webpack_require__(3);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external___root___React___commonjs2___react___commonjs___react___amd___react__ = __webpack_require__(0);
var external___root___React___commonjs2___react___commonjs___react___amd___react___default = /*#__PURE__*/__webpack_require__.n(external___root___React___commonjs2___react___commonjs___react___amd___react__);

// EXTERNAL MODULE: ./node_modules/_prop-types@15.7.2@prop-types/index.js
var _prop_types_15_7_2_prop_types = __webpack_require__(5);
var _prop_types_15_7_2_prop_types_default = /*#__PURE__*/__webpack_require__.n(_prop_types_15_7_2_prop_types);

// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__ = __webpack_require__(8);
var external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default = /*#__PURE__*/__webpack_require__.n(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__);

// EXTERNAL MODULE: ./node_modules/_classnames@2.2.6@classnames/index.js
var _classnames_2_2_6_classnames = __webpack_require__(6);
var _classnames_2_2_6_classnames_default = /*#__PURE__*/__webpack_require__.n(_classnames_2_2_6_classnames);

// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/typeof.js
var helpers_typeof = __webpack_require__(9);
var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/env.js
/**
 * IE浏览器的渲染引擎版本号
 * 注意：此属性与浏览器版本号不同，IE的渲染引擎版本号是可以通过HTML header或手动设置去更改的
 * @type {Number} 6 ~ 10
 */
var ieVersion = typeof document !== 'undefined' ? document.documentMode : undefined;

/**
 * 判断是否是生产环境
 * @type {Boolean}
 */
var isProduction = function isProduction() {
    var PRODUCTION_ENV = 'production';
    var result = false;
    try {
        if ("production" === PRODUCTION_ENV) {
            result = true;
        }
    } catch (err) {
        //
    }

    if (!result) {
        try {
            if (window.process.env.NODE_ENV === PRODUCTION_ENV) {
                result = true;
            }
        } catch (err) {
            //
        }
    }

    return result;
};

/* harmony default export */ var env = ({
    ieVersion: ieVersion,
    isProduction: isProduction
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/log.js


/* eslint no-console: 0 */

/**
 * 反对使用某一方法或属性的警告
 * @param  {String} props     过时的属性或方法名
 * @param  {String} instead   替代的属性或方法名
 * @param  {String} component 组件名
 *
 * @example
 * log.deprecated('onBeforeClose', 'beforeClose', 'Dialog');
 * // Warning: onBeforeClose is deprecated at [ Dialog ], use [ beforeClose ] instead of it.
 */
function log_deprecated(props, instead, component) {
    /* istanbul ignore else */
    if (!isProduction() && typeof console !== 'undefined' && console.error) {
        return console.error('Warning: [ ' + props + ' ] is deprecated at [ ' + component + ' ], ' + ('use [ ' + instead + ' ] instead of it.'));
    }
}

/**
 * 控制台警告日志
 * @param  {String} msg
 */
function log_warning(msg) {
    /* istanbul ignore else */
    if (typeof console !== 'undefined' && console.error) {
        return console.error('Warning: ' + msg);
    }
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/object.js

/**
 * 获取对象的类型
 * @param  {*} obj
 * @return {String}
 *
 * @example
 * typeOf([]) === 'Array'
 * typeOf() === 'Undefined'
 * typeOf(1) === 'Number'
 */
function typeOf(obj) {
    return Object.prototype.toString.call(obj).replace(/\[object\s|]/g, '');
}

/**
 * 判断是否是数组或类数组对象
 * @param  {*}  obj
 * @return {Boolean}
 *
 * @example
 * isArrayLike([]) === true
 * isArrayLike(arguments) === true
 * isArrayLike(this.props.children) === true
 */
function isArrayLike(obj) {
    var length = !!obj && 'length' in obj && obj.length;
    var type = typeOf(obj);

    return type === 'Array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
}

/**
 * 判断对象是否是一个promise，即是否可以用.then
 * @param  {*}  obj
 * @return {Boolean}
 */
function isPromise(obj) {
    return !!obj && ((typeof obj === 'undefined' ? 'undefined' : typeof_default()(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

/**
 * 是否是一个纯净的对象
 * @param  {*}  obj
 * @return {Boolean}
 * @reference https://github.com/jonschlinkert/is-plain-object
 */
function isPlainObject(obj) {
    if (typeOf(obj) !== 'Object') {
        return false;
    }

    var ctor = obj.constructor;

    if (typeof ctor !== 'function') {
        return false;
    }

    var prot = ctor.prototype;

    if (typeOf(prot) !== 'Object') {
        return false;
    }

    if (!prot.hasOwnProperty('isPrototypeOf')) {
        return false;
    }

    return true;
}

/**
 * 对象浅比较
 * @param  {Object} objA
 * @param  {Object} objB
 * @param  {Function}  [compare] 手动调用方法比较
 * @return {Boolean}      对象浅比较是否相等
 *
 * @example
 * object.shallowEqual({a: 100}, {a: 100}); // true
 */
function object_shallowEqual(objA, objB, compare) {
    if (objA === objB) {
        return true;
    }

    // 其中一个不是object，则不相等
    if (!objA || !objB || (typeof objA === 'undefined' ? 'undefined' : typeof_default()(objA)) + (typeof objB === 'undefined' ? 'undefined' : typeof_default()(objB)) !== 'objectobject') {
        return false;
    }

    var keyA = Object.keys(objA);
    var keyB = Object.keys(objB);
    var len = keyA.length;

    // key 数量不一致则不相等
    if (len !== keyB.length) {
        return false;
    }

    var hasCallback = typeof compare === 'function';

    for (var i = 0; i < len; i++) {
        var key = keyA[i];

        if (!Object.prototype.hasOwnProperty.call(objB, key)) {
            return false;
        }

        var valA = objA[key];
        var valB = objB[key];

        var ret = hasCallback ? compare(valA, valB, key) : void 0;

        if (ret === false || ret === void 0 && valA !== valB) {
            return false;
        }
    }

    return true;
}

/**
 * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等
 * @param  {Object|Array}   obj
 * @param  {Function} callback fn(n, i) or fn(val, key)
 * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效
 * @return {Object|Array}
 *
 * @example
 * // 遍历数组
 * object.each([100, 200, 300], (n, i) => console.log(n, i));
 * // 遍历json对象
 * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));
 * // 遍历React子节点
 * object.each(this.props.children, (child, index) => console.log(child));
 * // 遍历arguments
 * object.each(arguments, (arg, i) => console.log(arg));
 */
function each(obj, callback, direction) {
    var reversed = direction === -1;
    var length = obj.length;
    var value = void 0,
        i = reversed ? length - 1 : 0;

    if (isArrayLike(obj)) {
        for (; i < length && i >= 0; reversed ? i-- : i++) {
            value = callback.call(obj[i], obj[i], i);

            if (value === false) {
                break;
            }
        }
    } else {
        for (i in obj) {
            /* istanbul ignore else */
            if (obj.hasOwnProperty(i)) {
                value = callback.call(obj[i], obj[i], i);

                if (value === false) {
                    break;
                }
            }
        }
    }

    return obj;
}

// @private 判断key是否在数组或对象中
var _isInObj = function _isInObj(key, obj, isArray) {
    return isArray ? obj.indexOf(key) > -1 : key in obj;
};

/**
 * 过滤出其它属性
 * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key
 * @param  {Object} props     被过滤的对象
 * @return {Object}           others
 *
 * @example
 * object.pickOthers(FooComponent.propTypes, this.props);
 * object.pickOthers(['className', 'onChange'], this.props);
 */
function pickOthers(holdProps, props) {
    var others = {};
    var isArray = typeOf(holdProps) === 'Array';

    for (var key in props) {
        if (!_isInObj(key, holdProps, isArray)) {
            others[key] = props[key];
        }
    }

    return others;
}

/**
 * 过滤出带prefix的属性
 * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key
 * @param  {string} prefix    包含的字符串
 * @return {Object}           others
 *
 * @example
 * object.pickAttrsWith(FooComponent.propTypes, 'data-');
 */
function pickAttrsWith(holdProps, prefix) {
    var others = {};

    for (var key in holdProps) {
        if (key.match(prefix)) {
            others[key] = holdProps[key];
        }
    }

    return others;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/string.js



/**
 * 将字符串转化为驼峰式写法
 * @param  {String} str 例：-webkit-transition
 * @return {String}     例：WebkitTransition
 */
function camelcase(str) {
    if (!/-/.test(str)) {
        return str || '';
    }
    return str.toLowerCase().replace(/-([a-z])/g, function ($0, $1) {
        return $1.toUpperCase();
    });
}

/**
 * 将驼峰式字符串转化为连字符写法
 * @param  {String} str 例：WebkitTransition
 * @return {String}     例：-webkit-transition
 */
function hyphenate(str) {
    var strType = typeOf(str);
    if (strType !== 'String') {
        log_warning('[ hyphenate(str: string): string ] ' + ('Expected arguments[0] to be a string but get a ' + strType + '.') + 'It will return an empty string without any processing.');
        return '';
    }
    return str.replace(/([A-Z])/g, function ($0) {
        return '-' + $0.toLowerCase();
    });
}

/**
 * 替换模板字符串
 * @param {String} tpl     例：当前{current}, 共{total}页
 * @param {Object} object  例：{current: 1, total: 9}
 * @return {String}        例：
 */
function template(tpl) {
    var object = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var tplType = typeOf(tpl);
    if (tplType !== 'String') {
        log_warning('[ template(tpl: string, object: object): string ] ' + ('Expected arguments[0] to be a string but get a ' + tplType + '.') + 'It will return an empty string without any processing.');
        return '';
    }

    return tpl.replace(/\{[a-z]*\}/g, function (str) {
        var key = str.substring(1, str.length - 1);
        return object[key] || '';
    });
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/dom.js




/**
 * 是否能使用 DOM 方法
 * @type {Boolean}
 */
var hasDOM = typeof window !== 'undefined' && !!window.document && !!document.createElement;

/**
 * 节点是否包含指定 className
 * @param  {Element}  node
 * @param  {String}  className
 * @return {Boolean}
 *
 * @example
 * dom.hasClass(document.body, 'foo');
 */
function hasClass(node, className) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return false;
    }

    if (node.classList) {
        return node.classList.contains(className);
    } else {
        return node.className.indexOf(className) > -1;
    }
}

/**
 * 添加 className
 * @param {Element} node
 * @param {String} className
 *
 * @example
 * dom.addClass(document.body, 'foo');
 */
function addClass(node, className, _force) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return;
    }

    if (node.classList) {
        node.classList.add(className);
    } else if (_force === true || !hasClass(node, className)) {
        node.className += ' ' + className;
    }
}

/**
 * 移除 className
 * @param  {Element} node
 * @param  {String} className
 *
 * @example
 * dom.removeClass(document.body, 'foo');
 */
function removeClass(node, className, _force) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return;
    }

    if (node.classList) {
        node.classList.remove(className);
    } else if (_force === true || hasClass(node, className)) {
        node.className = node.className.replace(className, '').replace(/\s+/g, ' ').trim();
    }
}

/**
 * 切换 className
 * @param  {Element} node
 * @param  {String} className
 * @return {Boolean}           执行后节点上是否还有此 className
 *
 * @example
 * dom.toggleClass(document.body, 'foo');
 */
function toggleClass(node, className) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return false;
    }

    if (node.classList) {
        return node.classList.toggle(className);
    } else {
        var flag = hasClass(node, className);
        flag ? removeClass(node, className, true) : addClass(node, className, true);

        return !flag;
    }
}

/**
 * 元素是否匹配 CSS 选择器
 * @param  {Element} node       DOM 节点
 * @param  {String}  selector   CSS 选择器
 * @return {Boolean}
 *
 * @example
 * dom.matches(mountNode, '.container'); // boolean
 */
var matches = function () {
    var matchesFn = null;
    /* istanbul ignore else */
    if (hasDOM) {
        var _body = document.body || document.head;
        matchesFn = _body.matches ? 'matches' : _body.webkitMatchesSelector ? 'webkitMatchesSelector' : _body.msMatchesSelector ? 'msMatchesSelector' : _body.mozMatchesSelector ? 'mozMatchesSelector' : null;
    }

    return function (node, selector) {
        if (!hasDOM || !node) {
            return false;
        }

        return matchesFn ? node[matchesFn](selector) : false;
    };
}();

/**
 * 获取元素计算后的样式
 * @private
 * @param  {Element} node
 * @return {Object}
 */
function _getComputedStyle(node) {
    return node && node.nodeType === 1 ? window.getComputedStyle(node, null) : {};
}

var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size/i;
var removePixel = { left: 1, top: 1, right: 1, bottom: 1 };

/**
 * 校验并修正元素的样式属性值
 * @private
 * @param  {Element} node
 * @param  {String} type
 * @param  {Number} value
 */
function _getStyleValue(node, type, value) {
    type = type.toLowerCase();

    if (value === 'auto') {
        if (type === 'height') {
            return node.offsetHeight || 0;
        }
        if (type === 'width') {
            return node.offsetWidth || 0;
        }
    }

    if (!(type in removePixel)) {
        // 属性值是否需要去掉 px 单位，这里假定此类的属性值都是 px 为单位的
        removePixel[type] = PIXEL_PATTERN.test(type);
    }

    return removePixel[type] ? parseFloat(value) || 0 : value;
}

var floatMap = { cssFloat: 1, styleFloat: 1, float: 1 };

/**
 * 获取元素计算后的样式
 * @param  {Element} node DOM 节点
 * @param  {String} name 属性名
 * @return {Number|Object}
 */
function dom_getStyle(node, name) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return null;
    }

    var style = _getComputedStyle(node);

    // 如果不指定属性名，则返回全部值
    if (arguments.length === 1) {
        return style;
    }

    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;

    return _getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelcase(name)]);
}

/**
 * 设置元素的样式
 * @param {Element} node  DOM 节点
 * @param {Object|String} name  属性名，或者是一个对象，包含多个属性
 * @param {Number|String} value 属性值
 *
 * @example
 * // 设置单个属性值
 * dom.setStyle(mountNode, 'width', 100);
 * // 设置多条属性值
 * dom.setStyle(mountNode, {
 *     width: 100,
 *     height: 200
 * });
 */
function setStyle(node, name, value) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
        return false;
    }

    // 批量设置多个值
    if ((typeof name === 'undefined' ? 'undefined' : typeof_default()(name)) === 'object' && arguments.length === 2) {
        each(name, function (val, key) {
            return setStyle(node, key, val);
        });
    } else {
        name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
        if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {
            value = value + 'px';
        }
        node.style[camelcase(name)] = value; // IE8 support
    }
}

/**
 * 获取默认的滚动条大小
 * @return {Object} width, height
 */
function dom_scrollbar() {
    var scrollDiv = document.createElement('div');

    setStyle(scrollDiv, {
        position: 'absolute',
        width: '100px',
        height: '100px',
        overflow: 'scroll',
        top: '-9999px'
    });
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);

    return {
        width: scrollbarWidth,
        height: scrollbarHeight
    };
}

/**
 * 获取元素距离视口顶部和左边的偏移距离
 * @return {Object} top, left
 */
function getOffset(node) {
    var rect = node.getBoundingClientRect();
    var win = node.ownerDocument.defaultView;
    return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
    };
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/events.js

/**
 * 取消事件绑定
 * @param  {*}   node       DOM节点或任何可以绑定事件的对象
 * @param  {String}   eventName  事件名
 * @param  {Function} callback   回调方法
 * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先
 */
function _off(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.removeEventListener) {
        node.removeEventListener(eventName, callback, useCapture || false);
    }
}

/**
 * 绑定事件
 * @param  {*}   node       DOM节点或任何可以绑定事件的对象
 * @param  {String}   eventName  事件名
 * @param  {Function} callback   回调方法
 * @param  {Boolean}   useCapture 是否开启事件捕获优先
 * @return {Object}               返回的object中包含一个off方法，用于取消事件监听
 *
 * @example
 * const handler = events.on(document.body, 'click', e => {
 *     // handle click ...
 * });
 * // 取消事件绑定
 * handler.off();
 */
function on(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.addEventListener) {
        node.addEventListener(eventName, callback, useCapture || false);
    }

    return {
        off: function off() {
            return _off(node, eventName, callback, useCapture);
        }
    };
}

/**
 * 绑定事件，只执行一次后销毁
 * @param  {*}   node       DOM节点或任何可以绑定事件的对象
 * @param  {String}   eventName  事件名
 * @param  {Function} callback   回调方法
 * @param  {Boolean}   useCapture 是否开启事件捕获优先
 * @return {Function}             返回的object中包含一个off方法，用于取消事件监听
 */
function once(node, eventName, callback, useCapture) {
    return on(node, eventName, function __fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        callback.apply(this, args);

        // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once
        _off(node, eventName, __fn, useCapture);
    }, useCapture);
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/func.js


/**
 * 一个空方法，返回入参本身或空对象
 */
var noop = function noop() {};

/**
 * 一个空方法，返回false
 */
var prevent = function prevent() {
    return false;
};

/**
 * 将N个方法合并为一个链式调用的方法
 * @return {Function}     合并后的方法
 * 参考 https://github.com/react-component/util/
 *
 * @example
 * func.makeChain(this.handleChange, this.props.onChange);
 */
function makeChain() {
    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
        fns[_key] = arguments[_key];
    }

    if (fns.length === 1) {
        return fns[0];
    }

    return function chainedFunction() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        for (var i = 0, j = fns.length; i < j; i++) {
            if (fns[i] && fns[i].apply) {
                fns[i].apply(this, args);
            }
        }
    };
}

/**
 * 批量改变方法的上下文
 * 此方法在react组件中很有用，在constructor中批量将组件上的方法执行上下文绑定到组件本身
 * 注意：用bind改变函数运行的上下文只会生效一次
 * @param  {Object} ctx 方法挂载的对象以及执行的上下文
 * @param  {Array<String>} fns 方法名列表
 *
 * @example
 * func.bindCtx(this, ['handleClick', 'handleChange']);
 */
function bindCtx(ctx, fns, ns) {
    if (typeof fns === 'string') {
        fns = [fns];
    }

    // 方法的挂载空间，如果不传，默认与ctx相同
    ns = ns || ctx;

    fns.forEach(function (fnName) {
        // 这里不要添加空方法判断，由调用者保证正确性，否则出了问题无法排查
        ns[fnName] = ns[fnName].bind(ctx);
    });
}

/**
 * 用于执行回调方法后的逻辑
 * @param  {*} ret            回调方法执行结果
 * @param  {Function} success 执行结果返回非false的回调
 * @param  {Function} [failure=noop] 执行结果返回false的回调
 */
function promiseCall(ret, success) {
    var failure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

    if (isPromise(ret)) {
        return ret.then(function (result) {
            success(result);
            return result;
        }).catch(function (e) {
            failure(e);
            // throw e;
        });
    }

    return ret !== false ? success(ret) : failure(ret);
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/support.js



var animationEndEventNames = {
    WebkitAnimation: 'webkitAnimationEnd',
    OAnimation: 'oAnimationEnd',
    animation: 'animationend'
};

var transitionEventNames = {
    WebkitTransition: 'webkitTransitionEnd',
    OTransition: 'oTransitionEnd',
    transition: 'transitionend'
};

/**
 * 是否支持某些动效事件，如果支持，返回相应的end事件名
 * @private
 * @param  {Object<String>} names
 * @return {Object|false}
 */
function _supportEnd(names) {
    /* istanbul ignore if */
    if (!hasDOM) {
        return false;
    }

    var el = document.createElement('div');
    var ret = false;

    each(names, function (val, key) {
        /* istanbul ignore else */
        if (el.style[key] !== undefined) {
            ret = { end: val };
            return false;
        }
    });

    return ret;
}

/**
 * 是否支持某些CSS属性
 * @private
 * @param  {Object<Array<String>>} names
 * @return {Boolean}       is support
 */
function _supportCSS(names) {
    /* istanbul ignore if */
    if (!hasDOM) {
        return false;
    }

    var el = document.createElement('div');
    var ret = false;

    each(names, function (val, key) {
        each(val, function (item) {
            try {
                el.style[key] = item;
                ret = ret || el.style[key] === item;
            } catch (e) {
                // It will be throw error when set unknown property under IE8
            }
            return !ret; // 如果有一个支持就返回false，后面不需要再判断
        });

        return !ret;
    });

    return ret;
}

/**
 * 是否支持animation以及动画结束事件名
 * @type {Object|false}
 * @property {String} end 动画结束事件名
 */
var support_animation = _supportEnd(animationEndEventNames);

/**
 * 是否支持transition以及过滤效果结束事件名
 * @type {Object|false}
 * @property {String} end 过渡效果结束事件名
 */
var transition = _supportEnd(transitionEventNames);

/**
 * 是否支持flex属性
 * @type {Boolean}
 */
var flex = _supportCSS({
    display: ['flex', '-webkit-flex', '-moz-flex', '-ms-flexbox']
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/keycode.js
/* harmony default export */ var keycode = ({
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,

    // version 0.x
    ESCAPE: 27,
    LEFT_ARROW: 37,
    UP_ARROW: 38,
    RIGHT_ARROW: 39,
    DOWN_ARROW: 40,

    // MacOS
    CONTROL: 17,
    OPTION: 18,
    CMD: 91,
    COMMAND: 91,
    DELETE: 8
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/focus.js



/**
 * 用于切换页面元素的焦点
 */

/**
 * 元素是否可见
 * @private
 * @param   {Element}  node
 * @return  {Boolean}
 */
function _isVisible(node) {
    while (node) {
        if (node === document.body || node === document.documentElement) {
            break;
        }
        if (node.style.display === 'none' || node.style.visibility === 'hidden') {
            return false;
        }
        node = node.parentNode;
    }
    return true;
}

/**
 * 元素是否可以获取焦点
 * @private
 * @param   {Element}  node
 * @return  {Boolean}
 */
function _isFocusable(node) {
    var nodeName = node.nodeName.toLowerCase();
    var tabIndex = parseInt(node.getAttribute('tabindex'), 10);
    var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;

    if (_isVisible(node)) {
        if (nodeName === 'input') {
            return !node.disabled && node.type !== 'hidden';
        } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {
            return !node.disabled;
        } else if (nodeName === 'a') {
            return node.getAttribute('href') || hasTabIndex;
        } else {
            return hasTabIndex;
        }
    }
    return false;
}

/**
 * 列出能获取焦点的子节点
 * @param  {Element} node 容器节点
 * @return {Array<Element>}
 */
function getFocusNodeList(node) {
    var res = [];
    var nodeList = node.querySelectorAll('*');

    each(nodeList, function (item) {
        if (_isFocusable(item)) {
            var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';
            res[method](item);
        }
    });

    if (_isFocusable(node)) {
        res.unshift(node);
    }

    return res;
}

// 用于记录上一次获得焦点的无素
var lastFocusElement = null;

/**
 * 保存最近一次获得焦点的无素
 */
function saveLastFocusNode() {
    lastFocusElement = document.activeElement;
}

/**
 * 清除焦点记录
 */
function clearLastFocusNode() {
    lastFocusElement = null;
}

/**
 * 尝试将焦点切换到上一个元素
 */
function backLastFocusNode() {
    if (lastFocusElement) {
        try {
            // 元素可能已经被移动了
            lastFocusElement.focus();
        } catch (e) {
            // ignore ...
        }
    }
}

/**
 * 在限制的范围内切换焦点
 * @param  {Element} node 容器节点
 * @param  {Event} e      键盘事件
 */
function limitTabRange(node, e) {
    if (e.keyCode === keycode.TAB) {
        var tabNodeList = getFocusNodeList(node);
        var maxIndex = tabNodeList.length - 1;
        var index = tabNodeList.indexOf(document.activeElement);

        if (index > -1) {
            var targetIndex = index + (e.shiftKey ? -1 : 1);
            targetIndex < 0 && (targetIndex = maxIndex);
            targetIndex > maxIndex && (targetIndex = 0);
            tabNodeList[targetIndex].focus();
            e.preventDefault();
        }
    }
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/guid.js
var timestamp = Date.now();

/**
 * 生成全局唯一的id
 * @param  {String} [prefix=''] 前缀字符串
 * @return {String}
 *
 * @example
 * guid(); // j7jv509c
 * guid('prefix-'); // prefix-j7jv509d
 */
/* harmony default export */ var guid = (function (prefix) {
  prefix = prefix || '';

  return prefix + (timestamp++).toString(36);
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/util/index.js












var dom = dom_namespaceObject;
var util_env = env_namespaceObject;
var util_events = events_namespaceObject;
var func = func_namespaceObject;
var log = log_namespaceObject;
var util_obj = object_namespaceObject;
var util_str = string_namespaceObject;
var support = support_namespaceObject;
var util_focus = focus_namespaceObject;
var util_guid = guid;
var KEYCODE = keycode;
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/config-provider/get-context-props.js

function getContextProps(props, context, displayName) {
    var prefix = props.prefix,
        locale = props.locale,
        pure = props.pure,
        rtl = props.rtl;
    var nextPrefix = context.nextPrefix,
        nextLocale = context.nextLocale,
        nextPure = context.nextPure,
        nextWarning = context.nextWarning,
        nextRtl = context.nextRtl;


    var newPrefix = prefix || nextPrefix;

    var localeFromContext = void 0;
    if (nextLocale) {
        localeFromContext = nextLocale[displayName];
        if (localeFromContext) {
            localeFromContext.momentLocale = nextLocale.momentLocale;
        }
    }
    var newLocale = void 0;
    if (locale) {
        newLocale = extends_default()({}, localeFromContext || {}, locale);
    } else if (localeFromContext) {
        newLocale = localeFromContext;
    }

    var newPure = typeof pure === 'boolean' ? pure : nextPure;
    var newRtl = typeof rtl === 'boolean' ? rtl : nextRtl;

    return {
        prefix: newPrefix,
        locale: newLocale,
        pure: newPure,
        rtl: newRtl,
        warning: nextWarning
    };
}
// EXTERNAL MODULE: ./node_modules/_babel-runtime@6.26.0@babel-runtime/helpers/objectWithoutProperties.js
var objectWithoutProperties = __webpack_require__(7);
var objectWithoutProperties_default = /*#__PURE__*/__webpack_require__.n(objectWithoutProperties);

// EXTERNAL MODULE: ./node_modules/_hoist-non-react-statics@2.5.5@hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var hoist_non_react_statics_cjs = __webpack_require__(99);
var hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/config-provider/config.js











var config_shallowEqual = util_obj.shallowEqual;


function getDisplayName(Component) {
    return Component.displayName || Component.name || 'Component';
}

var globalLocales = void 0;
var currentGlobalLanguage = 'zh-cn';
var currentGlobalLocale = {};
var currentGlobalRtl = void 0;

function initLocales(locales) {
    globalLocales = locales;

    if (locales) {
        currentGlobalLocale = locales[currentGlobalLanguage];

        if (typeof currentGlobalRtl !== 'boolean') {
            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
        }
    }
}

function setLanguage(language) {
    if (globalLocales) {
        currentGlobalLanguage = language;
        currentGlobalLocale = globalLocales[language];

        if (typeof currentGlobalRtl !== 'boolean') {
            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
        }
    }
}

function setLocale(locale) {
    currentGlobalLocale = extends_default()({}, globalLocales ? globalLocales[currentGlobalLanguage] : {}, locale);

    if (typeof currentGlobalRtl !== 'boolean') {
        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
    }
}

function setDirection(dir) {
    currentGlobalRtl = dir === 'rtl';
}

function getLocale() {
    return currentGlobalLocale;
}

function getLanguage() {
    return currentGlobalLanguage;
}

function getDirection() {
    return currentGlobalRtl;
}

function config_config(Component) {
    var _class, _temp;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (Component.prototype.shouldComponentUpdate === undefined) {
        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (this.props.pure) {
                return !config_shallowEqual(this.props, nextProps) || !config_shallowEqual(this.state, nextState);
            }

            return true;
        };
    }

    var ConfigedComponent = (_temp = _class = function (_React$Component) {
        inherits_default()(ConfigedComponent, _React$Component);

        function ConfigedComponent(props, context) {
            classCallCheck_default()(this, ConfigedComponent);

            var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

            _this._getInstance = _this._getInstance.bind(_this);
            _this._deprecated = _this._deprecated.bind(_this);
            return _this;
        }

        ConfigedComponent.prototype._getInstance = function _getInstance(ref) {
            var _this2 = this;

            this._instance = ref;

            if (this._instance && options.exportNames) {
                options.exportNames.forEach(function (name) {
                    var field = _this2._instance[name];
                    if (typeof field === 'function') {
                        _this2[name] = field.bind(_this2._instance);
                    } else {
                        _this2[name] = field;
                    }
                });
            }
        };

        ConfigedComponent.prototype._deprecated = function _deprecated() {
            if (this.context.nextWarning !== false) {
                log.deprecated.apply(log, arguments);
            }
        };

        ConfigedComponent.prototype.getInstance = function getInstance() {
            return this._instance;
        };

        ConfigedComponent.prototype.render = function render() {
            var _props = this.props,
                prefix = _props.prefix,
                locale = _props.locale,
                pure = _props.pure,
                rtl = _props.rtl,
                others = objectWithoutProperties_default()(_props, ['prefix', 'locale', 'pure', 'rtl']);

            var _context = this.context,
                nextPrefix = _context.nextPrefix,
                _context$nextLocale = _context.nextLocale,
                nextLocale = _context$nextLocale === undefined ? {} : _context$nextLocale,
                nextPure = _context.nextPure,
                nextRtl = _context.nextRtl;


            var displayName = options.componentName || getDisplayName(Component);
            var contextProps = getContextProps({ prefix: prefix, locale: locale, pure: pure, rtl: rtl }, {
                nextPrefix: nextPrefix,
                nextLocale: extends_default()({}, currentGlobalLocale, nextLocale),
                nextPure: nextPure,
                nextRtl: typeof nextRtl === 'boolean' ? nextRtl : currentGlobalRtl === true ? true : undefined
            }, displayName);

            var newContextProps = ['prefix', 'locale', 'pure', 'rtl'].reduce(function (ret, name) {
                if (typeof contextProps[name] !== 'undefined') {
                    ret[name] = contextProps[name];
                }
                return ret;
            }, {});

            var newOthers = options.transform ? options.transform(others, this._deprecated) : others;

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Component, extends_default()({}, newOthers, newContextProps, {
                ref: this._getInstance
            }));
        };

        return ConfigedComponent;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.propTypes = extends_default()({}, Component.propTypes || {}, {
        prefix: _prop_types_15_7_2_prop_types_default.a.string,
        locale: _prop_types_15_7_2_prop_types_default.a.object,
        pure: _prop_types_15_7_2_prop_types_default.a.bool,
        rtl: _prop_types_15_7_2_prop_types_default.a.bool
    }), _class.contextTypes = extends_default()({}, Component.contextTypes || {}, {
        nextPrefix: _prop_types_15_7_2_prop_types_default.a.string,
        nextLocale: _prop_types_15_7_2_prop_types_default.a.object,
        nextPure: _prop_types_15_7_2_prop_types_default.a.bool,
        nextRtl: _prop_types_15_7_2_prop_types_default.a.bool,
        nextWarning: _prop_types_15_7_2_prop_types_default.a.bool
    }), _temp);
    ConfigedComponent.displayName = 'ConfigedComponent';


    ConfigedComponent.displayName = 'Config(' + getDisplayName(Component) + ')';

    hoist_non_react_statics_cjs_default()(ConfigedComponent, Component);

    return ConfigedComponent;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/config-provider/consumer.js


/**
 * Creates an object with the same values as object and keys
 * generated by running each own enumerable string keyed property
 * of object thru iteratee.
 * @param {Object} obj
 * @param {Function} fn
 * @return {Object}
 */
var mapKeys = function mapKeys(obj, fn) {
    var result = {};
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var value = obj[key];
            var newKey = fn(key, value);
            result[newKey] = value;
        }
    }

    return result;
};

/**
 * Replace specific key with prefix `next`
 * and lowercase first character of the result.
 * @param {String} key
 * @return {String}
 */
var replaceKey = function replaceKey(key) {
    return key.replace(/^(next)([A-Z])/, function (match, p1, p2) {
        return p2.toLowerCase();
    });
};

/**
 * @param {Object} source
 * @return {Object}
 */
var transformContext = function transformContext(source) {
    return mapKeys(source, replaceKey);
};

/**
 * Consumer
 * @param {Object} prop
 * @param {Object} context
 */
var Consumer = function Consumer(_ref, context) {
    var children = _ref.children;
    return typeof children === 'function' ? children(transformContext(context)) : null;
};

/**
 * PropTypes
 * @type {Object}
 * @static
 */
Consumer.propTypes = {
    // Render context as function
    // Function(context: object): ReactElement
    children: _prop_types_15_7_2_prop_types_default.a.func
};

/**
 * ContextTypes (legacy context)
 * @type {Object}
 * @static
 */
Consumer.contextTypes = {
    nextPrefix: _prop_types_15_7_2_prop_types_default.a.string,
    nextLocale: _prop_types_15_7_2_prop_types_default.a.object,
    nextPure: _prop_types_15_7_2_prop_types_default.a.bool,
    newRtl: _prop_types_15_7_2_prop_types_default.a.bool,
    nextWarning: _prop_types_15_7_2_prop_types_default.a.bool
};

/* harmony default export */ var consumer = (Consumer);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/config-provider/cache.js


var cache_Cache = function () {
    function Cache() {
        classCallCheck_default()(this, Cache);

        this._root = null;
        this._store = new Map();
    }

    Cache.prototype.empty = function empty() {
        return this._store.size === 0;
    };

    Cache.prototype.has = function has(key) {
        return this._store.has(key);
    };

    Cache.prototype.get = function get(key, defaultValue) {
        var res = this.has(key) ? this._store.get(key) : this.root();
        return typeof res === 'undefined' || res === null ? defaultValue : res;
    };

    Cache.prototype.add = function add(key, value) {
        if (this.empty()) {
            this._root = key;
        }
        this._store.set(key, value);
    };

    Cache.prototype.update = function update(key, value) {
        if (this.has(key)) {
            this._store.set(key, value);
        }
    };

    Cache.prototype.remove = function remove(key) {
        this._store.delete(key);
    };

    Cache.prototype.root = function root() {
        return this._store.get(this._root);
    };

    return Cache;
}();

/* harmony default export */ var config_provider_cache = (cache_Cache);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/config-provider/index.js





var config_provider__class, config_provider__temp;








var childContextCache = new config_provider_cache();

/**
 * ConfigProvider
 * @propsExtends false
 */
var config_provider_ConfigProvider = (config_provider__temp = config_provider__class = function (_Component) {
    inherits_default()(ConfigProvider, _Component);

    /**
     * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件
     * @param {Object} props 组件的 props
     * @param {String} displayName 组件的 displayName
     * @returns {Object} 新的 context props
     */
    function ConfigProvider() {
        classCallCheck_default()(this, ConfigProvider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args)));

        childContextCache.add(_this, extends_default()({}, childContextCache.get(_this, {}), _this.getChildContext()));
        return _this;
    }

    /**
     * 传入组件，生成受 ConfigProvider 控制的 HOC 组件
     * @param {Component} Component 组件类
     * @param {Object} options 可选项
     * @returns {Component} HOC
     */


    ConfigProvider.prototype.getChildContext = function getChildContext() {
        var _props = this.props,
            prefix = _props.prefix,
            locale = _props.locale,
            pure = _props.pure,
            warning = _props.warning,
            rtl = _props.rtl;


        return {
            nextPrefix: prefix,
            nextLocale: locale,
            nextPure: pure,
            nextRtl: rtl,
            nextWarning: warning
        };
    };

    ConfigProvider.prototype.componentWillMount = function componentWillMount() {
        this.setMomentLocale(this.props.locale);
    };

    ConfigProvider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.locale !== nextProps.locale) {
            this.setMomentLocale(nextProps.locale);
        }
    };

    ConfigProvider.prototype.componentDidUpdate = function componentDidUpdate() {
        childContextCache.add(this, extends_default()({}, childContextCache.get(this, {}), this.getChildContext()));
    };

    ConfigProvider.prototype.componentWillUnmount = function componentWillUnmount() {
        childContextCache.remove(this);
    };

    ConfigProvider.prototype.setMomentLocale = function setMomentLocale(locale) {
        var moment = void 0;
        try {
            moment = __webpack_require__(10);
        } catch (e) {
            // ignore
        }

        if (moment && locale) {
            moment.locale(locale.momentLocale);
        }
    };

    ConfigProvider.prototype.render = function render() {
        return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(this.props.children);
    };

    return ConfigProvider;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), config_provider__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 国际化文案对象，属性为组件的 displayName
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用
     */
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否在开发模式下显示组件属性被废弃的 warning 提示
     */
    warning: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否开启 rtl 模式
     */
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 组件树
     */
    children: _prop_types_15_7_2_prop_types_default.a.element
}, config_provider__class.defaultProps = {
    warning: true
}, config_provider__class.childContextTypes = {
    nextPrefix: _prop_types_15_7_2_prop_types_default.a.string,
    nextLocale: _prop_types_15_7_2_prop_types_default.a.object,
    nextPure: _prop_types_15_7_2_prop_types_default.a.bool,
    nextRtl: _prop_types_15_7_2_prop_types_default.a.bool,
    nextWarning: _prop_types_15_7_2_prop_types_default.a.bool
}, config_provider__class.config = function (Component, options) {
    return config_config(Component, options);
}, config_provider__class.getContextProps = function (props, displayName) {
    return getContextProps(props, childContextCache.root() || {}, displayName);
}, config_provider__class.initLocales = initLocales, config_provider__class.setLanguage = setLanguage, config_provider__class.setLocale = setLocale, config_provider__class.setDirection = setDirection, config_provider__class.getLanguage = getLanguage, config_provider__class.getLocale = getLocale, config_provider__class.getDirection = getDirection, config_provider__class.Consumer = consumer, config_provider__class.getContext = function () {
    var _ref = childContextCache.root() || {},
        nextPrefix = _ref.nextPrefix,
        nextLocale = _ref.nextLocale,
        nextPure = _ref.nextPure,
        nextRtl = _ref.nextRtl,
        nextWarning = _ref.nextWarning;

    return {
        prefix: nextPrefix,
        locale: nextLocale,
        pure: nextPure,
        rtl: nextRtl,
        warning: nextWarning
    };
}, config_provider__temp);
config_provider_ConfigProvider.displayName = 'ConfigProvider';


/* harmony default export */ var config_provider = (config_provider_ConfigProvider);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/affix/util.js
function getScroll(node, isVertical) {
    if (typeof window === 'undefined') {
        return 0;
    }
    var windowProp = isVertical ? 'pageYOffset' : 'pageXOffset';
    var elementProp = isVertical ? 'scrollTop' : 'scrollLeft';
    return node === window ? node[windowProp] : node[elementProp];
}

function getRect(node) {
    return node !== window ? node.getBoundingClientRect() : { top: 0, left: 0, bottom: 0 };
}

function getNodeHeight(node) {
    if (!node) {
        return 0;
    }
    if (node === window) {
        return window.innerHeight;
    }
    return node.clientHeight;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/affix/index.js





var affix__class, affix__temp;









/** Affix */
var affix_Affix = (affix__temp = affix__class = function (_React$Component) {
    inherits_default()(Affix, _React$Component);

    function Affix(props, context) {
        classCallCheck_default()(this, Affix);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.updatePosition = function () {
            _this._updateNodePosition();
        };

        _this._updateNodePosition = function () {
            var _this$props = _this.props,
                container = _this$props.container,
                useAbsolute = _this$props.useAbsolute;

            var affixContainer = container();

            if (!affixContainer) {
                return false;
            }
            var containerScrollTop = getScroll(affixContainer, true); // 容器在垂直位置上的滚动 offset
            var affixOffset = _this._getOffset(_this.affixNode, affixContainer); // 目标节点当前相对于容器的 offset
            var containerHeight = getNodeHeight(affixContainer); // 容器的高度
            var affixHeight = _this.affixNode.offsetHeight;
            var containerRect = getRect(affixContainer);

            var affixChildHeight = _this.affixChildNode.offsetHeight;

            var affixMode = _this.affixMode;
            var affixStyle = {
                width: affixOffset.width
            };
            var containerStyle = {
                width: affixOffset.width,
                height: affixChildHeight
            };

            if (affixMode.top && containerScrollTop > affixOffset.top - affixMode.offset) {
                // affix top
                if (useAbsolute) {
                    affixStyle.position = 'absolute';
                    affixStyle.top = containerScrollTop - (affixOffset.top - affixMode.offset);
                    containerStyle.position = 'relative';
                } else {
                    affixStyle.position = 'fixed';
                    affixStyle.top = affixMode.offset + containerRect.top;
                }
                _this._setAffixStyle(affixStyle, true);
                _this._setContainerStyle(containerStyle);
            } else if (affixMode.bottom && containerScrollTop < affixOffset.top + affixHeight + affixMode.offset - containerHeight) {
                // affix bottom
                affixStyle.height = affixHeight;
                if (useAbsolute) {
                    affixStyle.position = 'absolute';
                    affixStyle.top = containerScrollTop - (affixOffset.top + affixHeight + affixMode.offset - containerHeight);
                    containerStyle.position = 'relative';
                } else {
                    affixStyle.position = 'fixed';
                    affixStyle.bottom = affixMode.offset;
                }
                _this._setAffixStyle(affixStyle, true);
                _this._setContainerStyle(containerStyle);
            } else {
                _this._setAffixStyle(null);
                _this._setContainerStyle(null);
            }
        };

        _this._affixNodeRefHandler = function (ref) {
            _this.affixNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);
        };

        _this._affixChildNodeRefHandler = function (ref) {
            _this.affixChildNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);
        };

        _this.state = {
            style: null,
            containerStyle: null
        };
        _this.affixMode = _this._getAffixMode(props);
        return _this;
    }

    Affix.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        var container = this.props.container;

        this._updateNodePosition();
        // wait for parent rendered
        this.timeout = setTimeout(function () {
            _this2._setEventHandlerForContainer(container);
        });
    };

    Affix.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        var container = this.props.container;

        this._removeEventHandlerForContainer(container);
    };

    Affix.prototype._setEventHandlerForContainer = function _setEventHandlerForContainer(getContainer) {
        var container = getContainer();
        if (!container) {
            return;
        }
        util_events.on(container, 'scroll', this._updateNodePosition, false);
        util_events.on(container, 'resize', this._updateNodePosition, false);
    };

    Affix.prototype._removeEventHandlerForContainer = function _removeEventHandlerForContainer(getContainer) {
        var container = getContainer();
        if (container) {
            util_events.off(container, 'scroll', this._updateNodePosition);
            util_events.off(container, 'resize', this._updateNodePosition);
        }
    };

    Affix.prototype._getAffixMode = function _getAffixMode() {
        var _props = this.props,
            offsetTop = _props.offsetTop,
            offsetBottom = _props.offsetBottom;

        var affixMode = {
            top: false,
            bottom: false,
            offset: 0
        };

        if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {
            // set default
            affixMode.top = true;
        } else if (typeof offsetTop === 'number') {
            affixMode.top = true;
            affixMode.offset = offsetTop;
        } else if (typeof offsetBottom === 'number') {
            affixMode.bottom = true;
            affixMode.offset = offsetBottom;
        }

        return affixMode;
    };

    Affix.prototype._setAffixStyle = function _setAffixStyle(affixStyle) {
        var affixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (util_obj.shallowEqual(affixStyle, this.state.style)) {
            return;
        }

        this.setState({
            style: affixStyle
        });

        var onAffix = this.props.onAffix;


        if (affixed) {
            onAffix(true);
        } else if (!affixStyle) {
            onAffix(false);
        }
    };

    Affix.prototype._setContainerStyle = function _setContainerStyle(containerStyle) {
        if (util_obj.shallowEqual(containerStyle, this.state.containerStyle)) {
            return;
        }
        this.setState({ containerStyle: containerStyle });
    };

    Affix.prototype._getOffset = function _getOffset(affixNode, affixContainer) {
        var affixRect = affixNode.getBoundingClientRect(); // affix 元素 相对浏览器窗口的位置
        var containerRect = getRect(affixContainer); // affix 容器 相对浏览器窗口的位置
        var containerScrollTop = getScroll(affixContainer, true);
        var containerScrollLeft = getScroll(affixContainer, false);

        return {
            top: affixRect.top - containerRect.top + containerScrollTop,
            left: affixRect.left - containerRect.left + containerScrollLeft,
            width: affixRect.width,
            height: affixRect.height
        };
    };

    Affix.prototype.render = function render() {
        var _classnames;

        var _props2 = this.props,
            prefix = _props2.prefix,
            className = _props2.className,
            style = _props2.style,
            children = _props2.children;

        var state = this.state;
        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'affix'] = state.style, _classnames[prefix + 'affix-top'] = !state.style && this.affixMode.top, _classnames[prefix + 'affix-bottom'] = !state.style && this.affixMode.bottom, _classnames[className] = className, _classnames));
        var combinedStyle = extends_default()({}, state.containerStyle, style);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { ref: this._affixNodeRefHandler, style: combinedStyle },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { ref: this._affixChildNodeRefHandler, className: classNames, style: state.style },
                children
            )
        );
    };

    return Affix;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), affix__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 设置 Affix 需要监听滚动事件的容器元素
     * @return {ReactElement} 目标容器元素的实例
     */
    container: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 距离窗口顶部达到指定偏移量后触发
     */
    offsetTop: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 距离窗口底部达到制定偏移量后触发
     */
    offsetBottom: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 当元素的样式发生固钉样式变化时触发的回调函数
     * @param {Boolean} 元素是否被固钉
     */
    onAffix: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否启用绝对布局实现 affix
     * @param {Boolean} 是否启用绝对布局
     */
    useAbsolute: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, affix__class.defaultProps = {
    prefix: 'next-',
    container: function container() {
        return window;
    },
    onAffix: func.noop
}, affix__temp);
affix_Affix.displayName = 'Affix';


/* harmony default export */ var affix = (config_provider.config(affix_Affix));
// EXTERNAL MODULE: ./node_modules/_react-transition-group@2.6.0@react-transition-group/index.js
var _react_transition_group_2_6_0_react_transition_group = __webpack_require__(51);
var _react_transition_group_2_6_0_react_transition_group_default = /*#__PURE__*/__webpack_require__.n(_react_transition_group_2_6_0_react_transition_group);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/animate/child.js






var child__class, child__temp;






var child_noop = function noop() {};
var child_on = util_events.on,
    off = util_events.off;
var child_addClass = dom.addClass,
    child_removeClass = dom.removeClass;

var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

function getStyleProperty(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < prefixes.length; i++) {
        ret = style.getPropertyValue(prefixes[i] + name);
        if (ret) {
            break;
        }
    }
    return ret;
}

var child_AnimateChild = (child__temp = child__class = function (_Component) {
    inherits_default()(AnimateChild, _Component);

    function AnimateChild(props) {
        classCallCheck_default()(this, AnimateChild);

        var _this2 = possibleConstructorReturn_default()(this, _Component.call(this, props));

        func.bindCtx(_this2, ['handleEnter', 'handleEntering', 'handleEntered', 'handleExit', 'handleExiting', 'handleExited', 'addEndListener']);
        _this2.endListeners = {
            transitionend: [],
            animationend: []
        };
        _this2.timeoutMap = {};
        return _this2;
    }

    AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
        var _this3 = this;

        Object.keys(this.endListeners).forEach(function (eventName) {
            _this3.endListeners[eventName].forEach(function (listener) {
                off(_this3.node, eventName, listener);
            });
        });
        this.endListeners = {
            transitionend: [],
            animationend: []
        };
    };

    AnimateChild.prototype.generateEndListener = function generateEndListener(node, done, eventName, id) {
        var _this = this;
        return function endListener(e) {

            if (e && e.target === node) {
                if (_this.timeoutMap[id]) {
                    clearTimeout(_this.timeoutMap[id]);
                    delete _this.timeoutMap[id];
                }

                done();
                off(node, eventName, endListener);
                var listeners = _this.endListeners[eventName];
                var index = listeners.indexOf(endListener);
                index > -1 && listeners.splice(index, 1);
            }
        };
    };

    AnimateChild.prototype.addEndListener = function addEndListener(node, done) {
        var _this4 = this;

        if (support.transition || support.animation) {
            var id = util_guid();

            this.node = node;
            if (support.transition) {
                var transitionEndListener = this.generateEndListener(node, done, 'transitionend', id);
                child_on(node, 'transitionend', transitionEndListener);
                this.endListeners.transitionend.push(transitionEndListener);
            }
            if (support.animation) {
                var animationEndListener = this.generateEndListener(node, done, 'animationend', id);
                child_on(node, 'animationend', animationEndListener);
                this.endListeners.animationend.push(animationEndListener);
            }

            setTimeout(function () {
                var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
                var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
                var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
                var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
                var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
                if (time) {
                    _this4.timeoutMap[id] = setTimeout(function () {
                        done();
                    }, time * 1000 + 200);
                }
            }, 15);
        } else {
            done();
        }
    };

    AnimateChild.prototype.removeEndtListener = function removeEndtListener() {
        this.transitionOff && this.transitionOff();
        this.animationOff && this.animationOff();
    };

    AnimateChild.prototype.removeClassNames = function removeClassNames(node, names) {
        Object.keys(names).forEach(function (key) {
            child_removeClass(node, names[key]);
        });
    };

    AnimateChild.prototype.handleEnter = function handleEnter(node, isAppearing) {
        var names = this.props.names;

        if (names) {
            this.removeClassNames(node, names);
            var className = isAppearing ? 'appear' : 'enter';
            child_addClass(node, names[className]);
        }

        var hook = isAppearing ? this.props.onAppear : this.props.onEnter;
        hook(node);
    };

    AnimateChild.prototype.handleEntering = function handleEntering(node, isAppearing) {
        var _this5 = this;

        setTimeout(function () {
            var names = _this5.props.names;

            if (names) {
                var className = isAppearing ? 'appearActive' : 'enterActive';
                child_addClass(node, names[className]);
            }

            var hook = isAppearing ? _this5.props.onAppearing : _this5.props.onEntering;
            hook(node);
        }, 10);
    };

    AnimateChild.prototype.handleEntered = function handleEntered(node, isAppearing) {
        var names = this.props.names;

        if (names) {
            var classNames = isAppearing ? [names.appear, names.appearActive] : [names.enter, names.enterActive];
            classNames.forEach(function (className) {
                child_removeClass(node, className);
            });
        }

        var hook = isAppearing ? this.props.onAppeared : this.props.onEntered;
        hook(node);
    };

    AnimateChild.prototype.handleExit = function handleExit(node) {
        var names = this.props.names;

        if (names) {
            this.removeClassNames(node, names);
            child_addClass(node, names.leave);
        }

        this.props.onExit(node);
    };

    AnimateChild.prototype.handleExiting = function handleExiting(node) {
        var _this6 = this;

        setTimeout(function () {
            var names = _this6.props.names;

            if (names) {
                child_addClass(node, names.leaveActive);
            }
            _this6.props.onExiting(node);
        }, 10);
    };

    AnimateChild.prototype.handleExited = function handleExited(node) {
        var names = this.props.names;

        if (names) {
            [names.leave, names.leaveActive].forEach(function (className) {
                child_removeClass(node, className);
            });
        }

        this.props.onExited(node);
    };

    AnimateChild.prototype.render = function render() {
        /* eslint-disable no-unused-vars */
        var _props = this.props,
            names = _props.names,
            onAppear = _props.onAppear,
            onAppeared = _props.onAppeared,
            onAppearing = _props.onAppearing,
            onEnter = _props.onEnter,
            onEntering = _props.onEntering,
            onEntered = _props.onEntered,
            onExit = _props.onExit,
            onExiting = _props.onExiting,
            onExited = _props.onExited,
            others = objectWithoutProperties_default()(_props, ['names', 'onAppear', 'onAppeared', 'onAppearing', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited']);
        /* eslint-enable no-unused-vars */

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(_react_transition_group_2_6_0_react_transition_group["Transition"], extends_default()({}, others, {
            onEnter: this.handleEnter,
            onEntering: this.handleEntering,
            onEntered: this.handleEntered,
            onExit: this.handleExit,
            onExiting: this.handleExiting,
            onExited: this.handleExited,
            addEndListener: this.addEndListener }));
    };

    return AnimateChild;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), child__class.propTypes = {
    names: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.object]),
    onAppear: _prop_types_15_7_2_prop_types_default.a.func,
    onAppearing: _prop_types_15_7_2_prop_types_default.a.func,
    onAppeared: _prop_types_15_7_2_prop_types_default.a.func,
    onEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onEntering: _prop_types_15_7_2_prop_types_default.a.func,
    onEntered: _prop_types_15_7_2_prop_types_default.a.func,
    onExit: _prop_types_15_7_2_prop_types_default.a.func,
    onExiting: _prop_types_15_7_2_prop_types_default.a.func,
    onExited: _prop_types_15_7_2_prop_types_default.a.func
}, child__class.defaultProps = {
    onAppear: child_noop,
    onAppearing: child_noop,
    onAppeared: child_noop,
    onEnter: child_noop,
    onEntering: child_noop,
    onEntered: child_noop,
    onExit: child_noop,
    onExiting: child_noop,
    onExited: child_noop
}, child__temp);
child_AnimateChild.displayName = 'AnimateChild';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/animate/animate.js







var animate__class, animate__temp;






var animate_noop = function noop() {};
var animate_FirstChild = function FirstChild(props) {
    var childrenArray = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.toArray(props.children);
    return childrenArray[0] || null;
};

/**
 * Animate
 */
var animate_Animate = (animate__temp = animate__class = function (_Component) {
    inherits_default()(Animate, _Component);

    function Animate() {
        classCallCheck_default()(this, Animate);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Animate.prototype.normalizeNames = function normalizeNames(names) {
        if (typeof names === 'string') {
            return {
                appear: names + '-appear',
                appearActive: names + '-appear-active',
                enter: names + '-enter',
                enterActive: names + '-enter-active',
                leave: names + '-leave',
                leaveActive: names + '-leave-active'
            };
        }
        if ((typeof names === 'undefined' ? 'undefined' : typeof_default()(names)) === 'object') {
            return {
                appear: names.appear,
                appearActive: names.appear + '-active',
                enter: '' + names.enter,
                enterActive: names.enter + '-active',
                leave: '' + names.leave,
                leaveActive: names.leave + '-active'
            };
        }
    };

    Animate.prototype.render = function render() {
        var _this2 = this;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            animation = _props.animation,
            children = _props.children,
            animationAppear = _props.animationAppear,
            singleMode = _props.singleMode,
            component = _props.component,
            beforeAppear = _props.beforeAppear,
            onAppear = _props.onAppear,
            afterAppear = _props.afterAppear,
            beforeEnter = _props.beforeEnter,
            onEnter = _props.onEnter,
            afterEnter = _props.afterEnter,
            beforeLeave = _props.beforeLeave,
            onLeave = _props.onLeave,
            afterLeave = _props.afterLeave,
            others = objectWithoutProperties_default()(_props, ['animation', 'children', 'animationAppear', 'singleMode', 'component', 'beforeAppear', 'onAppear', 'afterAppear', 'beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);
        /* eslint-enable no-unused-vars */

        var animateChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                child_AnimateChild,
                { key: child.key,
                    names: _this2.normalizeNames(animation),
                    onAppear: beforeAppear,
                    onAppearing: onAppear,
                    onAppeared: afterAppear,
                    onEnter: beforeEnter,
                    onEntering: onEnter,
                    onEntered: afterEnter,
                    onExit: beforeLeave,
                    onExiting: onLeave,
                    onExited: afterLeave },
                child
            );
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            _react_transition_group_2_6_0_react_transition_group["TransitionGroup"],
            extends_default()({ appear: animationAppear, component: singleMode ? animate_FirstChild : component }, others),
            animateChildren
        );
    };

    return Animate;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), animate__class.propTypes = {
    /**
     * 动画 className
     */
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * 子元素第一次挂载时是否执行动画
     */
    animationAppear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 包裹子元素的标签
     */
    component: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 是否只有单个子元素，如果有多个子元素，请设置为 false
     */
    singleMode: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 子元素
     */
    children: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.element)]),
    /**
     * 执行第一次挂载动画前触发的回调函数
     */
    beforeAppear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数
     *  @param {HTMLElement} node 执行动画的 dom 元素
     */
    onAppear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行完第一次挂载动画后触发的函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterAppear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行进场动画前触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    beforeEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    onEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行完进场动画后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行离场动画前触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    beforeLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    onLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 执行完离场动画后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterLeave: _prop_types_15_7_2_prop_types_default.a.func
}, animate__class.defaultProps = {
    animationAppear: true,
    component: 'div',
    singleMode: true,
    beforeAppear: animate_noop,
    onAppear: animate_noop,
    afterAppear: animate_noop,
    beforeEnter: animate_noop,
    onEnter: animate_noop,
    afterEnter: animate_noop,
    beforeLeave: animate_noop,
    onLeave: animate_noop,
    afterLeave: animate_noop
}, animate__temp);
animate_Animate.displayName = 'Animate';


/* harmony default export */ var animate = (animate_Animate);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/animate/expand.js






var expand__class, expand__temp;






var expand_noop = function noop() {};
var expand_getStyle = dom.getStyle;
var expand_Expand = (expand__temp = expand__class = function (_Component) {
    inherits_default()(Expand, _Component);

    function Expand(props) {
        classCallCheck_default()(this, Expand);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        func.bindCtx(_this, ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);
        return _this;
    }

    Expand.prototype.beforeEnter = function beforeEnter(node) {
        if (this.leaving) {
            this.afterLeave(node);
        }

        this.cacheCurrentStyle(node);
        this.cacheComputedStyle(node);
        this.setCurrentStyleToZero(node);

        this.props.beforeEnter(node);
    };

    Expand.prototype.onEnter = function onEnter(node) {
        this.setCurrentStyleToComputedStyle(node);

        this.props.onEnter(node);
    };

    Expand.prototype.afterEnter = function afterEnter(node) {
        this.restoreCurrentStyle(node);

        this.props.afterEnter(node);
    };

    Expand.prototype.beforeLeave = function beforeLeave(node) {
        this.leaving = true;

        this.cacheCurrentStyle(node);
        this.cacheComputedStyle(node);
        this.setCurrentStyleToComputedStyle(node);

        this.props.beforeLeave(node);
    };

    Expand.prototype.onLeave = function onLeave(node) {
        this.setCurrentStyleToZero(node);

        this.props.onLeave(node);
    };

    Expand.prototype.afterLeave = function afterLeave(node) {
        this.leaving = false;

        this.restoreCurrentStyle(node);

        this.props.afterLeave(node);
    };

    Expand.prototype.cacheCurrentStyle = function cacheCurrentStyle(node) {
        this.styleBorderTopWidth = node.style.borderTopWidth;
        this.stylePaddingTop = node.style.paddingTop;
        this.styleHeight = node.style.height;
        this.stylePaddingBottom = node.style.paddingBottom;
        this.styleBorderBottomWidth = node.style.borderBottomWidth;
    };

    Expand.prototype.cacheComputedStyle = function cacheComputedStyle(node) {
        this.borderTopWidth = expand_getStyle(node, 'borderTopWidth');
        this.paddingTop = expand_getStyle(node, 'paddingTop');
        this.height = node.offsetHeight;
        this.paddingBottom = expand_getStyle(node, 'paddingBottom');
        this.borderBottomWidth = expand_getStyle(node, 'borderBottomWidth');
    };

    Expand.prototype.setCurrentStyleToZero = function setCurrentStyleToZero(node) {
        node.style.borderTopWidth = '0px';
        node.style.paddingTop = '0px';
        node.style.height = '0px';
        node.style.paddingBottom = '0px';
        node.style.borderBottomWidth = '0px';
    };

    Expand.prototype.setCurrentStyleToComputedStyle = function setCurrentStyleToComputedStyle(node) {
        node.style.borderTopWidth = this.borderTopWidth + 'px';
        node.style.paddingTop = this.paddingTop + 'px';
        node.style.height = this.height + 'px';
        node.style.paddingBottom = this.paddingBottom + 'px';
        node.style.borderBottomWidth = this.borderBottomWidth + 'px';
    };

    Expand.prototype.restoreCurrentStyle = function restoreCurrentStyle(node) {
        node.style.borderTopWidth = this.styleBorderTopWidth;
        node.style.paddingTop = this.stylePaddingTop;
        node.style.height = this.styleHeight;
        node.style.paddingBottom = this.stylePaddingBottom;
        node.style.borderBottomWidth = this.styleBorderBottomWidth;
    };

    Expand.prototype.render = function render() {
        var _props = this.props,
            animation = _props.animation,
            others = objectWithoutProperties_default()(_props, ['animation']);

        var newAnimation = animation || 'expand';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(animate, extends_default()({}, others, {
            animation: newAnimation,
            beforeEnter: this.beforeEnter,
            onEnter: this.onEnter,
            afterEnter: this.afterEnter,
            beforeLeave: this.beforeLeave,
            onLeave: this.onLeave,
            afterLeave: this.afterLeave }));
    };

    return Expand;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), expand__class.propTypes = {
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.object]),
    beforeEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onEnter: _prop_types_15_7_2_prop_types_default.a.func,
    afterEnter: _prop_types_15_7_2_prop_types_default.a.func,
    beforeLeave: _prop_types_15_7_2_prop_types_default.a.func,
    onLeave: _prop_types_15_7_2_prop_types_default.a.func,
    afterLeave: _prop_types_15_7_2_prop_types_default.a.func
}, expand__class.defaultProps = {
    beforeEnter: expand_noop,
    onEnter: expand_noop,
    afterEnter: expand_noop,
    beforeLeave: expand_noop,
    onLeave: expand_noop,
    afterLeave: expand_noop
}, expand__temp);
expand_Expand.displayName = 'Expand';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/animate/index.js



animate.Expand = expand_Expand;

/* harmony default export */ var es_animate = (animate);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/badge/sup.js




var sup__class, sup__temp;







/**
 * badge sup component
 */

// util::getDigitArray
var getDigitArray = function getDigitArray(num) {
    return num.toString().split('').reverse().map(function (i) {
        return parseInt(i, 10);
    });
};

var sup_Sup = (sup__temp = sup__class = function (_Component) {
    inherits_default()(Sup, _Component);

    // 单排可滚动的数字列表
    Sup.renderDigit = function renderDigit(prefix, digit, key) {
        var children = [];
        for (var i = 0; i < 30; i++) {
            children.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { key: i },
                i % 10
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'badge-scroll-number-only', key: key },
            children
        );
    };

    // 可滚动数字组


    Sup.renderNumber = function renderNumber(prefix, count) {
        return getDigitArray(count).map(function (digit, i) {
            return Sup.renderDigit(prefix, digit, i);
        }).reverse();
    };

    function Sup(props) {
        classCallCheck_default()(this, Sup);

        // 记录最后一次显示的数字
        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.lastCount = 0;
        return _this;
    }

    Sup.prototype.componentDidMount = function componentDidMount() {
        this.computeStyle(true);
    };

    Sup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('count' in nextProps) {
            if (nextProps.count !== this.props.count) {
                this.lastCount = this.props.count;
            }
        }
    };

    Sup.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        var _this2 = this;

        if (prevProps.count !== this.props.count) {
            this.computeStyle(false);

            // NOTE why called `computeStyle` again after 300ms ?
            setTimeout(function () {
                _this2.computeStyle(true, true);
            }, 300);
        }
    };

    Sup.prototype.computeStyle = function computeStyle(removeTransition, revert) {
        var _this3 = this;

        var _props = this.props,
            prefix = _props.prefix,
            count = _props.count,
            overflowCount = _props.overflowCount;

        var supNode = this.refs.sup;

        if (supNode && dom.hasClass(supNode, prefix + 'badge-count')) {
            var scrollNums = supNode.querySelectorAll('.' + prefix + 'badge-scroll-number-only');

            if (scrollNums.length) {
                var height = window.getComputedStyle(supNode).height;

                scrollNums = [].slice.call(scrollNums, 0).reverse();

                getDigitArray(count).forEach(function (digit, i) {
                    var position = _this3.getPositionByDigit(digit, i, revert);
                    var transformTo = -position * parseInt(height, 10);

                    removeTransition = removeTransition || typeof getDigitArray(_this3.lastCount)[i] === 'undefined' || _this3.lastCount > overflowCount || _this3.lastCount <= 0;

                    var scrollStyle = support.animation ? {
                        transition: removeTransition ? 'none' : 'transform .3s cubic-bezier(.645, .045, .355, 1), -webkit-transform .3s cubic-bezier(.645, .045, .355, 1)',
                        WebkitTransform: 'translateY(' + transformTo + 'px)',
                        transform: 'translateY(' + transformTo + 'px)',
                        height: height,
                        lineHeight: height
                    } : {
                        top: transformTo + 'px',
                        height: height,
                        lineHeight: height
                    };

                    Object.keys(scrollStyle).forEach(function (key) {
                        scrollNums[i].style[key] = scrollStyle[key];
                    });
                });
            }
        }
    };

    Sup.prototype.getPositionByDigit = function getPositionByDigit(digit, i, revert) {
        if (revert) {
            return 10 + digit;
        }
        var lastDigit = getDigitArray(this.lastCount)[i] || 0;

        if (this.props.count > this.lastCount) {
            return (digit >= lastDigit ? 10 : 20) + digit;
        }

        if (digit <= lastDigit) {
            return 10 + digit;
        }

        return digit;
    };

    Sup.prototype.render = function render() {
        var _classNames;

        var _props2 = this.props,
            prefix = _props2.prefix,
            count = _props2.count,
            overflowCount = _props2.overflowCount,
            dot = _props2.dot,
            style = _props2.style,
            content = _props2.content;


        var supClasses = _classnames_2_2_6_classnames_default()(prefix + 'badge-scroll-number', (_classNames = {}, _classNames[prefix + 'badge-count'] = !!count, _classNames[prefix + 'badge-dot'] = dot, _classNames[prefix + 'badge-custom'] = !!content, _classNames));

        var children = null;
        var show = dot || count > 0 || content;

        if (count > 0) {
            var realCount = overflowCount > 0 && count > overflowCount ? overflowCount + '+' : count;

            children = isNaN(realCount) ? realCount : Sup.renderNumber(prefix, count);
        } else if (content) {
            children = content;
        }

        var animation = {
            appear: 'zoomIn',
            enter: 'zoomIn',
            leave: 'zoomOut'
        };

        var wrapper = support.animation ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_animate, { animation: animation }) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', null);
        var element = show ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'sup',
            { ref: 'sup', className: supClasses, style: style },
            children
        ) : null;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(wrapper, {}, element);
    };

    return Sup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), sup__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    count: _prop_types_15_7_2_prop_types_default.a.number,
    overflowCount: _prop_types_15_7_2_prop_types_default.a.number,
    content: _prop_types_15_7_2_prop_types_default.a.node,
    dot: _prop_types_15_7_2_prop_types_default.a.bool,
    style: _prop_types_15_7_2_prop_types_default.a.object
}, sup__class.defaultProps = {
    prefix: 'next-',
    count: 0,
    overflowCount: 99,
    dot: false
}, sup__temp);
sup_Sup.displayName = 'Sup';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/badge/index.js





var badge__class, badge__temp;








/**
 * Badge
 */
var badge_Badge = (badge__temp = badge__class = function (_Component) {
    inherits_default()(Badge, _Component);

    function Badge() {
        classCallCheck_default()(this, Badge);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Badge.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            dot = _props.dot,
            className = _props.className,
            children = _props.children,
            content = _props.content,
            style = _props.style,
            originCount = _props.count,
            originOverflowCount = _props.overflowCount;

        var count = parseInt(originCount, 10);
        var overflowCount = parseInt(originOverflowCount, 10);
        var others = util_obj.pickOthers(Badge.propTypes, this.props);

        // 如果是数字，则添加默认的 title
        if (count) {
            others.title = others.title || '' + count;
        }

        var classes = _classnames_2_2_6_classnames_default()(prefix + 'badge', (_classNames = {}, _classNames[prefix + 'badge-not-a-wrapper'] = !children, _classNames), className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({ className: classes }, others),
            children,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(sup_Sup, { prefix: prefix, content: content, count: count, overflowCount: overflowCount, dot: dot, style: style })
        );
    };

    return Badge;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), badge__class.propTypes = {
    // 样式类名的品牌前缀
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    // 自定义类名
    className: _prop_types_15_7_2_prop_types_default.a.string,
    // 自定义内联样式
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 徽章依托的内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 展示的数字，大于 overflowCount 时显示为 ${overflowCount}+，为 0 时隐藏
     */
    count: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 自定义节点内容
     */
    content: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 展示的封顶的数字
     */
    overflowCount: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 不展示数字，只展示一个小红点
     */
    dot: _prop_types_15_7_2_prop_types_default.a.bool
}, badge__class.defaultProps = {
    prefix: 'next-',
    count: 0,
    overflowCount: 99,
    dot: false
}, badge__temp);
badge_Badge.displayName = 'Badge';


/* harmony default export */ var badge = (config_provider.config(badge_Badge));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/manager.js
var overlayManager = {
    allOverlays: [],

    addOverlay: function addOverlay(overlay) {
        this.removeOverlay(overlay);
        this.allOverlays.unshift(overlay);
    },
    isCurrentOverlay: function isCurrentOverlay(overlay) {
        return overlay && this.allOverlays[0] === overlay;
    },
    removeOverlay: function removeOverlay(overlay) {
        var i = this.allOverlays.indexOf(overlay);
        if (i > -1) {
            this.allOverlays.splice(i, 1);
        }
    }
};

/* harmony default export */ var manager = (overlayManager);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/utils/find-node.js


function findNode(target, param) {
    if (!target) {
        return null;
    }

    if (typeof target === 'string') {
        return document.getElementById(target);
    }

    if (typeof target === 'function') {
        target = target(param);
    }

    if (!target) {
        return null;
    }

    try {
        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(target);
    } catch (err) {
        return target;
    }
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/gateway.js




var gateway__class, gateway__temp2;







var gateway_makeChain = func.makeChain;
var gateway_Gateway = (gateway__temp2 = gateway__class = function (_Component) {
    inherits_default()(Gateway, _Component);

    function Gateway() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Gateway);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.saveChildRef = function (ref) {
            _this.child = ref;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Gateway.prototype.componentDidMount = function componentDidMount() {
        this.containerNode = this.getContainerNode(this.props);
        this.forceUpdate();
    };

    Gateway.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.containerNode = this.getContainerNode(nextProps);
    };

    Gateway.prototype.getContainerNode = function getContainerNode(props) {
        var targetNode = findNode(props.target);
        return findNode(props.container, targetNode);
    };

    Gateway.prototype.getChildNode = function getChildNode() {
        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.child);
    };

    Gateway.prototype.render = function render() {
        if (!this.containerNode) {
            return null;
        }

        var children = this.props.children;

        var child = children ? external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(children) : null;
        if (!child) {
            return null;
        }

        if (typeof child.ref === 'string') {
            throw new Error('Can not set ref by string in Gateway, use function instead.');
        }
        child = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
            ref: gateway_makeChain(this.saveChildRef, child.ref)
        });

        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["createPortal"])(child, this.containerNode);
    };

    return Gateway;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), gateway__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.node,
    container: _prop_types_15_7_2_prop_types_default.a.any,
    target: _prop_types_15_7_2_prop_types_default.a.any
}, gateway__class.defaultProps = {
    container: function container() {
        return document.body;
    }
}, gateway__temp2);
gateway_Gateway.displayName = 'Gateway';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/utils/position.js


var position__class, position__temp;



var VIEWPORT = 'viewport';

// IE8 not support pageXOffset
var getPageX = function getPageX() {
    return window.pageXOffset || document.documentElement.scrollLeft;
};
var getPageY = function getPageY() {
    return window.pageYOffset || document.documentElement.scrollTop;
};

/**
 * @private get element rect
 * @param       {Element} elem
 * @return      {Object}
 */
function _getElementRect(elem) {
    var offsetTop = 0,
        offsetLeft = 0;

    var offsetHeight = elem.offsetHeight;
    var offsetWidth = elem.offsetWidth;

    do {
        if (!isNaN(elem.offsetTop)) {
            offsetTop += elem.offsetTop;
        }
        if (!isNaN(elem.offsetLeft)) {
            offsetLeft += elem.offsetLeft;
        }
    } while ((elem = elem.offsetParent) !== null);

    return {
        top: offsetTop - (document.documentElement.scrollTop || document.body.scrollTop),
        left: offsetLeft - (document.documentElement.scrollLeft || document.body.scrollLeft),
        height: offsetHeight,
        width: offsetWidth
    };
}

/**
 * @private get viewport size
 * @return {Object}
 */
function _getViewportSize() {
    return {
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight
    };
}
var position_Position = (position__temp = position__class = function () {
    function Position(props) {
        classCallCheck_default()(this, Position);

        this.pinElement = props.pinElement;
        this.baseElement = props.baseElement;
        this.align = props.align || 'tl tl';
        this.offset = props.offset || [0, 0];
        this.needAdjust = props.needAdjust || false;
        this.isRtl = props.isRtl || false;
    }

    /**
     * @public static place method
     * @param  {Object}       props
     *     @param  {DOM}      props.pinElement
     *     @param  {DOM}      props.baseElement
     *     @param  {String}   props.align
     *     @param  {Number}   props.offset
     *     @param  {Boolean}  props.needAdjust
     *     @param  {Boolean}  props.isRtl
     * @return {Position}
     */


    Position.prototype.setPosition = function setPosition() {
        var pinElement = this.pinElement;
        var baseElement = this.baseElement;
        var expectedAlign = this._getExpectedAlign();
        var isPinFixed = void 0,
            isBaseFixed = void 0,
            firstPositionResult = void 0;
        if (pinElement === VIEWPORT) {
            return;
        }
        if (dom.getStyle(pinElement, 'position') !== 'fixed') {
            dom.setStyle(pinElement, 'position', 'absolute');
            isPinFixed = false;
        } else {
            isPinFixed = true;
        }
        if (baseElement === VIEWPORT || dom.getStyle(baseElement, 'position') !== 'fixed') {
            isBaseFixed = false;
        } else {
            isBaseFixed = true;
        }
        // 根据期望的定位
        for (var i = 0; i < expectedAlign.length; i++) {
            var align = expectedAlign[i];
            var pinElementPoints = this._normalizePosition(pinElement, align.split(' ')[0], isPinFixed);
            var baseElementPoints = this._normalizePosition(baseElement, align.split(' ')[1], isPinFixed);
            var pinElementParentOffset = this._getParentOffset(pinElement);
            var baseElementOffset = isPinFixed && isBaseFixed ? this._getLeftTop(baseElement) : baseElementPoints.offset();
            var top = baseElementOffset.top + baseElementPoints.y - pinElementParentOffset.top - pinElementPoints.y;
            var left = baseElementOffset.left + baseElementPoints.x - pinElementParentOffset.left - pinElementPoints.x;
            this._setPinElementPostion(pinElement, { left: left, top: top }, this.offset);

            if (!firstPositionResult) {
                firstPositionResult = { left: left, top: top };
            }
            if (this._isInViewport(pinElement)) {
                return align;
            }
        }

        var inViewportLeft = this._makeElementInViewport(pinElement, firstPositionResult.left, 'Left', isPinFixed);
        var inViewportTop = this._makeElementInViewport(pinElement, firstPositionResult.top, 'Top', isPinFixed);

        this._setPinElementPostion(pinElement, { left: inViewportLeft, top: inViewportTop });
        return expectedAlign[0];
    };

    Position.prototype._getParentOffset = function _getParentOffset(element) {
        var parent = element.offsetParent || document.documentElement;
        var offset = void 0;
        if (parent === document.body && dom.getStyle(parent, 'position') === 'static') {
            offset = {
                top: 0,
                left: 0
            };
        } else {
            offset = this._getElementOffset(parent);
        }

        offset.top += parseFloat(dom.getStyle(parent, 'border-top-width'), 10);
        offset.left += parseFloat(dom.getStyle(parent, 'border-left-width'), 10);
        offset.offsetParent = parent;
        return offset;
    };

    Position.prototype._makeElementInViewport = function _makeElementInViewport(pinElement, number, type, isPinFixed) {
        var result = number;
        var docElement = document.documentElement;
        var offsetParent = pinElement.offsetParent || document.documentElement;

        if (result < 0) {
            if (isPinFixed) {
                result = 0;
            } else if (offsetParent === document.body && dom.getStyle(offsetParent, 'position') === 'static') {
                // Only when div's offsetParent is document.body, we set new position result.
                result = Math.max(docElement['scroll' + type], document.body['scroll' + type]);
            }
        }

        return result;
    };

    Position.prototype._normalizePosition = function _normalizePosition(element, align, isPinFixed) {
        var points = this._normalizeElement(element, isPinFixed);
        this._normalizeXY(points, align);

        return points;
    };

    Position.prototype._normalizeXY = function _normalizeXY(points, align) {
        var x = align.split('')[1];
        var y = align.split('')[0];

        points.x = this._xyConverter(x, points, 'width');
        points.y = this._xyConverter(y, points, 'height');

        return points;
    };

    Position.prototype._xyConverter = function _xyConverter(align, points, type) {
        var res = align.replace(/t|l/gi, '0%').replace(/c/gi, '50%').replace(/b|r/gi, '100%').replace(/(\d+)%/gi, function (m, d) {
            return points.size()[type] * (d / 100);
        });

        return parseFloat(res, 10) || 0;
    };

    Position.prototype._getLeftTop = function _getLeftTop(element) {
        return {
            left: parseFloat(dom.getStyle(element, 'left')) || 0,
            top: parseFloat(dom.getStyle(element, 'top')) || 0
        };
    };

    Position.prototype._normalizeElement = function _normalizeElement(element, isPinFixed) {
        var _this = this;

        var result = {
            element: element,
            x: 0,
            y: 0
        },
            isViewport = element === VIEWPORT,
            docElement = document.documentElement;

        result.offset = function () {
            if (isPinFixed) {
                return {
                    left: 0,
                    top: 0
                };
            } else if (isViewport) {
                return {
                    left: getPageX(),
                    top: getPageY()
                };
            } else {
                return _this._getElementOffset(element);
            }
        };

        result.size = function () {
            if (isViewport) {
                return {
                    width: docElement.clientWidth,
                    height: docElement.clientHeight
                };
            } else {
                return {
                    width: element.offsetWidth,
                    height: element.offsetHeight
                };
            }
        };

        return result;
    };

    Position.prototype._getElementOffset = function _getElementOffset(element) {
        var rect = element.getBoundingClientRect();
        var docElement = document.documentElement;
        var body = document.body;
        var docClientLeft = docElement.clientLeft || body.clientLeft || 0;
        var docClientTop = docElement.clientTop || body.clientTop || 0;

        return {
            left: rect.left + (getPageX() - docClientLeft),
            top: rect.top + (getPageY() - docClientTop)
        };
    };

    // According to the location of the overflow to calculate the desired positioning


    Position.prototype._getExpectedAlign = function _getExpectedAlign() {
        var align = this.isRtl ? this._replaceAlignDir(this.align, /l|r/g, { l: 'r', r: 'l' }) : this.align;
        var expectedAlign = [align];

        if (this.needAdjust) {
            if (/t|b/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /t|b/g, { t: 'b', b: 't' }));
            }
            if (/l|r/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /l|r/g, { l: 'r', r: 'l' }));
            }
            if (/c/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'l' }));
                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'r' }));
            }
            expectedAlign.push(this._replaceAlignDir(align, /l|r|t|b/g, { l: 'r', r: 'l', t: 'b', b: 't' }));
        }
        return expectedAlign;
    };

    // Transform align order.


    Position.prototype._replaceAlignDir = function _replaceAlignDir(align, regExp, map) {
        return align.replace(regExp, function (res) {
            return map[res];
        });
    };

    // Detecting element is in the window， we want to adjust position later.


    Position.prototype._isInViewport = function _isInViewport(element) {
        var viewportSize = _getViewportSize();
        // Avoid animate problem that use offsetWidth instead of getBoundingClientRect.
        var elementRect = _getElementRect(element);
        return elementRect.left >= 0 && elementRect.left + element.offsetWidth <= viewportSize.width && elementRect.top >= 0 && elementRect.top + element.offsetHeight <= viewportSize.height;
    };
    // 在这里做RTL判断 top-left 定位转化为等效的 top-right定位


    Position.prototype._setPinElementPostion = function _setPinElementPostion(pinElement, postion) {
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];
        var top = postion.top,
            left = postion.left;

        if (!this.isRtl) {
            dom.setStyle(pinElement, {
                left: left + offset[0] + 'px',
                top: top + offset[1] + 'px'
            });
            return;
        }

        // transfer {left,top} equaly to {right,top}
        var pinElementParentOffset = this._getParentOffset(pinElement);

        var _getElementRect2 = _getElementRect(pinElementParentOffset.offsetParent),
            offsetParentWidth = _getElementRect2.width;

        var _getElementRect3 = _getElementRect(pinElement),
            width = _getElementRect3.width;

        var right = offsetParentWidth - (left + width);
        dom.setStyle(pinElement, {
            left: 'auto',
            right: right + offset[0] + 'px',
            top: top + offset[1] + 'px'
        });
    };

    return Position;
}(), position__class.VIEWPORT = VIEWPORT, position__class.place = function (props) {
    return new position_Position(props).setPosition();
}, position__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/position.js




var overlay_position__class, overlay_position__temp;








var position_noop = func.noop,
    position_bindCtx = func.bindCtx;
var position_getStyle = dom.getStyle;

var place = position_Position.place;

var overlay_position_Position = (overlay_position__temp = overlay_position__class = function (_Component) {
    inherits_default()(Position, _Component);

    function Position(props) {
        classCallCheck_default()(this, Position);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        position_bindCtx(_this, ['handleResize']);
        return _this;
    }

    Position.prototype.componentDidMount = function componentDidMount() {
        this.setPosition();

        if (this.props.needListenResize) {
            util_events.on(window, 'resize', this.handleResize);
        }
    };

    Position.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('align' in nextProps && nextProps.align !== this.props.align || nextProps.shouldUpdatePosition) {
            this.shouldUpdatePosition = true;
        }
    };

    Position.prototype.componentDidUpdate = function componentDidUpdate() {
        if (this.shouldUpdatePosition) {
            this.setPosition();
            this.shouldUpdatePosition = false;
        }
    };

    Position.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.props.needListenResize) {
            util_events.off(window, 'resize', this.handleResize);
        }

        clearTimeout(this.resizeTimeout);
    };

    Position.prototype.setPosition = function setPosition() {
        var _props = this.props,
            align = _props.align,
            offset = _props.offset,
            beforePosition = _props.beforePosition,
            onPosition = _props.onPosition,
            needAdjust = _props.needAdjust,
            rtl = _props.rtl;


        beforePosition();

        var contentNode = this.getContentNode();
        var targetNode = this.getTargetNode();
        if (contentNode && targetNode) {
            var resultAlign = place({
                pinElement: contentNode,
                baseElement: targetNode,
                align: align,
                offset: offset,
                needAdjust: needAdjust,
                isRtl: rtl
            });
            var top = position_getStyle(contentNode, 'top');
            var left = position_getStyle(contentNode, 'left');

            onPosition({
                align: resultAlign.split(' '),
                top: top,
                left: left
            }, contentNode);
        }
    };

    Position.prototype.getContentNode = function getContentNode() {
        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
    };

    Position.prototype.getTargetNode = function getTargetNode() {
        var target = this.props.target;


        return target === position_Position.VIEWPORT ? position_Position.VIEWPORT : findNode(target, this.props);
    };

    Position.prototype.handleResize = function handleResize() {
        var _this2 = this;

        clearTimeout(this.resizeTimeout);

        this.resizeTimeout = setTimeout(function () {
            _this2.setPosition();
        }, 200);
    };

    Position.prototype.render = function render() {
        return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(this.props.children);
    };

    return Position;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), overlay_position__class.VIEWPORT = position_Position.VIEWPORT, overlay_position__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.node,
    target: _prop_types_15_7_2_prop_types_default.a.any,
    align: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    beforePosition: _prop_types_15_7_2_prop_types_default.a.func,
    onPosition: _prop_types_15_7_2_prop_types_default.a.func,
    needAdjust: _prop_types_15_7_2_prop_types_default.a.bool,
    needListenResize: _prop_types_15_7_2_prop_types_default.a.bool,
    shouldUpdatePosition: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, overlay_position__class.defaultProps = {
    align: 'tl bl',
    offset: [0, 0],
    beforePosition: position_noop,
    onPosition: position_noop,
    needAdjust: true,
    needListenResize: true,
    shouldUpdatePosition: false,
    rtl: false
}, overlay_position__temp);
overlay_position_Position.displayName = 'Position';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/overlay.js





var overlay__class, overlay__temp;











var overlay_saveLastFocusNode = util_focus.saveLastFocusNode,
    overlay_getFocusNodeList = util_focus.getFocusNodeList,
    overlay_backLastFocusNode = util_focus.backLastFocusNode;
var overlay_makeChain = func.makeChain,
    overlay_noop = func.noop,
    overlay_bindCtx = func.bindCtx;


var isScrollDisplay = function isScrollDisplay(element) {
    try {
        var scrollbarStyle = window.getComputedStyle(element, '::-webkit-scrollbar');
        return !scrollbarStyle || scrollbarStyle.getPropertyValue('display') !== 'none';
    } catch (e) {
        // ignore error for firefox
    }

    return true;
};
var overlay_hasScroll = function hasScroll() {
    var doc = document.documentElement;
    return doc.scrollHeight > doc.clientHeight && dom.scrollbar().width > 0 && isScrollDisplay(document.documentElement) && isScrollDisplay(document.body);
};
var overlay_prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
var overlay_getStyleProperty = function getStyleProperty(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < overlay_prefixes.length; i++) {
        ret = style.getPropertyValue(overlay_prefixes[i] + name);
        if (ret) {
            break;
        }
    }
    return ret;
};

var modals = [];
var bodyOverflowY = void 0,
    bodyPaddingRight = void 0;

/**
 * Overlay
 * */
var overlay_Overlay = (overlay__temp = overlay__class = function (_Component) {
    inherits_default()(Overlay, _Component);

    function Overlay(props) {
        classCallCheck_default()(this, Overlay);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.saveContentRef = function (ref) {
            _this.contentRef = ref;
        };

        _this.saveGatewayRef = function (ref) {
            _this.gatewayRef = ref;
        };

        _this.state = {
            visible: props.visible,
            status: 'none',
            animation: _this.getAnimation(props)
        };

        _this.lastAlign = props.align;

        overlay_bindCtx(_this, ['handlePosition', 'handleAnimateEnd', 'handleDocumentKeyDown', 'handleDocumentClick', 'handleMaskClick', 'beforeOpen', 'beforeClose']);

        _this.timeoutMap = {};
        return _this;
    }

    Overlay.prototype.componentWillMount = function componentWillMount() {
        if (this.props.visible) {
            this.beforeOpen();
            this.props.beforeOpen();

            if (this.state.animation && support.animation) {
                this.enter();
            }
        }
    };

    Overlay.prototype.componentDidMount = function componentDidMount() {
        this.componentDidUpdate({ visible: false });
        this.addDocumentEvents();

        manager.addOverlay(this);

        if (this.state.visible) {
            this._isMounted = true;
        }
    };

    Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (!this._isMounted && nextProps.visible) {
            this._isMounted = true;
        }

        var willOpen = !this.props.visible && nextProps.visible;
        var willClose = this.props.visible && !nextProps.visible;
        if (willOpen) {
            this.beforeOpen();
            nextProps.beforeOpen();
        } else if (willClose) {
            this.beforeClose();
            nextProps.beforeClose();
        }

        if (nextProps.animation || nextProps.animation === false) {
            this.setState({
                animation: nextProps.animation
            });
        }

        if (nextProps.animation !== false && support.animation) {
            if (willOpen) {
                this.enter();
            } else if (willClose) {
                this.leave();
            }
        } else {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    Overlay.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        var _this2 = this;

        var open = !prevProps.visible && this.props.visible;
        var close = prevProps.visible && !this.props.visible;
        if (this.state.animation && support.animation) {
            if (open || close) {
                this.addAnimationEvents();
            }
        } else {
            var wrapperNode = this.getWrapperNode();
            if (open) {
                setTimeout(function () {
                    _this2.props.onOpen();
                    _this2.props.afterOpen();
                    dom.addClass(wrapperNode, 'opened');
                    manager.addOverlay(_this2);
                });
            } else if (close) {
                this.props.onClose();
                this.props.afterClose();
                dom.removeClass(wrapperNode, 'opened');
                manager.removeOverlay(this);
            }
            this.setFocusNode();
        }
    };

    Overlay.prototype.componentWillUnmount = function componentWillUnmount() {
        this._isDestroyed = true;
        this._isMounted = false;
        manager.removeOverlay(this);
        this.removeDocumentEvents();
        if (this.focusTimeout) {
            clearTimeout(this.focusTimeout);
        }
        if (this._animation) {
            this._animation.off();
            this._animation = null;
        }
        this.beforeClose();
    };

    Overlay.prototype.getAnimation = function getAnimation(props) {
        if (props.animation === false) {
            return false;
        }

        if (props.animation) {
            return props.animation;
        }

        return this.getAnimationByAlign(props.align);
    };

    Overlay.prototype.getAnimationByAlign = function getAnimationByAlign(align) {
        switch (align[0]) {
            case 't':
                return {
                    in: 'expandInDown',
                    out: 'expandOutUp'
                };
            case 'b':
                return {
                    in: 'expandInUp',
                    out: 'expandOutDown'
                };
            default:
                return {
                    in: 'expandInDown',
                    out: 'expandOutUp'
                };
        }
    };

    Overlay.prototype.addAnimationEvents = function addAnimationEvents() {
        var _this3 = this;

        setTimeout(function () {
            var node = _this3.getContentNode();
            if (node) {
                var id = util_guid();

                _this3._animation = util_events.on(node, support.animation.end, _this3.handleAnimateEnd.bind(_this3, id));

                var animationDelay = parseFloat(overlay_getStyleProperty(node, 'animation-delay')) || 0;
                var animationDuration = parseFloat(overlay_getStyleProperty(node, 'animation-duration')) || 0;
                var time = animationDelay + animationDuration;
                if (time) {
                    _this3.timeoutMap[id] = setTimeout(function () {
                        _this3.handleAnimateEnd(id);
                    }, time * 1000 + 200);
                }
            }
        });
    };

    Overlay.prototype.handlePosition = function handlePosition(config) {
        var align = config.align.join(' ');

        if (!('animation' in this.props) && this.props.needAdjust && this.lastAlign !== align) {
            this.setState({
                animation: this.getAnimationByAlign(align)
            });
        }

        this.lastAlign = align;
    };

    Overlay.prototype.handleAnimateEnd = function handleAnimateEnd(id) {
        if (this.timeoutMap[id]) {
            clearTimeout(this.timeoutMap[id]);
        }
        delete this.timeoutMap[id];

        if (this._animation) {
            this._animation.off();
            this._animation = null;
        }

        if (!this._isMounted) {
            return;
        }

        if (this.state.status === 'leaving') {
            this.setState({
                visible: false,
                status: 'none'
            });

            this.onLeaved();
        } else if (this.state.status === 'entering') {
            this.setState({
                status: 'none'
            });

            this.onEntered();
        }
    };

    Overlay.prototype.enter = function enter() {
        var _this4 = this;

        this.setState({
            visible: true,
            status: 'entering'
        }, function () {
            // NOTE: setState callback (second argument) now fires immediately after componentDidMount / componentDidUpdate instead of after all components have rendered.
            setTimeout(function () {
                if (!_this4._isDestroyed) {
                    _this4.onEntering();
                }
            });
        });
    };

    Overlay.prototype.leave = function leave() {
        this.setState({
            status: 'leaving'
        });

        this.onLeaving();
    };

    Overlay.prototype.onEntering = function onEntering() {
        var wrapperNode = this.getWrapperNode();
        dom.addClass(wrapperNode, 'opened');
        this.props.onOpen();
    };

    Overlay.prototype.onLeaving = function onLeaving() {
        var wrapperNode = this.getWrapperNode();
        dom.removeClass(wrapperNode, 'opened');
        this.props.onClose();
    };

    Overlay.prototype.onEntered = function onEntered() {
        manager.addOverlay(this);
        this.setFocusNode();
        this.props.afterOpen();
    };

    Overlay.prototype.onLeaved = function onLeaved() {
        manager.removeOverlay(this);
        this.setFocusNode();
        this.props.afterClose();
    };

    Overlay.prototype.beforeOpen = function beforeOpen() {
        if (this.props.disableScroll) {
            if (modals.length === 0) {
                var style = {
                    overflowY: 'hidden'
                };
                var body = document.body;
                bodyOverflowY = body.style.overflowY;
                if (overlay_hasScroll()) {
                    bodyPaddingRight = body.style.paddingRight;
                    style.paddingRight = dom.getStyle(body, 'paddingRight') + dom.scrollbar().width + 'px';
                }

                dom.setStyle(body, style);
            }
            modals.push(this);
        }
    };

    Overlay.prototype.beforeClose = function beforeClose() {
        if (this.props.disableScroll) {
            var index = modals.indexOf(this);
            if (index > -1) {
                if (modals.length === 1) {
                    var style = {
                        overflowY: bodyOverflowY
                    };
                    if (overlay_hasScroll()) {
                        style.paddingRight = bodyPaddingRight;
                    }

                    dom.setStyle(document.body, style);

                    bodyOverflowY = undefined;
                    bodyPaddingRight = undefined;
                }

                modals.splice(index, 1);
            }
        }
    };

    Overlay.prototype.setFocusNode = function setFocusNode() {
        var _this5 = this;

        if (!this.props.autoFocus) {
            return;
        }

        if (this.state.visible && !this._hasFocused) {
            overlay_saveLastFocusNode();
            // 这个时候很可能上一个弹层的关闭事件还未触发，导致焦点已经回到触发的元素
            // 这里延时处理一下，延时的时间为 document.click 捕获触发的延时时间
            this.focusTimeout = setTimeout(function () {
                var node = _this5.getContentNode();
                if (node) {
                    var focusNodeList = overlay_getFocusNodeList(node);
                    if (focusNodeList.length) {
                        focusNodeList[0].focus();
                    }
                    _this5._hasFocused = true;
                }
            }, 100);
        } else if (!this.state.visible && this._hasFocused) {
            overlay_backLastFocusNode();
            this._hasFocused = false;
        }
    };

    Overlay.prototype.getContent = function getContent() {
        return this.contentRef;
    };

    Overlay.prototype.getContentNode = function getContentNode() {
        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.contentRef);
    };

    Overlay.prototype.getWrapperNode = function getWrapperNode() {
        return this.gatewayRef ? this.gatewayRef.getChildNode() : null;
    };

    Overlay.prototype.addDocumentEvents = function addDocumentEvents() {
        if (this.props.canCloseByEsc) {
            this._keydownEvents = util_events.on(document, 'keydown', this.handleDocumentKeyDown);
        }
        if (this.props.canCloseByOutSideClick) {
            this._clickEvents = util_events.on(document, 'click', this.handleDocumentClick);
        }
    };

    Overlay.prototype.removeDocumentEvents = function removeDocumentEvents() {
        if (this._keydownEvents) {
            this._keydownEvents.off();
            this._keydownEvents = null;
        }
        if (this._clickEvents) {
            this._clickEvents.off();
            this._clickEvents = null;
        }
    };

    Overlay.prototype.handleDocumentKeyDown = function handleDocumentKeyDown(e) {
        if (this.state.visible && e.keyCode === KEYCODE.ESC && manager.isCurrentOverlay(this)) {
            this.props.onRequestClose('keyboard', e);
        }
    };

    Overlay.prototype.handleDocumentClick = function handleDocumentClick(e) {
        var _this6 = this;

        if (this.state.visible) {
            var safeNode = this.props.safeNode;

            var safeNodes = Array.isArray(safeNode) ? [].concat(safeNode) : [safeNode];
            safeNodes.unshift(function () {
                return _this6.getWrapperNode();
            });

            for (var i = 0; i < safeNodes.length; i++) {
                var node = findNode(safeNodes[i], this.props);
                // HACK: 如果触发点击的节点是弹层内部的节点，并且在被点击后立即销毁，那么此时无法使用 node.contains(e.target)
                // 来判断此时点击的节点是否是弹层内部的节点，额外判断
                if (node && (node === e.target || node.contains(e.target) || e.target !== document && !document.documentElement.contains(e.target))) {
                    return;
                }
            }

            this.props.onRequestClose('docClick', e);
        }
    };

    Overlay.prototype.handleMaskClick = function handleMaskClick(e) {
        if (this.props.canCloseByMask) {
            this.props.onRequestClose('maskClick', e);
        }
    };

    // 兼容过去的用法: this.popupRef.getInstance().overlay.getInstance().getContentNode()
    Overlay.prototype.getInstance = function getInstance() {
        return this;
    };

    Overlay.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            style = _props.style,
            propChildren = _props.children,
            target = _props.target,
            align = _props.align,
            offset = _props.offset,
            container = _props.container,
            hasMask = _props.hasMask,
            needAdjust = _props.needAdjust,
            beforePosition = _props.beforePosition,
            onPosition = _props.onPosition,
            wrapperStyle = _props.wrapperStyle,
            rtl = _props.rtl,
            propShouldUpdatePosition = _props.shouldUpdatePosition,
            cache = _props.cache,
            wrapperClassName = _props.wrapperClassName,
            onMaskMouseEnter = _props.onMaskMouseEnter,
            onMaskMouseLeave = _props.onMaskMouseLeave;
        var _state = this.state,
            stateVisible = _state.visible,
            status = _state.status,
            animation = _state.animation;


        var children = stateVisible || cache && this._isMounted ? propChildren : null;
        if (children) {
            var _classnames;

            var child = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(children);
            var childClazz = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'overlay-inner'] = true, _classnames[animation.in] = status === 'entering', _classnames[animation.out] = status === 'leaving', _classnames[child.props.className] = !!child.props.className, _classnames[className] = !!className, _classnames));
            if (typeof child.ref === 'string') {
                throw new Error('Can not set ref by string in Overlay, use function instead.');
            }

            children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                className: childClazz,
                style: extends_default()({}, child.props.style, style),
                ref: overlay_makeChain(this.saveContentRef, child.ref),
                'aria-hidden': !stateVisible && cache && this._isMounted
            });

            if (align) {
                var shouldUpdatePosition = status === 'leaving' ? false : propShouldUpdatePosition;
                children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(overlay_position_Position, {
                    children: children, target: target, align: align, offset: offset, needAdjust: needAdjust,
                    beforePosition: beforePosition,
                    onPosition: overlay_makeChain(this.handlePosition, onPosition),
                    shouldUpdatePosition: shouldUpdatePosition, rtl: rtl
                });
            }

            var wrapperClazz = _classnames_2_2_6_classnames_default()([prefix + 'overlay-wrapper', wrapperClassName]);
            var newWrapperStyle = extends_default()({}, {
                display: stateVisible ? '' : 'none'
            }, wrapperStyle);

            children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: wrapperClazz, style: newWrapperStyle, dir: rtl ? 'rtl' : undefined },
                hasMask ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'overlay-backdrop',
                    onClick: this.handleMaskClick,
                    onMouseEnter: onMaskMouseEnter,
                    onMouseLeave: onMaskMouseLeave,
                    dir: rtl ? 'rtl' : undefined }) : null,
                children
            );
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(gateway_Gateway, extends_default()({ container: container, target: target, children: children }, { ref: this.saveGatewayRef }));
    };

    return Overlay;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), overlay__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 是否显示弹层
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层请求关闭时触发事件的回调函数
     * @param {String} type 弹层关闭的来源
     * @param {Object} e DOM 事件
     */
    onRequestClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层定位的参照元素
     */
    target: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)
     */
    align: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 弹层相对于参照元素定位的微调
     */
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点
     */
    container: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 是否显示遮罩
     */
    hasMask: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否支持 esc 按键关闭弹层
     */
    canCloseByEsc: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 点击弹层外的区域是否关闭弹层，不显示遮罩时生效
     */
    canCloseByOutSideClick: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 点击遮罩区域是否关闭弹层，显示遮罩时生效
     */
    canCloseByMask: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层打开前触发事件的回调函数
     */
    beforeOpen: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层打开时触发事件的回调函数
     */
    onOpen: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发
     */
    afterOpen: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层关闭前触发事件的回调函数
     */
    beforeClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层关闭时触发事件的回调函数
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发
     */
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层定位完成前触发的事件
     */
    beforePosition: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层定位完成时触发的事件
     * @param {Object} config 定位的参数
     * @param {Array} config.align 对齐方式，如 ['cc', 'cc']（如果开启 needAdjust，可能和预先设置的 align 不同）
     * @param {Number} config.top 距离视口顶部距离
     * @param {Number} config.left 距离视口左侧距离
     * @param {Object} node 定位参照的容器节点
     */
    onPosition: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否在每次弹层重新渲染后强制更新定位信息，一般用于弹层内容区域大小发生变化时，仍需保持原来的定位方式
     */
    shouldUpdatePosition: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层打开时是否让其中的元素自动获取焦点
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当弹层由于页面滚动等情况不在可视区域时，是否自动调整定位以出现在可视区域
     */
    needAdjust: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用页面滚动
     */
    disableScroll: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 隐藏时是否保留子节点
     */
    cache: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组
     */
    safeNode: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 弹层的根节点的样式类
     */
    wrapperClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层的根节点的内联样式
     */
    wrapperStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画
     * @default { in: 'expandInDown', out: 'expandOutUp' }
     */
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),
    onMaskMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onMaskMouseLeave: _prop_types_15_7_2_prop_types_default.a.func
}, overlay__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    visible: false,
    onRequestClose: overlay_noop,
    target: overlay_position_Position.VIEWPORT,
    align: 'tl bl',
    offset: [0, 0],
    hasMask: false,
    canCloseByEsc: true,
    canCloseByOutSideClick: true,
    canCloseByMask: true,
    beforeOpen: overlay_noop,
    onOpen: overlay_noop,
    afterOpen: overlay_noop,
    beforeClose: overlay_noop,
    onClose: overlay_noop,
    afterClose: overlay_noop,
    beforePosition: overlay_noop,
    onPosition: overlay_noop,
    onMaskMouseEnter: overlay_noop,
    onMaskMouseLeave: overlay_noop,
    shouldUpdatePosition: false,
    autoFocus: false,
    needAdjust: true,
    disableScroll: false,
    cache: false
}, overlay__temp);
overlay_Overlay.displayName = 'Overlay';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/popup.js






var popup__class, popup__temp;







var popup_noop = func.noop,
    popup_makeChain = func.makeChain,
    popup_bindCtx = func.bindCtx;

/**
 * Overlay.Popup
 * @description 继承 Overlay 的 API，除非特别说明
 * */

var popup_Popup = (popup__temp = popup__class = function (_Component) {
    inherits_default()(Popup, _Component);

    function Popup(props) {
        classCallCheck_default()(this, Popup);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible
        };

        popup_bindCtx(_this, ['handleTriggerClick', 'handleTriggerKeyDown', 'handleTriggerMouseEnter', 'handleTriggerMouseLeave', 'handleTriggerFocus', 'handleTriggerBlur', 'handleContentMouseEnter', 'handleContentMouseLeave', 'handleContentMouseDown', 'handleRequestClose', 'handleMaskMouseEnter', 'handleMaskMouseLeave']);
        return _this;
    }

    Popup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    Popup.prototype.componentWillUnmount = function componentWillUnmount() {
        var _this2 = this;

        ['_timer', '_hideTimer', '_showTimer'].forEach(function (time) {
            _this2[time] && clearTimeout(_this2[time]);
        });
    };

    Popup.prototype.handleVisibleChange = function handleVisibleChange(visible, type, e) {
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }

        this.props.onVisibleChange(visible, type, e);
    };

    Popup.prototype.handleTriggerClick = function handleTriggerClick(e) {
        if (this.state.visible && !this.props.canCloseByTrigger) {
            return;
        }

        this.handleVisibleChange(!this.state.visible, 'fromTrigger', e);
    };

    Popup.prototype.handleTriggerKeyDown = function handleTriggerKeyDown(e) {
        if (e.keyCode === KEYCODE.SPACE || e.keyCode === KEYCODE.ENTER) {
            e.preventDefault();
            this.handleTriggerClick(e);
        }
    };

    Popup.prototype.handleTriggerMouseEnter = function handleTriggerMouseEnter(e) {
        var _this3 = this;

        this._mouseNotFirstOnMask = false;

        if (this._hideTimer) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
        }
        if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
        }
        if (!this.state.visible) {
            this._showTimer = setTimeout(function () {
                _this3.handleVisibleChange(true, 'fromTrigger', e);
            }, this.props.delay);
        }
    };

    Popup.prototype.handleTriggerMouseLeave = function handleTriggerMouseLeave(e, type) {
        var _this4 = this;

        if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
        }
        if (this.state.visible) {
            this._hideTimer = setTimeout(function () {
                _this4.handleVisibleChange(false, type || 'fromTrigger', e);
            }, this.props.delay);
        }
    };

    Popup.prototype.handleTriggerFocus = function handleTriggerFocus(e) {
        this.handleVisibleChange(true, 'fromTrigger', e);
    };

    Popup.prototype.handleTriggerBlur = function handleTriggerBlur(e) {
        if (!this._isForwardContent) {
            this.handleVisibleChange(false, 'fromTrigger', e);
        }
        this._isForwardContent = false;
    };

    Popup.prototype.handleContentMouseDown = function handleContentMouseDown() {
        this._isForwardContent = true;
    };

    Popup.prototype.handleContentMouseEnter = function handleContentMouseEnter() {
        clearTimeout(this._hideTimer);
    };

    Popup.prototype.handleContentMouseLeave = function handleContentMouseLeave(e) {
        this.handleTriggerMouseLeave(e, 'fromContent');
    };

    Popup.prototype.handleMaskMouseEnter = function handleMaskMouseEnter() {
        if (!this._mouseNotFirstOnMask) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
            this._mouseNotFirstOnMask = false;
        }
    };

    Popup.prototype.handleMaskMouseLeave = function handleMaskMouseLeave() {
        this._mouseNotFirstOnMask = true;
    };

    Popup.prototype.handleRequestClose = function handleRequestClose(type, e) {
        this.handleVisibleChange(false, type, e);
    };

    Popup.prototype.renderTrigger = function renderTrigger() {
        var _this5 = this;

        var _props = this.props,
            trigger = _props.trigger,
            disabled = _props.disabled;

        var props = {
            key: 'trigger',
            'aria-haspopup': true,
            'aria-expanded': this.state.visible
        };

        if (!disabled) {
            var triggerType = this.props.triggerType;

            var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];
            var _trigger$props = trigger.props,
                onClick = _trigger$props.onClick,
                onKeyDown = _trigger$props.onKeyDown,
                onMouseEnter = _trigger$props.onMouseEnter,
                onMouseLeave = _trigger$props.onMouseLeave,
                onFocus = _trigger$props.onFocus,
                onBlur = _trigger$props.onBlur;

            triggerTypes.forEach(function (triggerType) {
                switch (triggerType) {
                    case 'click':
                        props.onClick = popup_makeChain(_this5.handleTriggerClick, onClick);
                        props.onKeyDown = popup_makeChain(_this5.handleTriggerKeyDown, onKeyDown);
                        break;
                    case 'hover':
                        props.onMouseEnter = popup_makeChain(_this5.handleTriggerMouseEnter, onMouseEnter);
                        props.onMouseLeave = popup_makeChain(_this5.handleTriggerMouseLeave, onMouseLeave);
                        break;
                    case 'focus':
                        props.onFocus = popup_makeChain(_this5.handleTriggerFocus, onFocus);
                        props.onBlur = popup_makeChain(_this5.handleTriggerBlur, onBlur);
                        break;
                    default:
                        break;
                }
            });
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(trigger, props);
    };

    Popup.prototype.renderContent = function renderContent() {
        var _this6 = this;

        var _props2 = this.props,
            children = _props2.children,
            triggerType = _props2.triggerType;

        var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];
        var content = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(children);
        var _content$props = content.props,
            onMouseDown = _content$props.onMouseDown,
            onMouseEnter = _content$props.onMouseEnter,
            onMouseLeave = _content$props.onMouseLeave;

        var props = {
            key: 'portal'
        };

        triggerTypes.forEach(function (triggerType) {
            switch (triggerType) {
                case 'focus':
                    props.onMouseDown = popup_makeChain(_this6.handleContentMouseDown, onMouseDown);
                    break;
                case 'hover':
                    props.onMouseEnter = popup_makeChain(_this6.handleContentMouseEnter, onMouseEnter);
                    props.onMouseLeave = popup_makeChain(_this6.handleContentMouseLeave, onMouseLeave);
                    break;
                default:
                    break;
            }
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(content, props);
    };

    Popup.prototype.renderPortal = function renderPortal() {
        var _this7 = this;

        var _props3 = this.props,
            target = _props3.target,
            safeNode = _props3.safeNode,
            followTrigger = _props3.followTrigger,
            triggerType = _props3.triggerType,
            hasMask = _props3.hasMask,
            wrapperStyle = _props3.wrapperStyle,
            others = objectWithoutProperties_default()(_props3, ['target', 'safeNode', 'followTrigger', 'triggerType', 'hasMask', 'wrapperStyle']);

        var container = this.props.container;

        var findTriggerNode = function findTriggerNode() {
            return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(_this7) || {};
        };
        var safeNodes = Array.isArray(safeNode) ? [].concat(safeNode) : [safeNode];
        safeNodes.unshift(findTriggerNode);

        var newWrapperStyle = wrapperStyle || {};

        if (followTrigger) {
            container = function container(trigger) {
                return trigger.parentNode;
            };
            newWrapperStyle.position = 'relative';
        }

        if (triggerType === 'hover' && hasMask) {
            others.onMaskMouseEnter = this.handleMaskMouseEnter;
            others.onMaskMouseLeave = this.handleMaskMouseLeave;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            overlay_Overlay,
            extends_default()({}, others, {
                key: 'overlay',
                ref: function ref(overlay) {
                    return _this7.overlay = overlay;
                },
                visible: this.state.visible,
                target: target || findTriggerNode,
                container: container,
                safeNode: safeNodes,
                wrapperStyle: newWrapperStyle,
                triggerType: triggerType,
                hasMask: hasMask,
                onRequestClose: this.handleRequestClose }),
            this.renderContent()
        );
    };

    Popup.prototype.render = function render() {
        return [this.renderTrigger(), this.renderPortal()];
    };

    return Popup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), popup__class.propTypes = {
    /**
     * 弹层内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 触发弹层显示或隐藏的元素
     */
    trigger: _prop_types_15_7_2_prop_types_default.a.element,
    /**
     * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']
     */
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 弹层当前是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示或隐藏时触发的回调函数
     * @param {Boolean} visible 弹层是否显示
     * @param {String} type 触发弹层显示或隐藏的来源
     * @param {Object} e DOM事件
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置此属性，弹层无法显示或隐藏
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效
     */
    delay: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 触发元素是否可以关闭弹层
     */
    canCloseByTrigger: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层定位的参照元素
     * @default target 属性，即触发元素
     */
    target: _prop_types_15_7_2_prop_types_default.a.any,
    safeNode: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 是否跟随trigger滚动
     */
    followTrigger: _prop_types_15_7_2_prop_types_default.a.bool,
    container: _prop_types_15_7_2_prop_types_default.a.any,
    hasMask: _prop_types_15_7_2_prop_types_default.a.bool,
    wrapperStyle: _prop_types_15_7_2_prop_types_default.a.object,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, popup__class.defaultProps = {
    triggerType: 'hover',
    defaultVisible: false,
    onVisibleChange: popup_noop,
    disabled: false,
    delay: 200,
    canCloseByTrigger: true,
    followTrigger: false,
    container: function container() {
        return document.body;
    },
    rtl: false
}, popup__temp);
popup_Popup.displayName = 'Popup';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/overlay/index.js






overlay_Overlay.Gateway = gateway_Gateway;
overlay_Overlay.Position = overlay_position_Position;
overlay_Overlay.Popup = config_provider.config(popup_Popup, {
    exportNames: ['overlay']
});

/* harmony default export */ var es_overlay = (config_provider.config(overlay_Overlay, {
    exportNames: ['getContent', 'getContentNode']
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/icon/index.js






var icon__class, icon__temp;






/**
 * Icon
 */
var icon_Icon = (icon__temp = icon__class = function (_Component) {
    inherits_default()(Icon, _Component);

    function Icon() {
        classCallCheck_default()(this, Icon);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Icon.prototype.render = function render() {
        var _cx;

        /* eslint-disable no-unused-vars*/
        var _props = this.props,
            prefix = _props.prefix,
            type = _props.type,
            size = _props.size,
            className = _props.className,
            rtl = _props.rtl,
            other = objectWithoutProperties_default()(_props, ['prefix', 'type', 'size', 'className', 'rtl']);

        var classes = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'icon'] = true, _cx[prefix + 'icon-' + type] = !!type, _cx['' + prefix + size] = !!size, _cx[className] = !!className, _cx));

        if (rtl && ['arrow-left', 'arrow-right', 'arrow-double-left', 'arrow-double-right', 'switch', 'sorting', 'descending', 'ascending'].indexOf(type) !== -1) {
            other.dir = 'rtl';
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('i', extends_default()({}, other, { className: classes }));
    };

    return Icon;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), icon__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 指定显示哪种图标
     */
    type: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 指定图标大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl', 'inherit']),
    className: _prop_types_15_7_2_prop_types_default.a.string
}, icon__class.defaultProps = {
    prefix: 'next-',
    size: 'medium'
}, icon__class._typeMark = 'icon', icon__temp);
icon_Icon.displayName = 'Icon';


/* harmony default export */ var es_icon = (config_provider.config(icon_Icon));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/balloon/alignMap.js
/**
 * Created by xiachi on 17/1/17.
 */

var normalMap = {
    t: {
        align: 'bc tc',
        rtlAlign: 'bc tc',
        arrow: 'bottom',
        trOrigin: 'bottom',
        rtlTrOrigin: 'bottom',
        offset: [0, -12]
    },
    r: {
        align: 'cl cr',
        rtlAlign: 'cr cl',
        arrow: 'left',
        trOrigin: 'left',
        rtlTrOrigin: 'right',
        offset: [12, 0]
    },
    b: {
        align: 'tc bc',
        rtlAlign: 'tc bc',
        arrow: 'top',
        trOrigin: 'top',
        rtlTrOrigin: 'top',
        offset: [0, 12]
    },
    l: {
        align: 'cr cl',
        rtlAlign: 'cl cr',
        arrow: 'right',
        trOrigin: 'right',
        rtlTrOrigin: 'left',
        offset: [-12, 0]
    },
    tl: {
        align: 'br tc',
        rtlAlign: 'bl tc',
        arrow: 'bottom-right',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [20, -12]
    },
    tr: {
        align: 'bl tc',
        rtlAlign: 'br tc',
        arrow: 'bottom-left',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [-20, -12]
    },
    rt: {
        align: 'bl cr',
        rtlAlign: 'br cl',
        arrow: 'left-bottom',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [12, 20]
    },
    rb: {
        align: 'tl cr',
        rtlAlign: 'tr cl',
        arrow: 'left-top',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [12, -20]
    },
    bl: {
        align: 'tr bc',
        rtlAlign: 'tl bc',
        arrow: 'top-right',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [20, 12]
    },
    br: {
        align: 'tl bc',
        rtlAlign: 'tr bc',
        arrow: 'top-left',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [-20, 12]
    },
    lt: {
        align: 'br cl',
        rtlAlign: 'bl cr',
        arrow: 'right-bottom',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [-12, 20]
    },
    lb: {
        align: 'tr cl',
        rtlAlign: 'tl cr',
        arrow: 'right-top',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [-12, -20]
    }
};
var edgeMap = {
    t: {
        align: 'bc tc',
        rtlAlign: 'bc tc',
        arrow: 'bottom',
        trOrigin: 'bottom',
        rtlTrOrigin: 'bottom',
        offset: [0, -12]
    },
    r: {
        align: 'cl cr',
        rtlAlign: 'cr cl',
        arrow: 'left',
        trOrigin: 'left',
        rtlTrOrigin: 'right',
        offset: [12, 0]
    },
    b: {
        align: 'tc bc',
        rtlAlign: 'tc bc',
        arrow: 'top',
        trOrigin: 'top',
        rtlTrOrigin: 'top',
        offset: [0, 12]
    },
    l: {
        align: 'cr cl',
        rtlAlign: 'cl cr',
        arrow: 'right',
        trOrigin: 'right',
        rtlTrOrigin: 'left',
        offset: [-12, 0]
    },
    tl: {
        align: 'bl tl',
        rtlAlign: 'br tr',
        arrow: 'bottom-left',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [0, -12]
    },
    tr: {
        align: 'br tr',
        rtlAlign: 'bl tl',
        arrow: 'bottom-right',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [0, -12]
    },
    rt: {
        align: 'tl tr',
        rtlAlign: 'tr tl',
        arrow: 'left-top',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [12, 0]
    },
    rb: {
        align: 'bl br',
        rtlAlign: 'br bl',
        arrow: 'left-bottom',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [12, 0]
    },
    bl: {
        align: 'tl bl',
        rtlAlign: 'tr br',
        arrow: 'top-left',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [0, 12]
    },
    br: {
        align: 'tr br',
        rtlAlign: 'tl bl',
        arrow: 'top-right',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [0, 12]
    },
    lt: {
        align: 'tr tl',
        rtlAlign: 'tl tr',
        arrow: 'right-top',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [-12, 0]
    },
    lb: {
        align: 'br bl',
        rtlAlign: 'bl br',
        arrow: 'right-bottom',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [-12, 0]
    }
};


// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/balloon/inner.js






var inner__class, inner__temp;








/**
 * Created by xiachi on 17/2/10.
 */

var inner_noop = func.noop;
var inner_BalloonInner = (inner__temp = inner__class = function (_React$Component) {
    inherits_default()(BalloonInner, _React$Component);

    function BalloonInner() {
        classCallCheck_default()(this, BalloonInner);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    BalloonInner.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            closable = _props.closable,
            className = _props.className,
            style = _props.style,
            isTooltip = _props.isTooltip,
            align = _props.align,
            type = _props.type,
            onClose = _props.onClose,
            alignEdge = _props.alignEdge,
            children = _props.children,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'closable', 'className', 'style', 'isTooltip', 'align', 'type', 'onClose', 'alignEdge', 'children', 'rtl']);

        var alignMap = alignEdge ? edgeMap : normalMap;
        var _prefix = prefix;

        if (isTooltip) {
            _prefix = _prefix + 'balloon-tooltip';
        } else {
            _prefix = _prefix + 'balloon';
        }

        var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames['' + _prefix] = true, _classNames[_prefix + '-' + type] = type, _classNames[_prefix + '-medium'] = true, _classNames[_prefix + '-' + alignMap[align].arrow] = alignMap[align], _classNames[_prefix + '-closable'] = closable, _classNames[className] = className, _classNames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ role: 'tooltip', dir: rtl ? 'rtl' : undefined, className: classes, style: style }, util_obj.pickOthers(Object.keys(BalloonInner.propTypes), others)),
            closable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                { role: 'button', tabIndex: '0', href: 'javascript:void(0);', className: _prefix + '-close',
                    onClick: onClose },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close', size: 'small' })
            ) : null,
            children
        );
    };

    return BalloonInner;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), inner__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, inner__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    closable: _prop_types_15_7_2_prop_types_default.a.bool,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    alignEdge: _prop_types_15_7_2_prop_types_default.a.bool,
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    style: _prop_types_15_7_2_prop_types_default.a.any,
    align: _prop_types_15_7_2_prop_types_default.a.string,
    type: _prop_types_15_7_2_prop_types_default.a.string,
    isTooltip: _prop_types_15_7_2_prop_types_default.a.bool,
    pure: _prop_types_15_7_2_prop_types_default.a.bool
}, inner__class.defaultProps = {
    prefix: 'next-',
    closable: true,
    onClose: inner_noop,
    align: 'b',
    type: 'normal',
    alignEdge: false,
    pure: false
}, inner__temp);
inner_BalloonInner.displayName = 'BalloonInner';


/* harmony default export */ var balloon_inner = (inner_BalloonInner);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/balloon/balloon.js






var balloon__class, balloon__temp;








var balloon_noop = func.noop;
var balloon_Popup = es_overlay.Popup;


var balloon_alignMap = normalMap;

/** Balloon */
var balloon_Balloon = (balloon__temp = balloon__class = function (_React$Component) {
    inherits_default()(Balloon, _React$Component);

    function Balloon(props, context) {
        classCallCheck_default()(this, Balloon);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.state = {
            align: props.align,
            visible: 'visible' in props ? props.visible : props.defaultVisible
        };
        _this._onClose = _this._onClose.bind(_this);
        _this._onPosition = _this._onPosition.bind(_this);
        _this._onVisibleChange = _this._onVisibleChange.bind(_this);

        _this._contentId = props.id;
        return _this;
    }

    Balloon.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }

        if ('align' in nextProps) {
            this.setState({
                align: nextProps.align
            });
        }
    };

    Balloon.prototype._onVisibleChange = function _onVisibleChange(visible, trigger) {
        // Not Controlled
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }

        this.props.onVisibleChange(visible, trigger);

        if (!visible) {
            this.props.onClose();
        }
    };

    Balloon.prototype._onClose = function _onClose(e) {
        this._onVisibleChange(false, 'closeClick');

        //必须加上preventDefault,否则单测IE下报错,出现full page reload 异常
        e.preventDefault();
    };

    Balloon.prototype._onPosition = function _onPosition(res) {
        var rtl = this.props.rtl;

        balloon_alignMap = this.props.alignEdge ? edgeMap : normalMap;
        var newAlign = res.align.join(' ');
        var resAlign = void 0;

        var alignKey = 'align';
        if (rtl) {
            alignKey = 'rtlAlign';
        }

        for (var key in balloon_alignMap) {
            if (balloon_alignMap[key][alignKey] === newAlign) {
                resAlign = key;

                break;
            }
        }

        resAlign = resAlign || this.state.align;
        if (resAlign !== this.state.align) {
            this.setState({
                align: resAlign
            });
        }
    };

    Balloon.prototype.render = function render() {
        var _props = this.props,
            type = _props.type,
            prefix = _props.prefix,
            className = _props.className,
            alignEdge = _props.alignEdge,
            trigger = _props.trigger,
            triggerType = _props.triggerType,
            children = _props.children,
            closable = _props.closable,
            shouldUpdatePosition = _props.shouldUpdatePosition,
            delay = _props.delay,
            needAdjust = _props.needAdjust,
            safeId = _props.safeId,
            autoFocus = _props.autoFocus,
            safeNode = _props.safeNode,
            onClick = _props.onClick,
            onHover = _props.onHover,
            animation = _props.animation,
            offset = _props.offset,
            style = _props.style,
            container = _props.container,
            popupContainer = _props.popupContainer,
            cache = _props.cache,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['type', 'prefix', 'className', 'alignEdge', 'trigger', 'triggerType', 'children', 'closable', 'shouldUpdatePosition', 'delay', 'needAdjust', 'safeId', 'autoFocus', 'safeNode', 'onClick', 'onHover', 'animation', 'offset', 'style', 'container', 'popupContainer', 'cache', 'popupStyle', 'popupClassName', 'popupProps', 'rtl']);

        if (container) {
            log.deprecated('container', 'popupContainer', 'Balloon');
        }

        var align = this.state.align;


        balloon_alignMap = alignEdge ? edgeMap : normalMap;
        var _prefix = this.context.prefix || prefix;

        var trOrigin = 'trOrigin';
        if (rtl) {
            trOrigin = 'rtlTrOrigin';
        }

        var _offset = [balloon_alignMap[align].offset[0] + offset[0], balloon_alignMap[align].offset[1] + offset[1]];
        var transformOrigin = balloon_alignMap[align][trOrigin];
        var _style = extends_default()({ transformOrigin: transformOrigin }, style);

        var content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            balloon_inner,
            extends_default()({}, util_obj.pickOthers(Object.keys(Balloon.propTypes), others), {
                id: this._contentId,
                prefix: _prefix,
                closable: closable,
                onClose: this._onClose,
                className: className,
                style: _style,
                align: align,
                type: type,
                rtl: rtl,
                alignEdge: alignEdge
            }),
            children
        );

        var triggerProps = {};
        triggerProps['aria-describedby'] = this._contentId;
        triggerProps.tabIndex = '0';

        var newTrigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(trigger, triggerProps);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            balloon_Popup,
            extends_default()({}, popupProps, {
                trigger: this._contentId ? newTrigger : trigger,
                cache: cache,
                safeId: safeId,
                triggerType: triggerType,
                align: balloon_alignMap[align].align,
                offset: _offset,
                visible: this.state.visible,
                onPosition: this._onPosition,
                onClick: onClick,
                onHover: onHover,
                afterClose: this.props.afterClose,
                onVisibleChange: this._onVisibleChange,
                shouldUpdatePosition: shouldUpdatePosition,
                needAdjust: needAdjust,
                animation: animation,
                delay: delay,
                autoFocus: autoFocus,
                safeNode: safeNode,
                container: popupContainer || container,
                className: popupClassName,
                style: popupStyle,
                rtl: rtl
            }),
            content
        );
    };

    return Balloon;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), balloon__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, balloon__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 浮层的内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.any,
    size: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 样式类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'primary']),
    /**
     * 弹层当前显示的状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认显示的状态
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层在显示和隐藏触发的事件
     * @param {Boolean} visible 弹层是否隐藏和显示
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹出层对齐方式
     */
    alignEdge: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示关闭按钮
     */
    closable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹出层位置
     * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下 及其 两两组合
     */
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),
    /**
     * 弹层相对于trigger的定位的微调
     */
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 触发元素
     */
    trigger: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 触发行为
     * 鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']
     */
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),

    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 任何visible为false时会触发的事件
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    onHover: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否进行自动位置调整
     */
    needAdjust: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层在触发以后的延时显示, 单位毫秒 ms
     */
    delay: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发
     */
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 强制更新定位信息
     */
    shouldUpdatePosition: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层出现后是否自动focus到内部第一个元素
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象
     */
    safeNode: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 用来指定safeNode节点的id，和safeNode配合使用
     */
    safeId: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 配置动画的播放方式
     * @param {String} in 进场动画
     * @param {String} out 出场动画
     */
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),

    /**
     * 弹层的dom节点关闭时是否删除
     */
    cache: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    container: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 弹层组件style，透传给Popup
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层组件className，透传给Popup
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层组件属性，透传给Popup
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层id, 传入值才会支持无障碍
     */
    id: _prop_types_15_7_2_prop_types_default.a.string
}, balloon__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    type: 'normal',
    closable: true,
    defaultVisible: false,
    size: 'medium',
    alignEdge: false,
    align: 'b',
    offset: [0, 0],
    trigger: external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', null),
    onClose: balloon_noop,
    afterClose: balloon_noop,
    onVisibleChange: balloon_noop,
    needAdjust: false,
    triggerType: 'hover',
    safeNode: undefined,
    safeId: null,
    autoFocus: false,
    animation: {
        in: 'zoomIn',
        out: 'zoomOut'
    },
    cache: false,
    popupStyle: {},
    popupClassName: '',
    popupProps: {}
}, balloon__temp);
balloon_Balloon.displayName = 'Balloon';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/balloon/tooltip.js






var tooltip__class, tooltip__temp;







var tooltip_Popup = es_overlay.Popup;

/** Balloon.Tooltip */

var tooltip_Tooltip = (tooltip__temp = tooltip__class = function (_React$Component) {
  inherits_default()(Tooltip, _React$Component);

  function Tooltip(props, context) {
    classCallCheck_default()(this, Tooltip);

    var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

    _this._contentId = props.id;
    return _this;
  }

  Tooltip.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        align = _props.align,
        style = _props.style,
        prefix = _props.prefix,
        trigger = _props.trigger,
        children = _props.children,
        popupContainer = _props.popupContainer,
        popupProps = _props.popupProps,
        popupClassName = _props.popupClassName,
        popupStyle = _props.popupStyle,
        triggerType = _props.triggerType,
        rtl = _props.rtl,
        others = objectWithoutProperties_default()(_props, ['className', 'align', 'style', 'prefix', 'trigger', 'children', 'popupContainer', 'popupProps', 'popupClassName', 'popupStyle', 'triggerType', 'rtl']);

    var trOrigin = 'trOrigin';
    if (rtl) {
      others.rtl = true;
      trOrigin = 'rtlTrOrigin';
    }

    var transformOrigin = normalMap[align][trOrigin];
    var _offset = normalMap[align].offset;
    var _style = extends_default()({ transformOrigin: transformOrigin }, style);

    var content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      balloon_inner,
      extends_default()({}, others, {
        id: this._contentId,
        prefix: prefix,
        closable: false,
        isTooltip: true,
        className: className,
        style: _style,
        align: align,
        rtl: rtl
      }),
      children
    );

    var triggerProps = {};
    triggerProps['aria-describedby'] = this._contentId;
    triggerProps.tabIndex = '0';

    var newTrigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(trigger, triggerProps);

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      tooltip_Popup,
      extends_default()({}, popupProps, {
        container: popupContainer,
        trigger: this._contentId ? newTrigger : trigger,
        triggerType: triggerType,
        align: normalMap[align].align,
        offset: _offset,
        delay: 0,
        className: popupClassName,
        style: popupStyle,
        rtl: rtl,
        shouldUpdatePosition: true
      }),
      content
    );
  };

  return Tooltip;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), tooltip__class.propTypes = {
  /**
   * 样式类名的品牌前缀
   */
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 自定义类名
   */
  className: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 自定义内联样式
   */
  style: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * tooltip的内容
   */
  children: _prop_types_15_7_2_prop_types_default.a.any,
  /**
   * 弹出层位置
   * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下 及其 两两组合
   */
  align: _prop_types_15_7_2_prop_types_default.a.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),
  /**
   * 触发元素
   */
  trigger: _prop_types_15_7_2_prop_types_default.a.any,
  /**
   * 触发行为
   * 鼠标悬浮, 获取到焦点, 鼠标点击('hover'，'focus'，'click')或者它们组成的数组，如 ['hover', 'focus']
   */
  triggerType: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * 弹层组件style，透传给Popup
   */
  popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * 弹层组件className，透传给Popup
   */
  popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 弹层组件属性，透传给Popup
   */
  popupProps: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * 是否pure render
   */
  pure: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
   */
  popupContainer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
  /**
   * 弹层id, 传入值才会支持无障碍
   */
  id: _prop_types_15_7_2_prop_types_default.a.string
}, tooltip__class.defaultProps = {
  triggerType: 'hover',
  prefix: 'next-',
  align: 'b',
  trigger: external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', null)
}, tooltip__temp);
tooltip_Tooltip.displayName = 'Tooltip';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/balloon/index.js







balloon_Balloon.Tooltip = config_provider.config(tooltip_Tooltip, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('text' in props) {
            deprecated('text', 'children', 'Tooltip');

            var _props = props,
                text = _props.text,
                others = objectWithoutProperties_default()(_props, ['text']);

            props = extends_default()({ children: text }, others);
        }

        return props;
    }
});
balloon_Balloon.Inner = balloon_inner;

/* harmony default export */ var balloon = (config_provider.config(balloon_Balloon, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if (props.alignment) {
            deprecated('alignment', 'alignEdge', 'Balloon');

            var _props2 = props,
                alignment = _props2.alignment,
                others = objectWithoutProperties_default()(_props2, ['alignment']);

            props = extends_default()({ alignEdge: alignment === 'edge' }, others);
        }
        if (props.onCloseClick) {
            deprecated('onCloseClick', 'onVisibleChange', 'Balloon');

            var _props3 = props,
                onCloseClick = _props3.onCloseClick,
                onVisibleChange = _props3.onVisibleChange,
                _others = objectWithoutProperties_default()(_props3, ['onCloseClick', 'onVisibleChange']);

            var newOnVisibleChange = function newOnVisibleChange(visible, reason) {
                if (reason === 'closeClick') {
                    onCloseClick();
                }
                if (onVisibleChange) {
                    onVisibleChange(visible, reason);
                }
            };
            props = extends_default()({ onVisibleChange: newOnVisibleChange }, _others);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/breadcrumb/item.js






var item__class, item__temp;






/**
 * Breadcrumb.Item
 */
var item_Item = (item__temp = item__class = function (_Component) {
    inherits_default()(Item, _Component);

    function Item() {
        classCallCheck_default()(this, Item);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    // stateless separator component
    Item.Separator = function Separator(_ref) {
        var prefix = _ref.prefix,
            children = _ref.children;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'breadcrumb-separator' },
            children
        );
    };

    Item.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            children = _props.children,
            link = _props.link,
            activated = _props.activated,
            separator = _props.separator,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'children', 'link', 'activated', 'separator']);

        var clazz = _classnames_2_2_6_classnames_default()(prefix + 'breadcrumb-text', className, {
            activated: activated
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'breadcrumb-item' },
            link ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                extends_default()({ href: link, className: clazz }, others),
                children
            ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                extends_default()({ className: clazz }, others),
                children
            ),
            activated ? null : Item.Separator({ prefix: prefix, children: separator })
        );
    };

    return Item;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`
     */
    link: _prop_types_15_7_2_prop_types_default.a.string,
    activated: _prop_types_15_7_2_prop_types_default.a.bool,
    separator: _prop_types_15_7_2_prop_types_default.a.node,
    className: _prop_types_15_7_2_prop_types_default.a.any,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, item__class.defaultProps = {
    prefix: 'next-'
}, item__class._typeMark = 'breadcrumb_item', item__temp);
item_Item.displayName = 'Item';


/* harmony default export */ var breadcrumb_item = (config_provider.config(item_Item));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/breadcrumb/index.js






var breadcrumb__class, breadcrumb__temp;








/**
 * Breadcrumb
 */
var breadcrumb_Breadcrumb = (breadcrumb__temp = breadcrumb__class = function (_Component) {
    inherits_default()(Breadcrumb, _Component);

    function Breadcrumb() {
        classCallCheck_default()(this, Breadcrumb);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Breadcrumb.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            maxNode = _props.maxNode,
            children = _props.children,
            separator = _props.separator,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'maxNode', 'children', 'separator']);

        var clazz = _classnames_2_2_6_classnames_default()(prefix + 'breadcrumb', className);
        var items = void 0;
        var length = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children);

        if (maxNode > 1 && length > maxNode) {
            var breakpointer = length - maxNode + 1;
            items = [];

            external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (item, i) {
                var ariaProps = {};

                if (i === length - 1) {
                    ariaProps['aria-current'] = 'page';
                }

                if (i && i === breakpointer) {
                    items.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(item, extends_default()({
                        separator: separator,
                        prefix: prefix,
                        key: i,
                        activated: i === length - 1
                    }, ariaProps, {
                        className: prefix + 'breadcrumb-text-ellipsis'
                    }), '...'));
                } else if (!i || i > breakpointer) {
                    items.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(item, extends_default()({
                        separator: separator,
                        prefix: prefix,
                        key: i
                    }, ariaProps, {
                        activated: i === length - 1
                    })));
                }
            });
        } else {
            items = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (item, i) {
                var ariaProps = {};

                if (i === length - 1) {
                    ariaProps['aria-current'] = 'page';
                }

                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(item, extends_default()({
                    separator: separator,
                    prefix: prefix,
                    activated: i === length - 1
                }, ariaProps, {
                    key: i
                }));
            });
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ 'aria-label': 'Breadcrumb', className: clazz }, others),
            items
        );
    };

    return Breadcrumb;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), breadcrumb__class.Item = breadcrumb_item, breadcrumb__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /*eslint-disable*/
    /**
     * 面包屑子节点，需传入 Breadcrumb.Item
     */
    children: function children(props, propName) {
        external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(props[propName], function (child) {
            if (!(child && typeof child.type === 'function' && child.type._typeMark === 'breadcrumb_item')) {
                throw new Error('Breadcrumb\'s children must be Breadcrumb.Item!');
            }
        });
    },
    /*eslint-enable*/
    /**
     * 面包屑最多显示个数，超出部分会被隐藏
     */
    maxNode: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 分隔符，可以是文本或 Icon
     */
    separator: _prop_types_15_7_2_prop_types_default.a.node,
    className: _prop_types_15_7_2_prop_types_default.a.any
}, breadcrumb__class.defaultProps = {
    prefix: 'next-',
    maxNode: 100,
    separator: external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' })
}, breadcrumb__temp);
breadcrumb_Breadcrumb.displayName = 'Breadcrumb';


/* harmony default export */ var breadcrumb = (config_provider.config(breadcrumb_Breadcrumb));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/button/view/button.js






var button__class, button__temp2;





function mapIconSize(size) {
    return {
        large: 'small',
        medium: 'xs',
        small: 'xs'
    }[size];
}

/** Button */
var button_Button = (button__temp2 = button__class = function (_Component) {
    inherits_default()(Button, _Component);

    function Button() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Button);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onMouseUp = function (e) {
            _this.button.blur();

            if (_this.props.onMouseUp) {
                _this.props.onMouseUp(e);
            }
        }, _this.buttonRefHandler = function (button) {
            _this.button = button;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Button.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            type = _props.type,
            size = _props.size,
            htmlType = _props.htmlType,
            loading = _props.loading,
            text = _props.text,
            warning = _props.warning,
            ghost = _props.ghost,
            component = _props.component,
            iconSize = _props.iconSize,
            children = _props.children,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'type', 'size', 'htmlType', 'loading', 'text', 'warning', 'ghost', 'component', 'iconSize', 'children', 'rtl']);

        var ghostType = ['light', 'dark'].indexOf(ghost) >= 0 ? ghost : 'dark';

        var btnCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'btn'] = true, _classNames['' + prefix + size] = size, _classNames[prefix + 'btn-' + type] = type && !ghost, _classNames[prefix + 'btn-text'] = text, _classNames[prefix + 'btn-warning'] = warning, _classNames[prefix + 'btn-loading'] = loading, _classNames[prefix + 'btn-ghost'] = ghost, _classNames[prefix + 'btn-' + ghostType] = ghost, _classNames[className] = className, _classNames));

        var count = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children);
        var clonedChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, index) {
            if (child && typeof child.type === 'function' && child.type._typeMark === 'icon') {
                var _classNames2;

                var iconCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'btn-icon'] = !iconSize, _classNames2[prefix + 'icon-first'] = count > 1 && index === 0, _classNames2[prefix + 'icon-last'] = count > 1 && index === count - 1, _classNames2[prefix + 'icon-alone'] = count === 1, _classNames2[child.props.className] = !!child.props.className, _classNames2));
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                    className: iconCls,
                    size: iconSize || mapIconSize(size)
                });
            }

            return child;
        });

        var TagName = component;
        var tagAttrs = extends_default()({}, others, {
            type: htmlType,
            className: btnCls
        });

        if (TagName === 'a') {
            delete tagAttrs.type;

            if (tagAttrs.disabled) {
                delete tagAttrs.onClick; // a 标签的 onClick 浏览器默认不会禁用
                tagAttrs.href && delete tagAttrs.href; // a 标签在禁用状态下无跳转
            }
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            TagName,
            extends_default()({}, tagAttrs, { dir: rtl ? 'rtl' : undefined, onMouseUp: this.onMouseUp, ref: this.buttonRefHandler, role: 'button' }),
            clonedChildren
        );
    };

    return Button;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), button__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 按钮的类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['primary', 'secondary', 'normal']),
    /**
     * 按钮的尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小
     */
    iconSize: _prop_types_15_7_2_prop_types_default.a.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl']),
    /**
     * 当 component = 'button' 时，设置 button 标签的 type 值
     */
    htmlType: _prop_types_15_7_2_prop_types_default.a.oneOf(['submit', 'reset', 'button']),
    /**
     * 设置标签类型
     */
    component: _prop_types_15_7_2_prop_types_default.a.oneOf(['button', 'a']),
    /**
     * 设置按钮的载入状态
     */
    loading: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否为幽灵按钮
     */
    ghost: _prop_types_15_7_2_prop_types_default.a.oneOf([true, false, 'light', 'dark']),
    /**
     * 是否为文本按钮
     */
    text: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否为警告按钮
     */
    warning: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 点击按钮的回调
     * @param {Object} e Event Object
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    onMouseUp: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, button__class.defaultProps = {
    prefix: 'next-',
    type: 'normal',
    size: 'medium',
    htmlType: 'button',
    component: 'button',
    loading: false,
    ghost: false,
    text: false,
    warning: false,
    disabled: false,
    onClick: function onClick() {}
}, button__temp2);
button_Button.displayName = 'Button';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/button/view/group.js






var group__class, group__temp;






/**
 * Button.Group
 */
var group_ButtonGroup = (group__temp = group__class = function (_Component) {
    inherits_default()(ButtonGroup, _Component);

    function ButtonGroup() {
        classCallCheck_default()(this, ButtonGroup);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    ButtonGroup.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            size = _props.size,
            children = _props.children,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'size', 'children', 'rtl']);

        var groupCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'btn-group'] = true, _classNames[className] = className, _classNames));

        var cloneChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child) {
            if (child) {
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                    size: size
                });
            }
        });

        if (rtl) {
            others.dir = 'rtl';
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: groupCls }),
            cloneChildren
        );
    };

    return ButtonGroup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), group__class.propTypes = {
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 统一设置 Button 组件的按钮大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, group__class.defaultProps = {
    prefix: 'next-',
    size: 'medium'
}, group__temp);
group_ButtonGroup.displayName = 'ButtonGroup';


/* harmony default export */ var group = (config_provider.config(group_ButtonGroup));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/button/index.js






button_Button.Group = group;

/* harmony default export */ var es_button = (config_provider.config(button_Button, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'text | warning | ghost', 'Button');

            var _props = props,
                shape = _props.shape,
                type = _props.type,
                others = objectWithoutProperties_default()(_props, ['shape', 'type']);

            var newType = type;
            if (type === 'light' || type === 'dark' || type === 'secondary' && shape === 'warning') {
                newType = 'normal';
            }

            var ghost = void 0;
            if (shape === 'ghost') {
                ghost = {
                    primary: 'dark',
                    secondary: 'dark',
                    normal: 'light',
                    dark: 'dark',
                    light: 'light'
                }[type || button_Button.defaultProps.type];
            }

            var text = shape === 'text';
            var warning = shape === 'warning';

            props = extends_default()({ type: newType, ghost: ghost, text: text, warning: warning }, others);
        }

        return props;
    }
}));
// EXTERNAL MODULE: external {"root":"moment","commonjs2":"moment","commonjs":"moment","amd":"moment"}
var external___root___moment___commonjs2___moment___commonjs___moment___amd___moment__ = __webpack_require__(10);
var external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default = /*#__PURE__*/__webpack_require__.n(external___root___moment___commonjs2___moment___commonjs___moment___amd___moment__);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/utils/index.js


var DAYS_OF_WEEK = 7;

var CALENDAR_TABLE_COL_COUNT = 7;

var CALENDAR_TABLE_ROW_COUNT = 6;

var MONTH_TABLE_ROW_COUNT = 4;

var MONTH_TABLE_COL_COUNT = 3;

var YEAR_TABLE_ROW_COUNT = 4;

var YEAR_TABLE_COL_COUNT = 3;

var CALENDAR_MODE_YEAR = 'year';

var CALENDAR_MODE_MONTH = 'month';

var CALENDAR_MODE_DATE = 'date';

var CALENDAR_MODES = [CALENDAR_MODE_DATE, CALENDAR_MODE_MONTH, CALENDAR_MODE_YEAR];

function isDisabledDate(date, fn) {
    if (typeof fn === 'function' && fn(date)) {
        return true;
    }
    return false;
}

function checkMomentObj(props, propName, componentName) {
    if (props[propName] && !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(props[propName])) {
        return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object');
    }
}

function formatDateValue(value) {
    var reservedValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (value && external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(value)) {
        return value;
    }
    return reservedValue;
}

function getVisibleMonth(defaultVisibleMonth, value) {
    var getVM = defaultVisibleMonth;
    if (typeof getVM !== 'function' || !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(getVM())) {
        getVM = function getVM() {
            if (value) {
                return value;
            }
            return external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()();
        };
    }
    return getVM();
}

function isSameYearMonth(dateA, dateB) {
    return dateA.month() === dateB.month() && dateA.year() === dateB.year();
}

function preFormatDateValue(value, format) {
    var val = typeof value === 'string' ? external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(value, format, false) : value;
    if (val && external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(val) && val.isValid()) {
        return val;
    }

    return null;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/locale/zh-cn.js
/* harmony default export */ var zh_cn = ({
    momentLocale: 'zh-cn',
    Timeline: {
        expand: '展开',
        fold: '收起'
    },
    Card: {
        expand: '展开',
        fold: '收起'
    },
    Calendar: {
        today: '今天',
        now: '此刻',
        ok: '确定',
        clear: '清除',
        month: '月',
        year: '年',
        prevYear: '上一年',
        nextYear: '下一年',
        prevMonth: '上个月',
        nextMonth: '下个月',
        prevDecade: '上十年',
        nextDecade: '后十年'
    },
    DatePicker: {
        placeholder: '请选择日期',
        datetimePlaceholder: '请选择日期和时间',
        monthPlaceholder: '请选择月',
        yearPlaceholder: '请选择年',
        now: '此刻',
        selectTime: '选择时间',
        selectDate: '选择日期',
        ok: '确定',
        clear: '清除',
        startPlaceholder: '起始日期',
        endPlaceholder: '结束日期',
        hour: '时',
        minute: '分',
        second: '秒'
    },
    Dialog: {
        close: '关闭',
        ok: '确认',
        cancel: '取消'
    },
    Pagination: {
        prev: '上一页',
        next: '下一页',
        goTo: '到第',
        page: '页',
        go: '确定',
        total: '第{current}页，共{total}页',
        labelPrev: '上一页，当前第{current}页',
        labelNext: '下一页，当前第{current}页',
        pageSize: '每页显示：'
    },
    Input: {
        clear: '清除'
    },
    Select: {
        selectPlaceholder: '请选择',
        autoCompletePlaceholder: '请输入',
        notFoundContent: '无选项'
    },
    Table: {
        empty: '没有数据',
        ok: '确认',
        reset: '重置',
        asc: '升序',
        desc: '降序',
        expanded: '已展开',
        folded: '已折叠',
        filter: '筛选',
        selectAll: '全选'
    },
    TimePicker: {
        placeholder: '请选择时间',
        clear: '清除',
        hour: '时',
        minute: '分',
        second: '秒'
    },
    Transfer: {
        items: '项',
        item: '项',
        moveAll: '移动全部',
        searchPlaceholder: '请输入'
    },
    Upload: {
        card: {
            cancel: '取消',
            addPhoto: '上传图片'
        },
        drag: {
            text: '点击或者拖动文件到虚线框内上传',
            hint: '支持 docx, xls, PDF, rar, zip, PNG, JPG 等类型的文件'
        }
    },
    Search: {
        buttonText: '搜索'
    },
    Tag: {
        delete: '删除'
    }
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tag/tag.js





var tag__class, tag__temp;










var tag_noop = func.noop,
    tag_bindCtx = func.bindCtx;

/**
 * Tag
 */

var tag_Tag = (tag__temp = tag__class = function (_Component) {
    inherits_default()(Tag, _Component);

    function Tag(props) {
        classCallCheck_default()(this, Tag);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.onKeyDown = function (e) {
            // 针对无障碍化要求 添加键盘SPACE事件
            var _this$props = _this.props,
                closable = _this$props.closable,
                closeArea = _this$props.closeArea,
                onClick = _this$props.onClick,
                disabled = _this$props.disabled;

            if (e.keyCode !== KEYCODE.SPACE || disabled) {
                return;
            }

            e.preventDefault();
            e.stopPropagation();

            if (closable) {
                _this.handleClose(closeArea);
            } else {
                typeof onClick === 'function' && onClick(e);
            }
        };

        _this.state = {
            visible: true
        };

        tag_bindCtx(_this, ['handleBodyClick', 'handleTailClick', 'handleAnimationInit', 'handleAnimationEnd', 'renderTailNode']);
        return _this;
    }

    Tag.prototype.componentWillUnmount = function componentWillUnmount() {
        this.__destroyed = true;
    };

    Tag.prototype.handleClose = function handleClose(from) {
        var _this2 = this;

        var _props = this.props,
            animation = _props.animation,
            onClose = _props.onClose;

        var hasAnimation = support.animation && animation;

        // 先执行回调
        var result = onClose(from, this.tagNode);

        // 如果回调函数返回 false，则阻止关闭行为
        if (result !== false && !this.__destroyed) {
            this.setState({
                visible: false
            }, function () {
                // 如果没有动画，则直接执行 afterClose
                !hasAnimation && _this2.props.afterClose(_this2.tagNode);
            });
        }
    };

    // 标签体点击


    Tag.prototype.handleBodyClick = function handleBodyClick(e) {
        var _props2 = this.props,
            closable = _props2.closable,
            closeArea = _props2.closeArea,
            onClick = _props2.onClick;


        if (closable && closeArea === 'tag') {
            this.handleClose('tag');
        }

        if (typeof onClick === 'function') {
            return onClick(e);
        }
    };

    Tag.prototype.handleTailClick = function handleTailClick(e) {
        e && e.preventDefault();
        e && e.stopPropagation();

        this.handleClose('tail');
    };

    Tag.prototype.handleAnimationInit = function handleAnimationInit(node) {
        this.props.afterAppear(node);
    };

    Tag.prototype.handleAnimationEnd = function handleAnimationEnd(node) {
        this.props.afterClose(node);
    };

    Tag.prototype.renderAnimatedTag = function renderAnimatedTag(children, animationName) {
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_animate,
            {
                animation: animationName,
                afterAppear: this.handleAnimationInit,
                afterLeave: this.handleAnimationEnd
            },
            children
        );
    };

    Tag.prototype.renderTailNode = function renderTailNode() {
        var _props3 = this.props,
            prefix = _props3.prefix,
            closable = _props3.closable,
            locale = _props3.locale;


        if (!closable) {
            return null;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            {
                className: prefix + 'tag-close-btn',
                onClick: this.handleTailClick,
                role: 'button',
                'aria-label': locale.delete
            },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close' })
        );
    };

    Tag.prototype.render = function render() {
        var _classNames,
            _this3 = this;

        var _props4 = this.props,
            prefix = _props4.prefix,
            type = _props4.type,
            size = _props4.size,
            _shape = _props4._shape,
            closable = _props4.closable,
            closeArea = _props4.closeArea,
            className = _props4.className,
            children = _props4.children,
            animation = _props4.animation,
            disabled = _props4.disabled,
            rtl = _props4.rtl;
        var visible = this.state.visible;

        var others = util_obj.pickOthers(Tag.propTypes, this.props);
        var shape = closable ? 'closable' : _shape;
        var bodyClazz = _classnames_2_2_6_classnames_default()([prefix + 'tag', prefix + 'tag-' + shape, prefix + 'tag-level-' + type, prefix + 'tag-' + size], (_classNames = {}, _classNames[prefix + 'tag-closable'] = closable, _classNames[prefix + 'tag-body-pointer'] = closable && closeArea === 'tag', _classNames), className);
        // close btn
        var tailNode = this.renderTailNode();
        // tag node
        var tagNode = !visible ? null : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({
                className: bodyClazz,
                onClick: this.handleBodyClick,
                onKeyDown: this.onKeyDown,
                tabIndex: disabled ? '' : '0',
                role: 'button',
                'aria-disabled': disabled,
                disabled: disabled,
                dir: rtl ? 'rtl' : undefined,
                ref: function ref(n) {
                    return _this3.tagNode = n;
                }
            }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'tag-body' },
                children
            ),
            tailNode
        );

        if (animation && support.animation) {
            return this.renderAnimatedTag(tagNode, prefix + 'tag-zoom');
        }

        // 未开启或不支持动画
        return tagNode;
    };

    return Tag;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tag__class.propTypes = {
    /**
     * 标签类名前缀,提供给二次开发者用
     * @default next-
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 标签的类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'primary']),
    /**
     * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),

    closable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否开启动效
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    closeArea: _prop_types_15_7_2_prop_types_default.a.oneOf(['tag', 'tail']),
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 标签出现动画结束后执行的回调
     */
    afterAppear: _prop_types_15_7_2_prop_types_default.a.func,
    className: _prop_types_15_7_2_prop_types_default.a.any,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 点击回调
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    _shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['default', 'closable', 'checkable']),
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, tag__class.defaultProps = {
    prefix: 'next-',
    type: 'normal',
    size: 'medium',
    closeArea: 'tail',
    animation: false,
    onClose: tag_noop,
    afterClose: tag_noop,
    afterAppear: tag_noop,
    onClick: tag_noop,
    _shape: 'default',
    disabled: false,
    rtl: false,
    locale: zh_cn.Tag
}, tag__temp);
tag_Tag.displayName = 'Tag';


/* harmony default export */ var tag = (config_provider.config(tag_Tag));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tag/tag-group.js






var tag_group__class, tag_group__temp;





var tag_group_Group = (tag_group__temp = tag_group__class = function (_Component) {
    inherits_default()(Group, _Component);

    function Group() {
        classCallCheck_default()(this, Group);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Group.prototype.render = function render() {
        var _props = this.props,
            className = _props.className,
            prefix = _props.prefix,
            children = _props.children,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['className', 'prefix', 'children', 'rtl']);

        var clazz = _classnames_2_2_6_classnames_default()((prefix || 'next-') + 'tag-group', className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ className: clazz, dir: rtl ? 'rtl' : undefined }, others),
            children
        );
    };

    return Group;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tag_group__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.any,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, tag_group__class.defaultProps = {
    prefix: 'next-',
    rtl: false
}, tag_group__temp);
tag_group_Group.displayName = 'Group';


/* harmony default export */ var tag_group = (tag_group_Group);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tag/selectable.js





var selectable__class, selectable__temp;







var selectable_noop = func.noop,
    selectable_bindCtx = func.bindCtx;

/**
 * Tag.Selectable
 */

var selectable_Selectable = (selectable__temp = selectable__class = function (_Component) {
    inherits_default()(Selectable, _Component);

    function Selectable(props) {
        classCallCheck_default()(this, Selectable);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            checked: 'checked' in props ? props.checked : props.defaultChecked || false
        };

        selectable_bindCtx(_this, ['handleClick']);
        return _this;
    }

    Selectable.prototype.handleClick = function handleClick(e) {
        e && e.preventDefault();
        // IE9 不支持 pointer-events，还是可能会触发 click 事件
        if (this.props.disabled) {
            return false;
        }

        this.setState(function (prevState) {
            return {
                checked: !prevState.checked
            };
        });

        this.props.onChange(!this.props.checked, e);
    };

    Selectable.prototype.render = function render() {
        var attrFilterTarget = ['checked', 'defaultChecked', 'onChange', 'className',
        // 防止这些额外的参数影响 tag 的类型
        '_shape', 'closable'];

        var others = util_obj.pickOthers(attrFilterTarget, this.props);
        var isChecked = 'checked' in this.props ? this.props.checked : this.state.checked;
        var clazz = _classnames_2_2_6_classnames_default()(this.props.className, {
            checked: isChecked
        });
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(tag, extends_default()({}, others, { role: 'checkbox', _shape: 'checkable', 'aria-checked': isChecked, className: clazz, onClick: this.handleClick }));
    };

    return Selectable;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), selectable__class.propTypes = {
    /**
     * 标签是否被选中，受控用法
     * tag checked or not, a controlled way
     */
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 标签是否默认被选中，非受控用法
     * tag checked or not by default, a uncontrolled way
     */
    defaultChecked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 选中状态变化时触发的事件
     * @param {Boolean} checked 是否选中
     * @param {Event} e Dom 事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 标签是否被禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.any
}, selectable__class.defaultProps = {
    onChange: selectable_noop
}, selectable__temp);
selectable_Selectable.displayName = 'Selectable';


/* harmony default export */ var tag_selectable = (selectable_Selectable);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tag/closeable.js




var closeable__class, closeable__temp;





/**
 * Tag.Closeable
 */
var closeable_Closeable = (closeable__temp = closeable__class = function (_Component) {
    inherits_default()(Closeable, _Component);

    function Closeable() {
        classCallCheck_default()(this, Closeable);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Closeable.prototype.render = function render() {
        var _props = this.props,
            disabled = _props.disabled,
            className = _props.className,
            closeArea = _props.closeArea,
            onClose = _props.onClose,
            afterClose = _props.afterClose,
            onClick = _props.onClick,
            type = _props.type,
            size = _props.size,
            children = _props.children,
            rtl = _props.rtl;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            tag,
            {
                rtl: rtl,
                disabled: disabled,
                className: className,
                closeArea: closeArea,
                onClose: onClose,
                afterClose: afterClose,
                onClick: onClick,
                type: type,
                size: size,
                closable: true },
            children
        );
    };

    return Closeable;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), closeable__class.propTypes = {
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮
     */
    closeArea: _prop_types_15_7_2_prop_types_default.a.oneOf(['tag', 'tail']),
    /**
     * 点击关闭按钮时的回调
     * @param {String} from 事件来源, tag: 标签体点击, tail: 关闭按钮点击
     * @returns {Boolean} true则关闭, false阻止关闭
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 标签关闭后执行的回调
     */
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击回调
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'primary']),
    /**
     * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    children: _prop_types_15_7_2_prop_types_default.a.any,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, closeable__class.defaultProps = {
    disabled: false,
    type: 'normal'
}, closeable__temp);
closeable_Closeable.displayName = 'Closeable';


/* harmony default export */ var tag_closeable = (closeable_Closeable);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tag/index.js







var ConfigTag = config_provider.config(tag, {
    transfrom: /* istanbul ignore next */function transfrom(props, deprecated) {
        var shape = props.shape,
            type = props.type;

        if (shape === 'selectable') {
            deprecated('shape=selectable', 'Tag.Selectable', 'Tag');
        }

        if (shape === 'deletable') {
            deprecated('shape=deletable', 'Tag.Closeable', 'Tag');
        }

        if (shape === 'link') {
            deprecated('shape=link', '<Tag><a href="x">x</a></Tag>', 'Tag');
        }

        if (shape === 'readonly' || shape === 'interactive') {
            log.warning('Warning: [ shape=' + shape + ' ] is deprecated at [ Tag ]');
        }

        if (type === 'secondary') {
            log.warning('Warning: [ type=secondary ] is deprecated at [ Tag ]');
        }

        ['count', 'marked', 'value', 'onChange'].forEach(function (key) {
            if (key in props) {
                log.warning('Warning: [ ' + key + ' ] is deprecated at [ Tag ]');
            }
        });

        if ('selected' in props || 'defaultSelected' in props) {
            log.warning('Warning: [ selected|defaultSelected  ] is deprecated at [ Tag ], use [ checked|defaultChecked ] at [ Tag.Selectable ] instead of it');
        }

        if ('closed' in props) {
            log.warning('Warning: [ closed  ] is deprecated at [ Tag ], use [ onClose ] at [ Tag.Closeable ] instead of it');
        }

        if ('onSelect' in props) {
            deprecated('onSelect', '<Tag.Selectable onChange/>', 'Tag');
        }

        if ('afterClose' in props) {
            log.warning('Warning: [ afterClose  ] is deprecated at [ Tag ], use [ afterClose ] at [ Tag.Closeable ] instead of it');
        }

        return props;
    }
});

ConfigTag.Group = config_provider.config(tag_group);

ConfigTag.Selectable = config_provider.config(tag_selectable);

// 有的地方叫做 Closeable 有的地方用Closeable, 为了保持兼容 文档类出现 Closeable, Closeable可以继续用
ConfigTag.Closable = config_provider.config(tag_closeable);
ConfigTag.Closeable = ConfigTag.Closable;

/* harmony default export */ var es_tag = (ConfigTag);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/input/base.js




var base__class, base__temp2;







var base_Base = (base__temp2 = base__class = function (_React$Component) {
    inherits_default()(Base, _React$Component);

    function Base() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Base);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.saveRef = function (input) {
            _this.inputRef = input;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Base.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: typeof nextProps.value === 'undefined' ? '' : nextProps.value
            });
        }
    };

    Base.prototype.ieHack = function ieHack(value) {
        return value;
    };

    Base.prototype.onChange = function onChange(e) {
        var value = e.target.value;

        if (this.props.trim) {
            value = value.trim();
        }

        value = this.ieHack(value);

        // not controlled
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }

        // Number('') = 0
        if (value && this.props.htmlType === 'number') {
            value = Number(value);
        }

        this.props.onChange(value, e);
    };

    Base.prototype.onKeyDown = function onKeyDown(e) {
        var value = e.target.value;
        var maxLength = this.props.maxLength;

        var len = maxLength > 0 && value ? this.getValueLength(value) : 0;
        var opts = {};

        // has enable trim and has input whitespace
        if (this.props.trim && e.keyCode === 32) {
            opts.beTrimed = true;
        }

        // has defined maxLength and has over max length and has not input backspace and delete
        if (maxLength > 0 && (len > maxLength + 1 || (len === maxLength || len === maxLength + 1) && e.keyCode !== 8 && e.keyCode !== 46)) {
            opts.overMaxLength = true;
        }

        this.props.onKeyDown(e, opts);
    };

    Base.prototype.onFocus = function onFocus(e) {
        this.setState({
            focus: true
        });
        this.props.onFocus(e);
    };

    Base.prototype.onBlur = function onBlur(e) {
        this.setState({
            focus: false
        });
        this.props.onBlur(e);
    };

    Base.prototype.renderLength = function renderLength() {
        var _classNames;

        var _props = this.props,
            maxLength = _props.maxLength,
            hasLimitHint = _props.hasLimitHint,
            prefix = _props.prefix,
            rtl = _props.rtl;

        var len = maxLength > 0 && this.state.value ? this.getValueLength(this.state.value) : 0;

        var classesLenWrap = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'input-len'] = true, _classNames[prefix + 'error'] = len > maxLength, _classNames));

        var content = rtl ? maxLength + '/' + len : len + '/' + maxLength;

        return maxLength && hasLimitHint ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: classesLenWrap },
            content
        ) : null;
    };

    Base.prototype.renderControl = function renderControl() {
        var lenWrap = this.renderLength();

        return lenWrap ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: this.props.prefix + 'input-control' },
            lenWrap
        ) : null;
    };

    Base.prototype.getClass = function getClass() {
        var _classNames2;

        var _props2 = this.props,
            disabled = _props2.disabled,
            state = _props2.state,
            prefix = _props2.prefix;


        return _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'input'] = true, _classNames2[prefix + 'disabled'] = !!disabled, _classNames2[prefix + 'error'] = state === 'error', _classNames2[prefix + 'focus'] = this.state.focus, _classNames2));
    };

    Base.prototype.getProps = function getProps() {
        var _props3 = this.props,
            placeholder = _props3.placeholder,
            inputStyle = _props3.inputStyle,
            disabled = _props3.disabled,
            readOnly = _props3.readOnly,
            cutString = _props3.cutString,
            maxLength = _props3.maxLength,
            name = _props3.name;

        var props = {
            style: inputStyle,
            placeholder: placeholder,
            disabled: disabled,
            readOnly: readOnly,
            name: name,
            maxLength: cutString ? maxLength : undefined,
            value: this.state.value,
            onChange: this.onChange.bind(this),
            onBlur: this.onBlur.bind(this),
            onFocus: this.onFocus.bind(this)
        };

        // fix accessibility：auto process status of aria disabled
        if (disabled) {
            props['aria-disabled'] = disabled;
        }

        return props;
    };

    Base.prototype.getInputNode = function getInputNode() {
        return this.inputRef;
    };

    Base.prototype.focus = function focus(start, end) {
        this.inputRef.focus();
        if (typeof start !== 'undefined') {
            this.inputRef.selectionStart = start;
        }
        if (typeof end !== 'undefined') {
            this.inputRef.selectionEnd = end;
        }
    };

    return Base;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), base__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 初始化值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 发生改变的时候触发的回调
     * @param {String} value 数据
     * @param {Event} e DOM事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 键盘按下的时候触发的回调
     * @param {Event} e DOM事件对象
     * @param {Object} opts 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理
     */
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 禁用状态
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 最大长度
     */
    maxLength: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 是否展现最大长度样式
     */
    hasLimitHint: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当设置了maxLength时，是否截断超出字符串
     */
    cutString: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 只读
     */
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * onChange返回会自动去除头尾空字符
     */
    trim: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 输入提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 获取焦点时候触发的回调
     */
    onFocus: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 失去焦点时候触发的回调
     */
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义字符串计算长度方式
     * @param {String} value 数据
     * @returns {Number} 自定义长度
     */
    getValueLength: _prop_types_15_7_2_prop_types_default.a.func,
    inputStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 原生type
     */
    htmlType: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * name
     */
    name: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'loading', 'success']),
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, base__class.defaultProps = {
    disabled: false,
    prefix: 'next-',
    maxLength: null,
    hasLimitHint: false,
    cutString: true,
    readOnly: false,
    trim: false,
    onFocus: func.noop,
    onBlur: func.noop,
    onChange: func.noop,
    onKeyDown: func.noop,
    getValueLength: func.noop,
    locale: zh_cn.Input
}, base__temp2);
base_Base.displayName = 'Base';


/* harmony default export */ var input_base = (base_Base);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/input/group.js






var input_group__class, input_group__temp;






/**
 * Input.Group
 */
var group_Group = (input_group__temp = input_group__class = function (_React$Component) {
    inherits_default()(Group, _React$Component);

    function Group() {
        classCallCheck_default()(this, Group);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Group.prototype.render = function render() {
        var _classNames, _classNames2, _classNames3;

        var _props = this.props,
            className = _props.className,
            style = _props.style,
            children = _props.children,
            prefix = _props.prefix,
            addonBefore = _props.addonBefore,
            addonAfter = _props.addonAfter,
            addonBeforeClassName = _props.addonBeforeClassName,
            addonAfterClassName = _props.addonAfterClassName,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['className', 'style', 'children', 'prefix', 'addonBefore', 'addonAfter', 'addonBeforeClassName', 'addonAfterClassName', 'rtl']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'input-group'] = true, _classNames[className] = !!className, _classNames));

        var addonCls = prefix + 'input-group-addon';
        var beforeCls = _classnames_2_2_6_classnames_default()(addonCls, (_classNames2 = {}, _classNames2[prefix + 'before'] = true, _classNames2[addonBeforeClassName] = addonBeforeClassName, _classNames2));
        var afterCls = _classnames_2_2_6_classnames_default()(addonCls, (_classNames3 = {}, _classNames3[prefix + 'after'] = true, _classNames3[addonAfterClassName] = addonAfterClassName, _classNames3));

        var before = addonBefore ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: beforeCls },
            addonBefore
        ) : null;

        var after = addonAfter ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: afterCls },
            addonAfter
        ) : null;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({}, others, { dir: rtl ? 'rtl' : undefined, className: cls, style: style }),
            before,
            children,
            after
        );
    };

    return Group;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), input_group__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框前附加内容
     */
    addonBefore: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框前附加内容css
     */
    addonBeforeClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 输入框后附加内容
     */
    addonAfter: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框后额外css
     */
    addonAfterClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * rtl
     */
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, input_group__class.defaultProps = {
    prefix: 'next-'
}, input_group__temp);
group_Group.displayName = 'Group';


/* harmony default export */ var input_group = (config_provider.config(group_Group));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/input/input.js





var input__class, input__temp;









// preventDefault here can stop onBlur to keep focus state
function preventDefault(e) {
    e.preventDefault();
}

/** Input */
var input_Input = (input__temp = input__class = function (_Base) {
    inherits_default()(Input, _Base);

    function Input(props) {
        classCallCheck_default()(this, Input);

        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        _this.handleKeyDown = function (e) {
            if (e.keyCode === 13) {
                _this.props.onPressEnter(e);
            }

            _this.onKeyDown(e);
        };

        _this.handleKeyDownFromClear = function (e) {
            if (e.keyCode === 13) {
                _this.onClear(e);
            }
        };

        var value = void 0;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }

        _this.state = {
            value: typeof value === 'undefined' ? '' : value
        };
        return _this;
    }

    // `Enter` was considered to be two chars in chrome , but one char in ie.
    // so we make all `Enter` to be two chars


    Input.prototype.getValueLength = function getValueLength(value) {
        var nv = '' + value;
        var strLen = this.props.getValueLength(nv);
        if (typeof strLen !== 'number') {
            strLen = nv.length;
        }

        return strLen;
    };

    Input.prototype.renderControl = function renderControl() {
        var _props = this.props,
            hasClear = _props.hasClear,
            readOnly = _props.readOnly,
            state = _props.state,
            prefix = _props.prefix,
            hint = _props.hint,
            extra = _props.extra,
            locale = _props.locale;


        var lenWrap = this.renderLength();

        var stateWrap = null;
        if (state === 'success') {
            stateWrap = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'success-filling' });
        } else if (state === 'loading') {
            stateWrap = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'loading' });
        }

        var clearWrap = null;
        var showClear = hasClear && !readOnly && !!('' + this.state.value);

        if (hint || showClear) {
            var hintIcon = null;
            if (hint) {
                hintIcon = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: hint, className: prefix + 'input-hint' });
            } else {
                hintIcon = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'delete-filling', role: 'button', tabIndex: '0', className: prefix + 'input-hint', 'aria-label': locale.clear,
                    onClick: this.onClear.bind(this),
                    onMouseDown: preventDefault,
                    onKeyDown: this.handleKeyDownFromClear });
            }

            clearWrap = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'input-hint-wrap' },
                hasClear && hint ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'delete-filling', role: 'button', tabIndex: '0', className: prefix + 'input-clear', 'aria-label': locale.clear,
                    onClick: this.onClear.bind(this),
                    onMouseDown: preventDefault,
                    onKeyDown: this.handleKeyDownFromClear }) : null,
                hintIcon
            );
        }

        if (state === 'loading') {
            clearWrap = null;
        }

        return clearWrap || lenWrap || stateWrap || extra ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'input-control' },
            clearWrap,
            lenWrap,
            stateWrap,
            extra
        ) : null;
    };

    Input.prototype.renderLabel = function renderLabel() {
        var _props2 = this.props,
            label = _props2.label,
            prefix = _props2.prefix,
            id = _props2.id;

        return label ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'label',
            { className: prefix + 'input-label', htmlFor: id },
            label
        ) : null;
    };

    Input.prototype.renderInner = function renderInner(inner, cls) {
        return inner ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: cls },
            inner
        ) : null;
    };

    Input.prototype.onClear = function onClear(e) {
        if (this.props.disabled) {
            return;
        }

        // 非受控模式清空内部数据
        if (!('value' in this.props)) {
            this.setState({
                value: ''
            });
        }
        this.props.onChange('', e, 'clear');
        this.focus();
    };

    Input.prototype.render = function render() {
        var _classNames, _classNames2, _classNames3, _classNames4, _classNames5, _classNames6;

        var _props3 = this.props,
            size = _props3.size,
            htmlType = _props3.htmlType,
            htmlSize = _props3.htmlSize,
            autoComplete = _props3.autoComplete,
            autoFocus = _props3.autoFocus,
            disabled = _props3.disabled,
            style = _props3.style,
            innerBefore = _props3.innerBefore,
            innerAfter = _props3.innerAfter,
            innerBeforeClassName = _props3.innerBeforeClassName,
            innerAfterClassName = _props3.innerAfterClassName,
            className = _props3.className,
            hasBorder = _props3.hasBorder,
            prefix = _props3.prefix,
            addonBefore = _props3.addonBefore,
            addonAfter = _props3.addonAfter,
            addonTextBefore = _props3.addonTextBefore,
            addonTextAfter = _props3.addonTextAfter,
            inputRender = _props3.inputRender,
            rtl = _props3.rtl;


        var hasAddon = addonBefore || addonAfter || addonTextBefore || addonTextAfter;
        var cls = _classnames_2_2_6_classnames_default()(this.getClass(), (_classNames = {}, _classNames['' + prefix + size] = true, _classNames[prefix + 'hidden'] = this.props.htmlType === 'hidden', _classNames[prefix + 'noborder'] = !hasBorder || this.props.htmlType === 'file', _classNames[prefix + 'input-group-auto-width'] = hasAddon, _classNames[className] = !!className && !hasAddon, _classNames));

        var innerCls = prefix + 'input-inner';
        var innerBeforeCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[innerCls] = true, _classNames2[prefix + 'before'] = true, _classNames2[innerBeforeClassName] = innerBeforeClassName, _classNames2));
        var innerAfterCls = _classnames_2_2_6_classnames_default()((_classNames3 = {}, _classNames3[innerCls] = true, _classNames3[prefix + 'after'] = true, _classNames3[innerAfterClassName] = innerAfterClassName, _classNames3));

        var props = this.getProps();
        // custom data attributes are assigned to the top parent node
        // data-类自定义数据属性分配到顶层node节点
        var dataProps = util_obj.pickAttrsWith(this.props, 'data-');
        // Custom props are transparently transmitted to the core input node by default
        // 自定义属性默认透传到核心node节点：input
        var others = util_obj.pickOthers(extends_default()({}, dataProps, Input.propTypes), this.props);

        var inputEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', extends_default()({}, others, props, {
            height: '100%',
            type: htmlType,
            size: htmlSize,
            autoFocus: autoFocus,
            autoComplete: autoComplete,
            onKeyDown: this.handleKeyDown,
            ref: this.saveRef
        }));

        var inputWrap = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({}, dataProps, { dir: rtl ? 'rtl' : undefined, className: cls, style: hasAddon ? undefined : style }),
            this.renderInner(innerBefore, innerBeforeCls),
            this.renderLabel(),
            inputRender(inputEl),
            this.renderControl(),
            this.renderInner(innerAfter, innerAfterCls)
        );

        var groupCls = _classnames_2_2_6_classnames_default()((_classNames4 = {}, _classNames4[prefix + 'input-group-text'] = true, _classNames4['' + prefix + size] = !!size, _classNames4[prefix + 'disabled'] = disabled, _classNames4));

        var addonBeforeCls = _classnames_2_2_6_classnames_default()((_classNames5 = {}, _classNames5[groupCls] = addonTextBefore, _classNames5));
        var addonAfterCls = _classnames_2_2_6_classnames_default()((_classNames6 = {}, _classNames6[groupCls] = addonTextAfter, _classNames6));

        if (hasAddon) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                input_group,
                extends_default()({}, dataProps, {
                    className: className,
                    style: style,
                    addonBefore: addonBefore || addonTextBefore,
                    addonBeforeClassName: addonBeforeCls,
                    addonAfter: addonAfter || addonTextAfter,
                    addonAfterClassName: addonAfterCls }),
                inputWrap
            );
        }

        return inputWrap;
    };

    return Input;
}(input_base), input__class.propTypes = extends_default()({}, input_base.propTypes, {
    /**
     * label
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否出现clear按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有边框
     */
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 状态
     * @enumdesc 错误, 校验中, 成功
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'loading', 'success']),
    /**
     * 尺寸
     * @enumdesc 小, 中, 大
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 按下回车的回调
     */
    onPressEnter: _prop_types_15_7_2_prop_types_default.a.func,

    onClear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 原生type
     */
    htmlType: _prop_types_15_7_2_prop_types_default.a.string,
    htmlSize: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 水印 (Icon的type类型，和hasClear占用一个地方)
     */
    hint: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 文字前附加内容
     */
    innerBefore: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 文字后附加内容
     */
    innerAfter: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框前附加内容
     */
    addonBefore: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框后附加内容
     */
    addonAfter: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框前附加文字
     */
    addonTextBefore: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框后附加文字
     */
    addonTextAfter: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * (原生input支持)
     */
    autoComplete: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自动聚焦(原生input支持)
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    inputRender: _prop_types_15_7_2_prop_types_default.a.func,
    extra: _prop_types_15_7_2_prop_types_default.a.node,
    innerBeforeClassName: _prop_types_15_7_2_prop_types_default.a.string,
    innerAfterClassName: _prop_types_15_7_2_prop_types_default.a.string
}), input__class.defaultProps = extends_default()({}, input_base.defaultProps, {
    size: 'medium',
    autoComplete: 'off',
    hasBorder: true,
    onPressEnter: func.noop,
    inputRender: function inputRender(el) {
        return el;
    }
}), input__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/input/textarea.js






var textarea__class, textarea__temp, textarea__initialiseProps;








function onNextFrame(cb) {
    if (window.requestAnimationFrame) {
        return window.requestAnimationFrame(cb);
    }
    return window.setTimeout(cb, 1);
}

function clearNextFrameAction(nextFrameId) {
    if (window.cancelAnimationFrame) {
        window.cancelAnimationFrame(nextFrameId);
    } else {
        window.clearTimeout(nextFrameId);
    }
}

var hiddenStyle = {
    visibility: 'hidden',
    position: 'absolute',
    zIndex: '-1000',
    top: '-1000px',
    overflowY: 'hidden',
    left: 0,
    right: 0
};

/**
 * Input.TextArea
 * @order 2
 */
var textarea_TextArea = (textarea__temp = textarea__class = function (_Base) {
    inherits_default()(TextArea, _Base);

    function TextArea(props) {
        classCallCheck_default()(this, TextArea);

        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        textarea__initialiseProps.call(_this);

        var value = void 0;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }

        _this.state = {
            value: typeof value === 'undefined' ? '' : value
        };
        return _this;
    }

    TextArea.prototype.componentDidMount = function componentDidMount() {
        var autoHeight = this.props.autoHeight;
        if (autoHeight) {
            if ((typeof autoHeight === 'undefined' ? 'undefined' : typeof_default()(autoHeight)) === 'object') {
                /* eslint-disable react/no-did-mount-set-state */
                this.setState(this._getMinMaxHeight(autoHeight, this.state.value));
            } else {
                this.setState({
                    height: this._getHeight(this.state.value),
                    overflowY: 'hidden'
                });
            }
        }
    };

    TextArea.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        _Base.prototype.componentWillReceiveProps.call(this, nextProps);

        if (this.props.autoHeight && this.props.value !== nextProps.value) {
            this._resizeTextArea(nextProps.value);
        }
    };

    TextArea.prototype._getMinMaxHeight = function _getMinMaxHeight(_ref, value) {
        var minRows = _ref.minRows,
            maxRows = _ref.maxRows;

        var node = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.helpRef);
        node.setAttribute('rows', minRows);
        var minHeight = node.clientHeight;

        node.setAttribute('rows', maxRows);
        var maxHeight = node.clientHeight;

        node.setAttribute('rows', '1');
        var height = this._getHeight(value);

        return {
            minHeight: minHeight,
            maxHeight: maxHeight,
            height: height,
            overflowY: height <= maxHeight ? 'hidden' : undefined
        };
    };

    TextArea.prototype._getHeight = function _getHeight(value) {
        var node = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.helpRef);
        node.value = value;

        return node.scrollHeight;
    };

    TextArea.prototype.ieHack = function ieHack(value) {
        // Fix: textarea dit not support maxLength in ie9
        /* istanbul ignore if */
        if (util_env.ieVersion && this.props.maxLength && this.props.multiple) {
            var maxLength = parseInt(this.props.maxLength);
            var len = this.getValueLength(value, true);
            if (len > maxLength && this.props.cutString) {
                value = value.replace(/\n/g, '\n\n');
                value = value.substr(0, maxLength);
                value = value.replace(/\n\n/g, '\n');
            }
        }

        this.props.autoHeight && this._resizeTextArea(value);

        return value;
    };

    // `Enter` was considered to be two chars in chrome , but one char in ie.
    // so we make all `Enter` to be two chars


    TextArea.prototype.getValueLength = function getValueLength(value) {
        var nv = '' + value;
        var strLen = this.props.getValueLength(nv);
        if (typeof strLen !== 'number') {
            strLen = nv.length;
        }
        /* istanbul ignore if */
        if (util_env.ieVersion) {
            return strLen + nv.split('\n').length - 1;
        }
        return strLen;
    };

    TextArea.prototype.saveTextAreaRef = function saveTextAreaRef(textArea) {
        this.inputRef = textArea;
    };

    TextArea.prototype.saveHelpRef = function saveHelpRef(ref) {
        this.helpRef = ref;
    };

    TextArea.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            rows = _props.rows,
            style = _props.style,
            className = _props.className,
            autoHeight = _props.autoHeight,
            prefix = _props.prefix,
            rtl = _props.rtl;


        var cls = _classnames_2_2_6_classnames_default()(this.getClass(), (_classNames = {}, _classNames[prefix + 'input-textarea'] = true, _classNames[className] = !!className, _classNames));

        var props = this.getProps();
        // custom data attributes are assigned to the top parent node
        // data-类自定义数据属性分配到顶层node节点
        var dataProps = util_obj.pickAttrsWith(this.props, 'data-');
        // Custom props are transparently transmitted to the core input node by default
        // 自定义属性默认透传到核心node节点：input
        var others = util_obj.pickOthers(extends_default()({}, dataProps, TextArea.propTypes), this.props);

        var textareStyle = extends_default()({}, props.style, {
            height: this.state.height,
            minHeight: this.state.minHeight,
            maxHeight: this.state.maxHeight,
            overflowY: this.state.overflowY
        });

        var wrapStyle = autoHeight ? extends_default()({}, style, {
            position: 'relative'
        }) : style;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({ className: cls, style: wrapStyle, dir: rtl ? 'rtl' : undefined }, dataProps),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('textarea', extends_default()({}, others, props, {
                'data-real': true,
                rows: rows,
                style: textareStyle,
                ref: this.saveRef.bind(this),
                onKeyDown: this.onKeyDown.bind(this) })),
            autoHeight ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('textarea', { 'data-fake': true, ref: this.saveHelpRef.bind(this), style: extends_default()({}, props.style, hiddenStyle),
                rows: '1' }) : null,
            this.renderControl()
        );
    };

    return TextArea;
}(input_base), textarea__class.propTypes = extends_default()({}, input_base.propTypes, {
    /**
     * 状态
     * @enumdesc 错误
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error']),
    /**
     * 自动高度 true / {minRows: 2, maxRows: 4}
     */
    autoHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)
     */
    rows: _prop_types_15_7_2_prop_types_default.a.number
}), textarea__class.defaultProps = extends_default()({}, input_base.defaultProps, {
    rows: 4,
    autoHeight: false
}), textarea__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._resizeTextArea = function (value) {
        if (_this2.nextFrameActionId) {
            clearNextFrameAction(_this2.nextFrameActionId);
        }
        _this2.nextFrameActionId = onNextFrame(function () {
            var height = _this2._getHeight(value);
            var maxHeight = _this2.state.maxHeight ? _this2.state.maxHeight : Infinity;

            _this2.setState({
                height: _this2._getHeight(value),
                overflowY: height <= maxHeight ? 'hidden' : undefined
            });
        });
    };
}, textarea__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/input/index.js





input_Input.TextArea = config_provider.config(textarea_TextArea, { exportNames: ['getInputNode', 'focus'] });
input_Input.Group = input_group;

// 用来自动生成文档的工具底层依赖的 react-docgen，无法解析生成 HOC 的方法中存在第二个参数的情况
// 所以不能在 input.jsx／textarea.jsx 中生成 HOC
/* harmony default export */ var es_input = (config_provider.config(input_Input, {
    exportNames: ['getInputNode', 'focus']
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/menu.js





var menu__class, menu__temp;







var menu_bindCtx = func.bindCtx;
var menu_pickOthers = util_obj.pickOthers;

var menu_noop = function noop() {};

/**
 * Menu
 */
var menu_Menu = (menu__temp = menu__class = function (_Component) {
    inherits_default()(Menu, _Component);

    function Menu(props) {
        classCallCheck_default()(this, Menu);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        var _this$props = _this.props,
            children = _this$props.children,
            selectedKeys = _this$props.selectedKeys,
            defaultSelectedKeys = _this$props.defaultSelectedKeys,
            focusedKey = _this$props.focusedKey,
            focusable = _this$props.focusable,
            autoFocus = _this$props.autoFocus;


        _this.newChildren = _this.getNewChildren(children);

        if (focusable) {
            _this.tabbableKey = _this.getFirstAvaliablelChildKey('0');
        }
        _this.state = {
            openKeys: _this.getInitOpenKeys(props),
            selectedKeys: _this.normalizeToArray(selectedKeys || defaultSelectedKeys),
            focusedKey: 'focusedKey' in _this.props ? focusedKey : focusable && autoFocus ? _this.tabbableKey : null
        };

        menu_bindCtx(_this, ['handleOpen', 'handleSelect', 'handleItemClick', 'handleItemKeyDown', 'onBlur']);

        _this.popupNodes = [];
        return _this;
    }

    Menu.prototype.componentDidMount = function componentDidMount() {
        this.menuNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
    };

    Menu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var state = {};

        if ('openKeys' in nextProps) {
            state.openKeys = this.normalizeToArray(nextProps.openKeys);
        }
        if ('selectedKeys' in nextProps) {
            state.selectedKeys = this.normalizeToArray(nextProps.selectedKeys);
        }
        if ('focusedKey' in nextProps) {
            state.focusedKey = nextProps.focusedKey;
        }

        if (Object.keys(state).length) {
            this.setState(state);
        }
    };

    Menu.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
        this.newChildren = this.getNewChildren(nextProps.children);
        if (this.props.focusable) {
            if (this.tabbableKey in this.k2n) {
                if (this.state.focusedKey) {
                    this.tabbableKey = this.state.focusedKey;
                }
            } else {
                this.tabbableKey = this.getFirstAvaliablelChildKey('0');
            }
        }
    };

    Menu.prototype.onBlur = function onBlur(e) {
        this.setState({
            focusedKey: ''
        });

        this.props.onBlur && this.props.onBlur(e);
    };

    Menu.prototype.getInitOpenKeys = function getInitOpenKeys(props) {
        var _this2 = this;

        var initOpenKeys = void 0;

        var openKeys = props.openKeys,
            defaultOpenKeys = props.defaultOpenKeys,
            defaultOpenAll = props.defaultOpenAll,
            mode = props.mode,
            openMode = props.openMode;

        if (openKeys) {
            initOpenKeys = openKeys;
        } else if (defaultOpenAll && mode === 'inline' && openMode === 'multiple') {
            initOpenKeys = Object.keys(this.k2n).filter(function (key) {
                return _this2.k2n[key].type === 'submenu';
            });
        } else {
            initOpenKeys = defaultOpenKeys;
        }

        return this.normalizeToArray(initOpenKeys);
    };

    Menu.prototype.getNewChildren = function getNewChildren(children) {
        var _this3 = this;

        this.k2n = {};
        this.p2n = {};
        var loop = function loop(children, posPrefix) {
            var indexWrapper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { index: 0 };

            return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child) {
                if (child && typeof child.type === 'function' && 'menuChildType' in child.type) {
                    var newChild = void 0;

                    var pos = void 0;
                    var props = { root: _this3 };

                    if (['item', 'submenu', 'group'].indexOf(child.type.menuChildType) > -1) {
                        pos = posPrefix + '-' + indexWrapper.index++;
                        var key = typeof child.key === 'string' ? child.key : pos;
                        var level = pos.split('-').length - 1;
                        _this3.k2n[key] = _this3.p2n[pos] = {
                            key: key,
                            pos: pos,
                            type: child.type.menuChildType,
                            disabled: child.props.disabled,
                            label: child.props.label || child.props.children
                        };

                        props._key = key;
                        props.level = level;
                        props.groupIndent = child.type.menuChildType === 'group' ? 1 : 0;
                    }

                    switch (child.type.menuChildType) {
                        case 'submenu':
                            newChild = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, props, loop(child.props.children, pos));
                            break;
                        case 'group':
                            newChild = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, props, loop(child.props.children, posPrefix, indexWrapper));
                            break;
                        case 'item':
                        case 'divider':
                            newChild = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, props);
                            break;
                        default:
                            newChild = child;
                            break;
                    }

                    return newChild;
                }

                return child;
            });
        };

        return loop(children, '0');
    };

    Menu.prototype.normalizeToArray = function normalizeToArray(items) {
        if (items) {
            if (Array.isArray(items)) {
                return items;
            }
            return [items];
        }

        return [];
    };

    Menu.prototype.isSibling = function isSibling(currentPos, targetPos) {
        var currentNums = currentPos.split('-').slice(0, -1);
        var targetNums = targetPos.split('-').slice(0, -1);

        return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };

    Menu.prototype.isAncestor = function isAncestor(currentPos, targetPos) {
        var currentNums = currentPos.split('-');
        var targetNums = targetPos.split('-');

        return currentNums.length > targetNums.length && targetNums.every(function (num, index) {
            return num === currentNums[index];
        });
    };

    Menu.prototype.handleOpen = function handleOpen(key, open, triggerType, e) {
        var _this4 = this;

        var newOpenKeys = void 0;

        var _props = this.props,
            mode = _props.mode,
            openMode = _props.openMode;
        var openKeys = this.state.openKeys;

        var index = openKeys.indexOf(key);
        if (open && index === -1) {
            if (mode === 'inline') {
                if (openMode === 'single') {
                    newOpenKeys = openKeys.filter(function (k) {
                        return !_this4.isSibling(_this4.k2n[key].pos, _this4.k2n[k].pos);
                    });
                    newOpenKeys.push(key);
                } else {
                    newOpenKeys = openKeys.concat(key);
                }
            } else {
                newOpenKeys = openKeys.filter(function (k) {
                    return _this4.isAncestor(_this4.k2n[key].pos, _this4.k2n[k].pos);
                });
                newOpenKeys.push(key);
            }
        } else if (!open && index > -1) {
            if (mode === 'inline') {
                newOpenKeys = [].concat(openKeys.slice(0, index), openKeys.slice(index + 1));
            } else if (triggerType === 'docClick') {
                if (!this.popupNodes.concat(this.menuNode).some(function (node) {
                    return node.contains(e.target);
                })) {
                    newOpenKeys = [];
                }
            } else {
                newOpenKeys = openKeys.filter(function (k) {
                    return k !== key && !_this4.isAncestor(_this4.k2n[k].pos, _this4.k2n[key].pos);
                });
            }
        }

        if (newOpenKeys) {
            if (!('openKeys' in this.props)) {
                this.setState({
                    openKeys: newOpenKeys
                });
            }

            this.props.onOpen(newOpenKeys, {
                key: key,
                open: open
            });
        }
    };

    Menu.prototype.getPath = function getPath(key) {
        var keyPath = [];
        var labelPath = [];

        var pos = this.k2n[key].pos;
        var nums = pos.split('-');
        for (var i = 1; i < nums.length - 1; i++) {
            var parentNums = nums.slice(0, i + 1);
            var parentPos = parentNums.join('-');
            var parent = this.p2n[parentPos];
            keyPath.push(parent.key);
            labelPath.push(parent.label);
        }

        return {
            keyPath: keyPath,
            labelPath: labelPath
        };
    };

    Menu.prototype.handleSelect = function handleSelect(key, select, menuItem) {
        var pos = this.k2n[key].pos;
        var level = pos.split('-').length - 1;
        if (this.props.shallowSelect && level > 1) {
            return;
        }

        var newSelectedKeys = void 0;

        var selectMode = this.props.selectMode;
        var selectedKeys = this.state.selectedKeys;

        var index = selectedKeys.indexOf(key);
        if (select && index === -1) {
            if (selectMode === 'single') {
                newSelectedKeys = [key];
            } else if (selectMode === 'multiple') {
                newSelectedKeys = selectedKeys.concat(key);
            }
        } else if (!select && index > -1 && selectMode === 'multiple') {
            newSelectedKeys = [].concat(selectedKeys.slice(0, index), selectedKeys.slice(index + 1));
        }

        if (newSelectedKeys) {
            if (!('selectedKeys' in this.props)) {
                this.setState({
                    selectedKeys: newSelectedKeys
                });
            }

            this.props.onSelect(newSelectedKeys, menuItem, extends_default()({
                key: key,
                select: select,
                label: this.k2n[key].label
            }, this.getPath(key)));
        }
    };

    Menu.prototype.handleItemClick = function handleItemClick(key, item, e) {
        var _this5 = this;

        if (this.props.focusable) {
            if (!('focusedKey' in this.props)) {
                this.setState({
                    focusedKey: key
                });
            }

            this.props.onItemFocus(key, item, e);
        }

        if (item.props.type === 'item') {
            if (item.props.parentMode === 'popup' && this.state.openKeys.length) {
                if (!('openKeys' in this.props)) {
                    this.setState({
                        openKeys: []
                    });
                }

                this.props.onOpen([], {
                    key: this.state.openKeys.sort(function (prevKey, nextKey) {
                        return _this5.k2n[nextKey].pos.split('-').length - _this5.k2n[prevKey].pos.split('-').length;
                    })[0],
                    open: false
                });
            }

            this.props.onItemClick(key, item, e);
        }
    };

    Menu.prototype.isAvailablePos = function isAvailablePos(refPos, targetPos) {
        var _p2n$targetPos = this.p2n[targetPos],
            type = _p2n$targetPos.type,
            disabled = _p2n$targetPos.disabled;


        return this.isSibling(refPos, targetPos) && (type === 'item' && !disabled || type === 'submenu');
    };

    Menu.prototype.getAvailableKey = function getAvailableKey(pos, prev) {
        var _this6 = this;

        var ps = Object.keys(this.p2n).filter(function (p) {
            return _this6.isAvailablePos(pos, p);
        });
        if (ps.length > 1) {
            var index = ps.indexOf(pos);
            var targetIndex = void 0;
            if (prev) {
                targetIndex = index === 0 ? ps.length - 1 : index - 1;
            } else {
                targetIndex = index === ps.length - 1 ? 0 : index + 1;
            }

            return this.p2n[ps[targetIndex]].key;
        }

        return null;
    };

    Menu.prototype.getFirstAvaliablelChildKey = function getFirstAvaliablelChildKey(parentPos) {
        var _this7 = this;

        var pos = Object.keys(this.p2n).find(function (p) {
            return _this7.isAvailablePos(parentPos + '-0', p);
        });
        return pos ? this.p2n[pos].key : null;
    };

    Menu.prototype.getParentKey = function getParentKey(pos) {
        return this.p2n[pos.slice(0, pos.length - 2)].key;
    };

    Menu.prototype.handleItemKeyDown = function handleItemKeyDown(key, type, item, e) {
        if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.RIGHT, KEYCODE.LEFT, KEYCODE.ENTER, KEYCODE.ESC, KEYCODE.SPACE].indexOf(e.keyCode) > -1) {
            e.preventDefault();
            e.stopPropagation();
        }

        var focusedKey = this.state.focusedKey;

        var direction = this.props.direction;

        var pos = this.k2n[key].pos;
        var level = pos.split('-').length - 1;
        switch (e.keyCode) {
            case KEYCODE.UP:
                {
                    var avaliableKey = this.getAvailableKey(pos, true);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case KEYCODE.DOWN:
                {
                    var _avaliableKey = void 0;
                    if (direction === 'hoz' && level === 1 && type === 'submenu') {
                        this.handleOpen(key, true);
                        _avaliableKey = this.getFirstAvaliablelChildKey(pos);
                    } else {
                        _avaliableKey = this.getAvailableKey(pos, false);
                    }
                    if (_avaliableKey) {
                        focusedKey = _avaliableKey;
                    }
                    break;
                }
            case KEYCODE.RIGHT:
                {
                    var _avaliableKey2 = void 0;
                    if (direction === 'hoz' && level === 1) {
                        _avaliableKey2 = this.getAvailableKey(pos, false);
                    } else if (type === 'submenu') {
                        this.handleOpen(key, true);
                        _avaliableKey2 = this.getFirstAvaliablelChildKey(pos);
                    }
                    if (_avaliableKey2) {
                        focusedKey = _avaliableKey2;
                    }
                    break;
                }
            case KEYCODE.ENTER:
                {
                    if (type === 'submenu') {
                        this.handleOpen(key, true);
                        var _avaliableKey3 = this.getFirstAvaliablelChildKey(pos);
                        if (_avaliableKey3) {
                            focusedKey = _avaliableKey3;
                        }
                    }
                    break;
                }
            case KEYCODE.LEFT:
                {
                    if (direction === 'hoz' && level === 1) {
                        var _avaliableKey4 = this.getAvailableKey(pos, true);
                        if (_avaliableKey4) {
                            focusedKey = _avaliableKey4;
                        }
                    } else if (level > 1) {
                        var parentKey = this.getParentKey(pos);
                        this.handleOpen(parentKey, false);
                        focusedKey = parentKey;
                    }
                    break;
                }
            case KEYCODE.ESC:
                if (level > 1) {
                    var _parentKey = this.getParentKey(pos);
                    this.handleOpen(_parentKey, false);
                    focusedKey = _parentKey;
                }
                break;

            case KEYCODE.TAB:
                focusedKey = null;
                break;
            default:
                break;
        }

        if (focusedKey !== this.state.focusedKey) {
            if (!('focusedKey' in this.props)) {
                this.setState({
                    focusedKey: focusedKey
                });
            }

            this.props.onItemKeyDown(focusedKey, item, e);
            this.props.onItemFocus(focusedKey, e);
        }
    };

    Menu.prototype.render = function render() {
        var _cx;

        var _props2 = this.props,
            prefix = _props2.prefix,
            className = _props2.className,
            direction = _props2.direction,
            hozAlign = _props2.hozAlign,
            header = _props2.header,
            footer = _props2.footer,
            selectMode = _props2.selectMode,
            rtl = _props2.rtl;

        var others = menu_pickOthers(Object.keys(Menu.propTypes), this.props);

        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'menu'] = true, _cx[prefix + 'ver'] = direction === 'ver', _cx[prefix + 'hoz'] = direction === 'hoz', _cx[className] = !!className, _cx));

        var role = direction === 'hoz' ? 'menubar' : 'menu';
        var headerElement = header ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'li',
            { className: prefix + 'menu-header' },
            header
        ) : null;
        var itemsElement = header || footer ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            { className: prefix + 'menu-content' },
            this.newChildren
        ) : this.newChildren;
        var footerElement = footer ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'li',
            { className: prefix + 'menu-footer' },
            footer
        ) : null;
        var shouldWrapItemsAndFooter = hozAlign === 'right' && !!header;

        if (rtl) {
            others.dir = 'rtl';
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            extends_default()({ role: role, onBlur: this.onBlur, className: newClassName, onKeyDown: this.handleEnter, 'aria-multiselectable': selectMode === 'multiple' }, others),
            headerElement,
            shouldWrapItemsAndFooter ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'menu-hoz-right' },
                itemsElement,
                footerElement
            ) : null,
            !shouldWrapItemsAndFooter ? itemsElement : null,
            !shouldWrapItemsAndFooter ? footerElement : null
        );
    };

    return Menu;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), menu__class.isNextMenu = true, menu__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 菜单项和子菜单
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 点击菜单项触发的回调函数
     * @param {String} key 点击的菜单项的 key 值
     * @param {Object} item 点击的菜单项对象
     * @param {Object} event 点击的事件对象
     */
    onItemClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 当前打开的子菜单的 key 值
     */
    openKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 初始打开的子菜单的 key 值
     */
    defaultOpenKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 初始展开所有的子菜单，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效，优先级高于 defaultOpenKeys
     */
    defaultOpenAll: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 打开或关闭子菜单触发的回调函数
     * @param {String} key 打开的所有子菜单的 key 值
     * @param {Object} extra 额外参数
     * @param {String} extra.key 当前操作子菜单的 key 值
     * @param {Boolean} extra.open 是否是打开
     */
    onOpen: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 子菜单打开的模式
     */
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup']),
    /**
     * 子菜单打开的触发行为
     */
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效
     */
    openMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
    /**
     * 内连子菜单缩进距离
     */
    inlineIndent: _prop_types_15_7_2_prop_types_default.a.number,
    inlineArrowDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['down', 'right']),
    /**
     * 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理
     */
    popupAutoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层的对齐方式
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['follow', 'outside']),
    /**
     * 弹层自定义 props
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 弹出子菜单自定义 className
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹出子菜单自定义 style
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 当前选中菜单项的 key 值
     */
    selectedKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 初始选中菜单项的 key 值
     */
    defaultSelectedKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 选中或取消选中菜单项触发的回调函数
     * @param {Array} selectedKeys 选中的所有菜单项的值
     * @param {Object} item 选中或取消选中的菜单项
     * @param {Object} extra 额外参数
     * @param {Boolean} extra.select 是否是选中
     * @param {Array} extra.key 菜单项的 key
     * @param {Object} extra.label 菜单项的文本
     * @param {Array} extra.keyPath 菜单项 key 的路径
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选中模式，单选还是多选，默认无值，不可选
     */
    selectMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
    /**
     * 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）
     */
    shallowSelect: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分
     */
    hasSelectedIcon: _prop_types_15_7_2_prop_types_default.a.bool,
    labelToggleChecked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 菜单第一层展示方向
     */
    direction: _prop_types_15_7_2_prop_types_default.a.oneOf(['ver', 'hoz']),
    /**
     * 横向菜单条 item 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效
     */
    hozAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
    /**
     * 自定义菜单头部
     */
    header: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自定义菜单尾部
     */
    footer: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否自动获得焦点
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前获得焦点的子菜单或菜单项 key 值
     */
    focusedKey: _prop_types_15_7_2_prop_types_default.a.string,
    focusable: _prop_types_15_7_2_prop_types_default.a.bool,
    onItemFocus: _prop_types_15_7_2_prop_types_default.a.func,
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    onItemKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    expandAnimation: _prop_types_15_7_2_prop_types_default.a.bool,
    itemClassName: _prop_types_15_7_2_prop_types_default.a.string
}, menu__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    defaultOpenKeys: [],
    defaultOpenAll: false,
    onOpen: menu_noop,
    mode: 'inline',
    triggerType: 'click',
    openMode: 'multiple',
    inlineIndent: 20,
    inlineArrowDirection: 'down',
    popupAutoWidth: false,
    popupAlign: 'follow',
    popupProps: {},
    defaultSelectedKeys: [],
    onSelect: menu_noop,
    shallowSelect: false,
    hasSelectedIcon: true,
    labelToggleChecked: true,
    direction: 'ver',
    hozAlign: 'left',
    autoFocus: false,
    focusable: true,
    onItemFocus: menu_noop,
    onItemKeyDown: menu_noop,
    onItemClick: menu_noop,
    expandAnimation: true
}, menu__temp);
menu_Menu.displayName = 'Menu';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/item.js





var view_item__class, view_item__temp;







var item_bindCtx = func.bindCtx;
var item_pickOthers = util_obj.pickOthers;
var view_item_Item = (view_item__temp = view_item__class = function (_Component) {
    inherits_default()(Item, _Component);

    function Item(props) {
        classCallCheck_default()(this, Item);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        item_bindCtx(_this, ['handleClick', 'handleKeyDown']);
        return _this;
    }

    Item.prototype.componentDidMount = function componentDidMount() {
        this.itemNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);

        var _props = this.props,
            parentMode = _props.parentMode,
            root = _props.root,
            menu = _props.menu;

        if (menu) {
            this.menuNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(menu);
        } else if (parentMode === 'popup') {
            this.menuNode = this.itemNode.parentNode;
        } else {
            this.menuNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(root);
            var _root$props = root.props,
                prefix = _root$props.prefix,
                header = _root$props.header,
                footer = _root$props.footer;

            if (header || footer) {
                this.menuNode = this.menuNode.querySelector('.' + prefix + 'menu-content');
            }
        }

        this.setFocus();
    };

    Item.prototype.componentDidUpdate = function componentDidUpdate() {
        this.setFocus();
    };

    Item.prototype.focusable = function focusable() {
        var _props2 = this.props,
            root = _props2.root,
            type = _props2.type,
            disabled = _props2.disabled;
        var focusable = root.props.focusable;

        return focusable && (type === 'submenu' || !disabled);
    };

    Item.prototype.getFocused = function getFocused() {
        var _props3 = this.props,
            _key = _props3._key,
            root = _props3.root;
        var focusedKey = root.state.focusedKey;

        return focusedKey === _key;
    };

    Item.prototype.setFocus = function setFocus() {
        var focused = this.getFocused();
        if (focused) {
            if (this.focusable()) {
                this.itemNode.focus({ preventScroll: true });
            }
            if (this.menuNode && this.menuNode.scrollHeight > this.menuNode.clientHeight) {
                var scrollBottom = this.menuNode.clientHeight + this.menuNode.scrollTop;
                var itemBottom = this.itemNode.offsetTop + this.itemNode.offsetHeight;
                if (itemBottom > scrollBottom) {
                    this.menuNode.scrollTop = itemBottom - this.menuNode.clientHeight;
                } else if (this.itemNode.offsetTop < this.menuNode.scrollTop) {
                    this.menuNode.scrollTop = this.itemNode.offsetTop;
                }
            }
        }
    };

    Item.prototype.handleClick = function handleClick(e) {
        e.stopPropagation();

        var _props4 = this.props,
            _key = _props4._key,
            root = _props4.root,
            disabled = _props4.disabled;


        if (!disabled) {
            root.handleItemClick(_key, this, e);

            this.props.onClick && this.props.onClick(e);
        } else {
            e.preventDefault();
        }
    };

    Item.prototype.handleKeyDown = function handleKeyDown(e) {
        var _props5 = this.props,
            _key = _props5._key,
            root = _props5.root,
            type = _props5.type;


        if (this.focusable()) {
            root.handleItemKeyDown(_key, type, this, e);

            switch (e.keyCode) {
                case KEYCODE.ENTER:
                    {
                        if (!(type === 'submenu')) {
                            this.handleClick(e);
                        }
                        break;
                    }
            }
        }

        this.props.onKeyDown && this.props.onKeyDown(e);
    };

    Item.prototype.getTitle = function getTitle(children) {
        var labelString = '';

        var loop = function loop(children) {
            external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (child) {
                if (Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["isValidElement"])(child) && child.props.children) {
                    loop(child.props.children);
                } else if (typeof child === 'string') {
                    labelString += child;
                }
            });
        };

        loop(children);

        return labelString;
    };

    Item.prototype.render = function render() {
        var _cx;

        var _props6 = this.props,
            level = _props6.level,
            root = _props6.root,
            replaceClassName = _props6.replaceClassName,
            groupIndent = _props6.groupIndent,
            component = _props6.component,
            disabled = _props6.disabled,
            className = _props6.className,
            children = _props6.children,
            needIndent = _props6.needIndent,
            parentMode = _props6.parentMode,
            _key = _props6._key;

        var others = item_pickOthers(Object.keys(Item.propTypes), this.props);

        var _root$props2 = root.props,
            prefix = _root$props2.prefix,
            focusable = _root$props2.focusable,
            inlineIndent = _root$props2.inlineIndent,
            itemClassName = _root$props2.itemClassName,
            rtl = _root$props2.rtl;

        var focused = this.getFocused();

        var newClassName = replaceClassName ? className : _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'menu-item'] = true, _cx[prefix + 'disabled'] = disabled, _cx[prefix + 'focused'] = !focusable && focused, _cx[itemClassName] = !!itemClassName, _cx[className] = !!className, _cx));
        if (disabled) {
            others['aria-disabled'] = true;
        }

        others.tabIndex = root.tabbableKey === _key ? '0' : '-1';

        if (parentMode === 'inline' && level > 1 && inlineIndent > 0 && needIndent) {
            var _extends2;

            var paddingProp = rtl ? 'paddingRight' : 'paddingLeft';
            others.style = extends_default()({}, others.style || {}, (_extends2 = {}, _extends2[paddingProp] = level * inlineIndent - (groupIndent || 0) * 0.4 * inlineIndent + 'px', _extends2));
        }
        var TagName = component;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            TagName,
            extends_default()({ role: 'menuitem',
                title: this.getTitle(children)
            }, others, {
                className: newClassName,
                onClick: this.handleClick,
                onKeyDown: this.handleKeyDown }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'menu-item-inner' },
                children
            )
        );
    };

    return Item;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), view_item__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    level: _prop_types_15_7_2_prop_types_default.a.number,
    groupIndent: _prop_types_15_7_2_prop_types_default.a.number,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    menu: _prop_types_15_7_2_prop_types_default.a.any,
    parent: _prop_types_15_7_2_prop_types_default.a.object,
    parentMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup']),
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['submenu', 'item']),
    component: _prop_types_15_7_2_prop_types_default.a.string,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    needIndent: _prop_types_15_7_2_prop_types_default.a.bool,
    replaceClassName: _prop_types_15_7_2_prop_types_default.a.bool
}, view_item__class.defaultProps = {
    component: 'li',
    groupIndent: 0,
    replaceClassName: false,
    needIndent: true
}, view_item__temp);
view_item_Item.displayName = 'Item';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/selectable-item.js





var selectable_item__class, selectable_item__temp;








var selectable_item_bindCtx = func.bindCtx;
var selectable_item_pickOthers = util_obj.pickOthers;

/**
 * Menu.Item
 * @order 0
 */

var selectable_item_SelectableItem = (selectable_item__temp = selectable_item__class = function (_Component) {
    inherits_default()(SelectableItem, _Component);

    function SelectableItem(props) {
        classCallCheck_default()(this, SelectableItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        selectable_item_bindCtx(_this, ['handleKeyDown', 'handleClick']);
        return _this;
    }

    SelectableItem.prototype.getSelected = function getSelected() {
        var _props = this.props,
            _key = _props._key,
            root = _props.root,
            selected = _props.selected;
        var selectMode = root.props.selectMode;
        var selectedKeys = root.state.selectedKeys;

        return selected || !!selectMode && selectedKeys.indexOf(_key) > -1;
    };

    SelectableItem.prototype.handleSelect = function handleSelect(e) {
        var _props2 = this.props,
            _key = _props2._key,
            root = _props2.root,
            onSelect = _props2.onSelect;

        if (onSelect) {
            onSelect(!this.getSelected(), this, e);
        } else {
            root.handleSelect(_key, !this.getSelected(), this);
        }
    };

    SelectableItem.prototype.handleKeyDown = function handleKeyDown(e) {
        if (e.keyCode === KEYCODE.SPACE && !this.props.disabled) {
            this.handleSelect(e);
        }

        this.props.onKeyDown && this.props.onKeyDown(e);
    };

    SelectableItem.prototype.handleClick = function handleClick(e) {
        this.handleSelect(e);

        this.props.onClick && this.props.onClick(e);
    };

    SelectableItem.prototype.renderSelectedIcon = function renderSelectedIcon(selected) {
        var _props3 = this.props,
            root = _props3.root,
            inlineIndent = _props3.inlineIndent,
            needIndent = _props3.needIndent,
            hasSelectedIcon = _props3.hasSelectedIcon;
        var _root$props = root.props,
            prefix = _root$props.prefix,
            rootSelectedIcon = _root$props.hasSelectedIcon;


        return ('hasSelectedIcon' in this.props ? hasSelectedIcon : rootSelectedIcon) && selected ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { style: needIndent && inlineIndent > 0 ? { left: inlineIndent + 'px' } : null, className: prefix + 'menu-icon-selected', type: 'select' }) : null;
    };

    SelectableItem.prototype.render = function render() {
        var _cx;

        var _props4 = this.props,
            _key = _props4._key,
            root = _props4.root,
            className = _props4.className,
            disabled = _props4.disabled,
            helper = _props4.helper,
            children = _props4.children,
            needIndent = _props4.needIndent;
        var prefix = root.props.prefix;

        var others = selectable_item_pickOthers(Object.keys(SelectableItem.propTypes), this.props);
        var selected = this.getSelected();

        var newProps = extends_default()({
            _key: _key,
            root: root,
            disabled: disabled,
            type: 'item',
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'selected'] = selected, _cx[className] = !!className, _cx)),
            onKeyDown: this.handleKeyDown,
            onClick: !disabled ? this.handleClick : this.props.onClick,
            needIndent: needIndent,
            'aria-selected': selected
        }, others);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            view_item_Item,
            newProps,
            this.renderSelectedIcon(selected),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'menu-item-text' },
                children
            ),
            helper ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'menu-item-helper' },
                helper
            ) : null
        );
    };

    return SelectableItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), selectable_item__class.menuChildType = 'item', selectable_item__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    selected: _prop_types_15_7_2_prop_types_default.a.bool,
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    inlineIndent: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 帮助文本
     */
    helper: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 菜单项标签内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    needIndent: _prop_types_15_7_2_prop_types_default.a.bool,
    hasSelectedIcon: _prop_types_15_7_2_prop_types_default.a.bool
}, selectable_item__class.defaultProps = {
    disabled: false,
    needIndent: true
}, selectable_item__temp);
selectable_item_SelectableItem.displayName = 'SelectableItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/popup-item.js





var popup_item__class, popup_item__temp;











var popup_item_bindCtx = func.bindCtx;
var popup_item_setStyle = dom.setStyle;

var popup_item_Popup = es_overlay.Popup;

/**
 * Menu.PopupItem
 * @order 2
 */
var popup_item_PopupItem = (popup_item__temp = popup_item__class = function (_Component) {
    inherits_default()(PopupItem, _Component);

    function PopupItem(props) {
        classCallCheck_default()(this, PopupItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        popup_item_bindCtx(_this, ['handleOpen', 'handlePopupOpen', 'handlePopupClose', 'getPopup']);
        return _this;
    }

    PopupItem.prototype.getPopup = function getPopup(ref) {
        this.popup = ref;
    };

    PopupItem.prototype.getOpen = function getOpen() {
        var _props = this.props,
            _key = _props._key,
            root = _props.root;
        var openKeys = root.state.openKeys;


        return openKeys.indexOf(_key) > -1;
    };

    PopupItem.prototype.getPopupProps = function getPopupProps() {
        var popupProps = this.props.root.props.popupProps;

        if (typeof popupProps === 'function') {
            popupProps = popupProps(this.props);
        }
        return popupProps;
    };

    PopupItem.prototype.handleOpen = function handleOpen(open, triggerType, e) {
        var _props2 = this.props,
            _key = _props2._key,
            root = _props2.root;

        root.handleOpen(_key, open, triggerType, e);

        var popupProps = this.popupProps;
        popupProps.onVisibleChange && popupProps.onVisibleChange(open, triggerType, e);
    };

    PopupItem.prototype.handlePopupOpen = function handlePopupOpen() {
        var _props3 = this.props,
            root = _props3.root,
            level = _props3.level,
            align = _props3.align,
            autoWidth = _props3.autoWidth;
        var _root$props = root.props,
            rootPopupAutoWidth = _root$props.popupAutoWidth,
            rootPopupAlign = _root$props.popupAlign,
            direction = _root$props.direction;

        var popupAlign = align || rootPopupAlign;
        var popupAutoWidth = 'autoWidth' in this.props ? autoWidth : rootPopupAutoWidth;
        var itemNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
        var menuNode = itemNode.parentNode;
        this.popupNode = this.popup.getInstance().overlay.getInstance().getContentNode();
        root.popupNodes.push(this.popupNode);

        if (popupAutoWidth) {
            var targetNode = direction === 'hoz' && level === 1 ? itemNode : menuNode;

            if (targetNode.offsetWidth > this.popupNode.offsetWidth) {
                popup_item_setStyle(this.popupNode, 'width', targetNode.offsetWidth + 'px');
            }
        }
        if (popupAlign === 'outside' && !(direction === 'hoz' && level === 1)) {
            popup_item_setStyle(this.popupNode, 'height', menuNode.offsetHeight + 'px');
            popup_item_setStyle(this.popupNode, 'overflow-y', 'scroll');
        }
        // removeClass(this.popupNode, `${prefix}hide`);

        var popupProps = this.popupProps;
        popupProps.onOpen && popupProps.onOpen();
    };

    PopupItem.prototype.handlePopupClose = function handlePopupClose() {
        var root = this.props.root;

        var popupNodes = root.popupNodes;
        var index = popupNodes.indexOf(this.popupNode);
        index > -1 && popupNodes.splice(index, 1);

        var popupProps = this.popupProps;
        popupProps.onClose && popupProps.onClose();
    };

    PopupItem.prototype.renderItem = function renderItem(selectable, children, others) {
        var _props4 = this.props,
            _key = _props4._key,
            root = _props4.root,
            level = _props4.level,
            label = _props4.label,
            className = _props4.className;
        var prefix = root.props.prefix;

        var NewItem = selectable ? selectable_item_SelectableItem : view_item_Item;
        var open = this.getOpen();

        var itemProps = {
            'aria-haspopup': true,
            'aria-expanded': open,
            _key: _key,
            root: root,
            level: level,
            type: 'submenu'
        };
        if (open) {
            var _cx;

            itemProps.className = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'opened'] = true, _cx[className] = !!className, _cx));
        } else {
            itemProps.className = className;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            NewItem,
            extends_default()({}, itemProps, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'menu-item-text' },
                label
            ),
            children
        );
    };

    PopupItem.prototype.renderPopup = function renderPopup(trigger, triggerType, positionProps, children) {
        var _this2 = this;

        var _props5 = this.props,
            root = _props5.root,
            level = _props5.level,
            selectable = _props5.selectable;
        var direction = root.props.direction;

        this.popupProps = this.getPopupProps();
        var open = this.getOpen();

        if (direction === 'hoz' && level === 1 && selectable) {
            positionProps.target = function () {
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(_this2);
            };
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            popup_item_Popup,
            extends_default()({ ref: this.getPopup
            }, positionProps, this.popupProps, {
                canCloseByEsc: false,
                trigger: trigger,
                triggerType: triggerType,
                visible: open,
                onVisibleChange: this.handleOpen,
                onOpen: this.handlePopupOpen,
                onClose: this.handlePopupClose }),
            children
        );
    };

    PopupItem.prototype.render = function render() {
        var _this3 = this;

        var _props6 = this.props,
            root = _props6.root,
            level = _props6.level,
            hasSubMenu = _props6.hasSubMenu,
            selectableFromProps = _props6.selectable,
            children = _props6.children,
            triggerType = _props6.triggerType,
            align = _props6.align,
            rtl = _props6.rtl;

        var others = util_obj.pickOthers(Object.keys(PopupItem.propTypes), this.props);
        var _root$props2 = root.props,
            prefix = _root$props2.prefix,
            selectMode = _root$props2.selectMode,
            direction = _root$props2.direction,
            rootPopupAlign = _root$props2.popupAlign,
            rootTriggerType = _root$props2.triggerType;

        var popupAlign = align || rootPopupAlign;
        var newTriggerType = triggerType || (hasSubMenu ? rootTriggerType : 'hover');
        var newChildren = Array.isArray(children) ? children[0] : children;
        // let newChildren = Array.isArray(children) ? children[0] : children;
        // newChildren = cloneElement(newChildren, {
        //     className: cx({
        //         [`${prefix}menu-popup-content`]: true,
        //         [newChildren.props.className]: !!newChildren.props.className,
        //         [`${prefix}hide`]: popupAutoWidth || popupAlign === 'outside'
        //     })
        // });
        var selectable = selectMode && selectableFromProps;
        var triggerIsIcon = selectable && newTriggerType === 'click';
        var open = this.getOpen();

        var positionProps = {};
        var arrowProps = void 0;

        if (direction === 'hoz' && level === 1) {
            var _cx2;

            positionProps.align = 'tl bl';
            positionProps.offset = [0, 0];

            arrowProps = {
                type: 'arrow-down',
                className: _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'menu-hoz-icon-arrow'] = true, _cx2[prefix + 'open'] = open, _cx2))
            };
        } else {
            if (popupAlign === 'outside') {
                positionProps.target = function () {
                    return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(root);
                };
                positionProps.align = 'tl tr';

                rtl ? positionProps.offset = [-2, 0] : positionProps.offset = [2, 0];
            } else {
                if (triggerIsIcon) {
                    positionProps.target = function () {
                        return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(_this3);
                    };
                }
                positionProps.align = 'tl tr';

                rtl ? positionProps.offset = [2, -8] : positionProps.offset = [-2, -8];
            }

            arrowProps = {
                type: 'arrow-right',
                className: prefix + 'menu-icon-arrow'
            };
        }

        var arrow = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, arrowProps);
        var trigger = triggerIsIcon ? arrow : this.renderItem(selectable, arrow, others);
        var popup = this.renderPopup(trigger, newTriggerType, positionProps, newChildren);
        return triggerIsIcon ? this.renderItem(selectable, popup, others) : popup;
    };

    return PopupItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), popup_item__class.menuChildType = 'submenu', popup_item__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    level: _prop_types_15_7_2_prop_types_default.a.number,
    hasSubMenu: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    selectable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自定义弹层内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['outside', 'follow']),
    autoWidth: _prop_types_15_7_2_prop_types_default.a.bool
}, popup_item__class.defaultProps = {
    selectable: false
}, popup_item__temp);
popup_item_PopupItem.displayName = 'PopupItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/sub-menu.js






var sub_menu__class, sub_menu__temp;












var sub_menu_Expand = es_animate.Expand;
var sub_menu_bindCtx = func.bindCtx;

/**
 * Menu.SubMenu
 * @order 1
 */

var sub_menu_SubMenu = (sub_menu__temp = sub_menu__class = function (_Component) {
    inherits_default()(SubMenu, _Component);

    function SubMenu(props) {
        classCallCheck_default()(this, SubMenu);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        sub_menu_bindCtx(_this, ['handleMouseEnter', 'handleMouseLeave', 'handleClick', 'handleOpen', 'afterLeave']);
        return _this;
    }

    SubMenu.prototype.componentDidMount = function componentDidMount() {
        this.itemNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
    };

    SubMenu.prototype.afterLeave = function afterLeave() {
        var _props = this.props,
            focused = _props.focused,
            root = _props.root;
        var focusable = root.props.focusable;

        if (focusable && focused) {
            this.itemNode.focus();
        }
    };

    SubMenu.prototype.getOpen = function getOpen() {
        var _props2 = this.props,
            _key = _props2._key,
            root = _props2.root;
        var openKeys = root.state.openKeys;


        return openKeys.indexOf(_key) > -1;
    };

    SubMenu.prototype.handleMouseEnter = function handleMouseEnter(e) {
        this.handleOpen(true);

        this.props.onMouseEnter && this.props.onMouseEnter(e);
    };

    SubMenu.prototype.handleMouseLeave = function handleMouseLeave(e) {
        this.handleOpen(false);

        this.props.onMouseLeave && this.props.onMouseLeave(e);
    };

    SubMenu.prototype.handleClick = function handleClick(e) {
        var _props3 = this.props,
            root = _props3.root,
            selectable = _props3.selectable;
        var selectMode = root.props.selectMode;

        if (selectMode && selectable) {
            e.stopPropagation();
        }

        var open = this.getOpen();
        this.handleOpen(!open);
    };

    SubMenu.prototype.handleOpen = function handleOpen(open, triggerType, e) {
        var _props4 = this.props,
            _key = _props4._key,
            root = _props4.root;

        root.handleOpen(_key, open, triggerType, e);
    };

    SubMenu.prototype.passParentToChildren = function passParentToChildren(children) {
        var _this2 = this;

        var _props5 = this.props,
            mode = _props5.mode,
            root = _props5.root;


        return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child) {
            return Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, {
                parent: _this2,
                parentMode: mode || root.props.mode
            });
        });
    };

    SubMenu.prototype.renderInline = function renderInline() {
        var _cx, _cx2, _cx3;

        var _props6 = this.props,
            _key = _props6._key,
            level = _props6.level,
            root = _props6.root,
            className = _props6.className,
            selectableFromProps = _props6.selectable,
            label = _props6.label,
            children = _props6.children,
            subMenuContentClassName = _props6.subMenuContentClassName,
            propsTriggerType = _props6.triggerType,
            parentMode = _props6.parentMode;
        var _root$props = root.props,
            prefix = _root$props.prefix,
            selectMode = _root$props.selectMode,
            rootTriggerType = _root$props.triggerType,
            inlineArrowDirection = _root$props.inlineArrowDirection,
            expandAnimation = _root$props.expandAnimation,
            rtl = _root$props.rtl;

        var triggerType = propsTriggerType || rootTriggerType;
        var open = this.getOpen();
        var others = util_obj.pickOthers(Object.keys(SubMenu.propTypes), this.props);

        var liProps = {
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'menu-sub-menu-wrapper'] = true, _cx[className] = !!className, _cx))
        };
        var itemProps = {
            'aria-expanded': open,
            _key: _key,
            level: level,
            root: root,
            type: 'submenu',
            component: 'div',
            parentMode: parentMode
        };
        var arrorProps = {
            type: inlineArrowDirection === 'right' ? 'arrow-right' : 'arrow-down',
            className: _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'menu-icon-arrow'] = true, _cx2[prefix + 'menu-icon-arrow-down'] = inlineArrowDirection === 'down', _cx2[prefix + 'menu-icon-arrow-right'] = inlineArrowDirection === 'right', _cx2[prefix + 'open'] = open, _cx2))
        };

        var selectable = !!selectMode && selectableFromProps;
        var NewItem = selectable ? selectable_item_SelectableItem : view_item_Item;

        if (triggerType === 'hover') {
            liProps.onMouseEnter = this.handleMouseEnter;
            liProps.onMouseLeave = this.handleMouseLeave;
        } else if (selectable) {
            arrorProps.onClick = this.handleClick;
        } else {
            itemProps.onClick = this.handleClick;
        }
        if (open) {
            itemProps.className = prefix + 'opened';
        }

        var newSubMenuContentClassName = _classnames_2_2_6_classnames_default()((_cx3 = {}, _cx3[prefix + 'menu-sub-menu'] = true, _cx3[subMenuContentClassName] = !!subMenuContentClassName, _cx3));

        var subMenu = open ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            { role: 'menu', dir: rtl ? 'rtl' : undefined, ref: 'subMenu', className: newSubMenuContentClassName },
            this.passParentToChildren(children)
        ) : null;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'li',
            extends_default()({}, others, liProps),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                NewItem,
                itemProps,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefix + 'menu-item-text' },
                    label
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, arrorProps)
            ),
            expandAnimation ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                sub_menu_Expand,
                { animationAppear: false, afterLeave: this.afterLeave },
                subMenu
            ) : subMenu
        );
    };

    SubMenu.prototype.renderPopup = function renderPopup() {
        var _cx4;

        var _props7 = this.props,
            children = _props7.children,
            subMenuContentClassName = _props7.subMenuContentClassName,
            others = objectWithoutProperties_default()(_props7, ['children', 'subMenuContentClassName']);

        var root = this.props.root;
        var _root$props2 = root.props,
            prefix = _root$props2.prefix,
            popupClassName = _root$props2.popupClassName,
            popupStyle = _root$props2.popupStyle,
            rtl = _root$props2.rtl;


        var newClassName = _classnames_2_2_6_classnames_default()((_cx4 = {}, _cx4[prefix + 'menu'] = true, _cx4[prefix + 'ver'] = true, _cx4[popupClassName] = !!popupClassName, _cx4[subMenuContentClassName] = !!subMenuContentClassName, _cx4));

        others.rtl = rtl;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            popup_item_PopupItem,
            extends_default()({}, others, { hasSubMenu: true }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'ul',
                { role: 'menu', dir: rtl ? 'rtl' : undefined, className: newClassName, style: popupStyle },
                this.passParentToChildren(children)
            )
        );
    };

    SubMenu.prototype.render = function render() {
        var _props8 = this.props,
            mode = _props8.mode,
            root = _props8.root;

        var newMode = mode || root.props.mode;

        return newMode === 'popup' ? this.renderPopup() : this.renderInline();
    };

    return SubMenu;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), sub_menu__class.menuChildType = 'submenu', sub_menu__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    level: _prop_types_15_7_2_prop_types_default.a.number,
    groupIndent: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效
     */
    selectable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性
     * @default Menu 的 mode 属性值
     */
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup']),
    /**
     * 菜单项或下一级子菜单
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    subMenuContentClassName: _prop_types_15_7_2_prop_types_default.a.string,
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['outside', 'follow']),
    parentMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup'])
}, sub_menu__class.defaultProps = {
    groupIndent: 0,
    selectable: false
}, sub_menu__temp);
sub_menu_SubMenu.displayName = 'SubMenu';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/mixin-ui-state/index.js







var mixin_ui_state_makeChain = func.makeChain;
// UIState 为一些特殊元素的状态响应提供了标准的方式，
// 尤其适合CSS无法完全定制的控件，比如checkbox，radio等。
// 若组件 disable 则自行判断是否需要绑定状态管理。
// 注意：disable 不会触发事件，请使用resetUIState还原状态
/* eslint-disable react/prop-types */

var mixin_ui_state_UIState = function (_Component) {
    inherits_default()(UIState, _Component);

    function UIState(props) {
        classCallCheck_default()(this, UIState);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {};
        ['_onUIFocus', '_onUIBlur'].forEach(function (item) {
            _this[item] = _this[item].bind(_this);
        });
        return _this;
    }
    // base 事件绑定的元素


    UIState.prototype.getStateElement = function getStateElement(base) {
        var _props = this.props,
            onFocus = _props.onFocus,
            onBlur = _props.onBlur;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(base, {
            onFocus: mixin_ui_state_makeChain(this._onUIFocus, onFocus),
            onBlur: mixin_ui_state_makeChain(this._onUIBlur, onBlur)
        });
    };
    // 获取状态classname


    UIState.prototype.getStateClassName = function getStateClassName() {
        var focused = this.state.focused;

        return _classnames_2_2_6_classnames_default()({
            focused: focused
        });
    };
    // 复原状态


    UIState.prototype.resetUIState = function resetUIState() {
        this.setState({
            focused: false
        });
    };

    UIState.prototype._onUIFocus = function _onUIFocus() {
        this.setState({
            focused: true
        });
    };

    UIState.prototype._onUIBlur = function _onUIBlur() {
        this.setState({
            focused: false
        });
    };

    return UIState;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]);

mixin_ui_state_UIState.displayName = 'UIState';


/* harmony default export */ var mixin_ui_state = (mixin_ui_state_UIState);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/checkbox/checkbox.js






var checkbox__class, checkbox__temp;









var checkbox_noop = func.noop;
function checkbox_isChecked(selectedValue, value) {
    return selectedValue.indexOf(value) > -1;
}
/**
 * Checkbox
 * @order 1
 */
var checkbox_Checkbox = (checkbox__temp = checkbox__class = function (_UIState) {
    inherits_default()(Checkbox, _UIState);

    function Checkbox(props, context) {
        classCallCheck_default()(this, Checkbox);

        var _this = possibleConstructorReturn_default()(this, _UIState.call(this, props));

        var checked = void 0,
            indeterminate = void 0;

        if ('checked' in props) {
            checked = props.checked;
        } else {
            checked = props.defaultChecked;
        }

        if ('indeterminate' in props) {
            indeterminate = props.indeterminate;
        } else {
            indeterminate = props.defaultIndeterminate;
        }
        if (context.__group__) {
            checked = checkbox_isChecked(context.selectedValue, props.value);
        }
        _this.state = {
            checked: checked,
            indeterminate: indeterminate
        };

        _this.disabled = props.disabled || context.__group__ && 'disabled' in context && context.disabled;
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }

    Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
        if (nextContext.__group__) {
            if ('selectedValue' in nextContext) {
                this.setState({
                    checked: checkbox_isChecked(nextContext.selectedValue, nextProps.value)
                });
            }
            this.disabled = nextProps.disabled || 'disabled' in nextContext && nextContext.disabled;
        } else {
            if ('checked' in nextProps) {
                this.setState({
                    checked: nextProps.checked
                });
            }
            if ('indeterminate' in nextProps) {
                this.setState({
                    indeterminate: nextProps.indeterminate
                });
            }
            this.disabled = nextProps.disabled;
        }
    };

    Checkbox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {
        var shallowEqual = util_obj.shallowEqual;

        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);
    };

    Checkbox.prototype.onChange = function onChange(e) {
        var checked = e.target.checked;
        var value = this.props.value;
        if (this.disabled) {
            return;
        }
        if (this.context.__group__) {
            this.context.onChange(value, e);
        } else {
            if (!('checked' in this.props)) {
                this.setState({
                    checked: checked
                });
            }

            if (!('indeterminate' in this.props)) {
                this.setState({
                    indeterminate: false
                });
            }
            this.props.onChange(checked, e);
        }
    };

    Checkbox.prototype.render = function render() {
        var _classnames;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            id = _props.id,
            className = _props.className,
            children = _props.children,
            style = _props.style,
            label = _props.label,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            rtl = _props.rtl,
            otherProps = objectWithoutProperties_default()(_props, ['id', 'className', 'children', 'style', 'label', 'onMouseEnter', 'onMouseLeave', 'rtl']);

        var checked = !!this.state.checked;
        var disabled = this.disabled;
        var indeterminate = !!this.state.indeterminate;
        var prefix = this.context.prefix || this.props.prefix;

        var others = util_obj.pickOthers(Checkbox.propTypes, otherProps);
        var othersData = util_obj.pickAttrsWith(others, 'data-');

        var childInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', extends_default()({}, util_obj.pickOthers(Checkbox.propTypes, otherProps), {
            id: id,
            disabled: disabled,
            checked: checked,
            type: 'checkbox',
            onChange: this.onChange,
            'aria-checked': indeterminate ? 'mixed' : checked,
            className: prefix + 'checkbox-input'
        }));

        // disable 无状态操作
        if (!disabled) {
            childInput = this.getStateElement(childInput);
        }
        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'checkbox-wrapper'] = true, _classnames[className] = !!className, _classnames.checked = checked, _classnames.disabled = disabled, _classnames.indeterminate = indeterminate, _classnames[this.getStateClassName()] = true, _classnames));
        var labelCls = prefix + 'checkbox-label';
        var type = indeterminate ? 'semi-select' : 'select';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'label',
            extends_default()({}, othersData, {
                className: cls,
                style: style,
                onMouseEnter: onMouseEnter,
                onMouseLeave: onMouseLeave
            }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'checkbox' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefix + 'checkbox-inner' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: type, size: 'xs', className: indeterminate ? 'zoomIn' : '' })
                ),
                childInput
            ),
            [label, children].map(function (item, i) {
                return item ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { key: i, className: labelCls },
                    item
                ) : null;
            })
        );
    };

    return Checkbox;
}(mixin_ui_state), checkbox__class.displayName = 'Checkbox', checkbox__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * checkbox id, 挂载在input上
     */
    id: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 选中状态
     */
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 默认选中状态
     */
    defaultChecked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 通过属性配置label，
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性
     */
    indeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     *  Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性
     */
    defaultIndeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 状态变化时触发的事件
     * @param {Boolean} checked 是否选中
     * @param {Event} e Dom 事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 鼠标进入enter事件
     * @param {Event} e Dom 事件对象
     */
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 鼠标离开Leave事件
     * @param {Event} e Dom 事件对象
     */
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func
}, checkbox__class.defaultProps = {
    defaultChecked: false,
    defaultIndeterminate: false,
    onChange: checkbox_noop,
    onMouseEnter: checkbox_noop,
    onMouseLeave: checkbox_noop,
    prefix: 'next-'
}, checkbox__class.contextTypes = {
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    __group__: _prop_types_15_7_2_prop_types_default.a.bool,
    selectedValue: _prop_types_15_7_2_prop_types_default.a.array,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, checkbox__temp);


/* harmony default export */ var checkbox_checkbox = (config_provider.config(checkbox_Checkbox));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/checkbox/checkbox-group.js






var checkbox_group__class, checkbox_group__temp;








var checkbox_group_pickOthers = util_obj.pickOthers;

/** Checkbox.Group */

var checkbox_group_CheckboxGroup = (checkbox_group__temp = checkbox_group__class = function (_Component) {
    inherits_default()(CheckboxGroup, _Component);

    function CheckboxGroup(props) {
        classCallCheck_default()(this, CheckboxGroup);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        var value = [];
        if ('value' in props) {
            value = props.value;
        } else if ('defaultValue' in props) {
            value = props.defaultValue;
        }
        if (!Array.isArray(value)) {
            if (value === null || value === undefined) {
                value = [];
            } else {
                value = [value];
            }
        }
        _this.state = {
            value: [].concat(value)
        };

        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }

    CheckboxGroup.prototype.getChildContext = function getChildContext() {
        return {
            __group__: true,
            onChange: this.onChange,
            selectedValue: this.state.value,
            disabled: this.props.disabled
        };
    };

    CheckboxGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = nextProps.value;

            if (!Array.isArray(value)) {
                if (value === null || value === undefined) {
                    value = [];
                } else {
                    value = [value];
                }
            }
            this.setState({
                value: value
            });
        }
    };

    CheckboxGroup.prototype.onChange = function onChange(currentValue, e) {
        var value = this.state.value;

        var index = value.indexOf(currentValue);
        var valTemp = [].concat(value);

        if (index === -1) {
            valTemp.push(currentValue);
        } else {
            valTemp.splice(index, 1);
        }

        if (!('value' in this.props)) {
            this.setState({ value: valTemp });
        }
        this.props.onChange(valTemp, e);
    };

    CheckboxGroup.prototype.render = function render() {
        var _this2 = this,
            _classnames;

        var _props = this.props,
            className = _props.className,
            style = _props.style,
            prefix = _props.prefix,
            disabled = _props.disabled,
            itemDirection = _props.itemDirection;

        var others = checkbox_group_pickOthers(CheckboxGroup.propTypes, this.props);

        // 如果内嵌标签跟dataSource同时存在，以内嵌标签为主
        var children = void 0;
        if (this.props.children) {
            children = this.props.children;
        } else {
            children = this.props.dataSource.map(function (item, index) {
                var option = item;
                if ((typeof item === 'undefined' ? 'undefined' : typeof_default()(item)) !== 'object') {
                    option = {
                        label: item,
                        value: item,
                        disabled: disabled
                    };
                }
                var checked = _this2.state.value && _this2.state.value.indexOf(option.value) > -1;

                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(checkbox_checkbox, { key: index,
                    value: option.value,
                    checked: checked,
                    disabled: disabled || option.disabled,
                    label: option.label
                });
            });
        }

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'checkbox-group'] = true, _classnames[prefix + 'checkbox-group-' + itemDirection] = true, _classnames[className] = !!className, _classnames.disabled = disabled, _classnames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({}, others, { className: cls, style: style }),
            children
        );
    };

    return CheckboxGroup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), checkbox_group__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 整体禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.any),
    /**
     * 被选中的值列表
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.array, _prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 默认被选中的值列表
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.array, _prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 通过子元素方式设置内部 checkbox
     */
    children: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.element),
    /**
     * 选中值改变时的事件
     * @param {Array} value 选中项列表
     * @param {Event} e Dom 事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,

    /**
     * 子项目的排列方式
     * - hoz: 水平排列 (default)
     * - ver: 垂直排列
     */
    itemDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver'])
}, checkbox_group__class.defaultProps = {
    dataSource: [],
    onChange: function onChange() {},
    prefix: 'next-',
    itemDirection: 'hoz'
}, checkbox_group__class.childContextTypes = {
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    __group__: _prop_types_15_7_2_prop_types_default.a.bool,
    selectedValue: _prop_types_15_7_2_prop_types_default.a.array,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool
}, checkbox_group__temp);
checkbox_group_CheckboxGroup.displayName = 'CheckboxGroup';


/* harmony default export */ var checkbox_group = (config_provider.config(checkbox_group_CheckboxGroup));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/checkbox/index.js



checkbox_checkbox.Group = checkbox_group;

/* harmony default export */ var es_checkbox = (checkbox_checkbox);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/radio/radio.js






var radio__class, radio__temp;








var radio_makeChain = func.makeChain,
    radio_noop = func.noop;
/**
 * Radio
 * @order 1
 */

var radio_Radio = (radio__temp = radio__class = function (_UIState) {
    inherits_default()(Radio, _UIState);

    function Radio(props, context) {
        classCallCheck_default()(this, Radio);

        var _this = possibleConstructorReturn_default()(this, _UIState.call(this, props));

        var checked = void 0;
        if (context.__group__) {
            checked = context.selectedValue === props.value;
        } else if ('checked' in props) {
            checked = props.checked;
        } else {
            checked = props.defaultChecked;
        }

        _this.state = { checked: checked };

        _this.onChange = _this.onChange.bind(_this);
        _this.disabled = props.disabled || context.__group__ && 'disabled' in context && context.disabled;

        return _this;
    }

    Radio.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
        if (nextContext.__group__) {
            var selectedValue = nextContext.selectedValue;

            if ('selectedValue' in nextContext) {
                this.setState({
                    checked: selectedValue === nextProps.value
                });
            }
        } else if ('checked' in nextProps) {
            this.setState({
                checked: nextProps.checked
            });
        }

        this.disabled = nextProps.disabled || nextContext.__group__ && 'disabled' in nextContext && nextContext.disabled;

        // when disabled, reset UIState
        if (this.disabled) {
            // only class has an impact, no effect on visual
            this.resetUIState();
        }
    };

    Radio.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {
        var shallowEqual = util_obj.shallowEqual;

        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.nextContext, nextContext);
    };

    Radio.prototype.onChange = function onChange(e) {
        var checked = e.target.checked;
        var value = this.props.value;

        if (this.context.__group__) {
            this.context.onChange(value, e);
        } else if (this.state.checked !== checked) {
            if (!('checked' in this.props)) {
                this.setState({
                    checked: checked
                });
            }
            this.props.onChange(checked, e);
        }
    };

    Radio.prototype.render = function render() {
        var _classnames, _classnames2, _classnames3;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            id = _props.id,
            className = _props.className,
            children = _props.children,
            style = _props.style,
            label = _props.label,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            tabIndex = _props.tabIndex,
            rtl = _props.rtl,
            name = _props.name,
            otherProps = objectWithoutProperties_default()(_props, ['id', 'className', 'children', 'style', 'label', 'onMouseEnter', 'onMouseLeave', 'tabIndex', 'rtl', 'name']);

        var checked = !!this.state.checked;
        var disabled = this.disabled;
        var isButton = this.context.isButton;
        var prefix = this.context.prefix || this.props.prefix;

        var others = util_obj.pickOthers(Radio.propTypes, otherProps);
        var othersData = util_obj.pickAttrsWith(others, 'data-');

        var input = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', extends_default()({}, util_obj.pickOthers(othersData, others), {
            name: name,
            id: id,
            role: 'radio',
            tabIndex: tabIndex,
            disabled: disabled,
            checked: checked,
            type: 'radio',
            onChange: this.onChange,
            'aria-checked': checked,
            className: prefix + 'radio-input'
        }));

        // disabled do not hove focus state
        if (!disabled) {
            input = this.getStateElement(input);
        }

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'radio'] = true, _classnames.checked = checked, _classnames.disabled = disabled, _classnames[this.getStateClassName()] = true, _classnames));
        var clsInner = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'radio-inner'] = true, _classnames2.press = checked, _classnames2.unpress = !checked, _classnames2));
        var clsWrapper = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'radio-wrapper'] = true, _classnames3[className] = !!className, _classnames3.checked = checked, _classnames3.disabled = disabled, _classnames3[this.getStateClassName()] = true, _classnames3));
        var childrenCls = prefix + 'radio-label';

        var radioComp = !isButton ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: cls },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: clsInner }),
            input
        ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'radio-single-input' },
            input
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'label',
            extends_default()({}, othersData, {
                dir: rtl ? 'rtl' : 'ltr',
                style: style,
                'aria-checked': checked,
                'aria-disabled': disabled,
                className: clsWrapper,
                onMouseEnter: disabled ? onMouseEnter : radio_makeChain(this._onUIMouseEnter, onMouseEnter),
                onMouseLeave: disabled ? onMouseLeave : radio_makeChain(this._onUIMouseLeave, onMouseLeave)
            }),
            radioComp,
            [children, label].map(function (d, i) {
                return d !== undefined ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { key: i, className: childrenCls },
                    d
                ) : null;
            })
        );
    };

    return Radio;
}(mixin_ui_state), radio__class.displayName = 'Radio', radio__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 组件input的id
     */
    id: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 设置radio是否选中
     */
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 设置radio是否默认选中
     */
    defaultChecked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 通过属性配置label
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 状态变化时触发的事件
     * @param {Boolean} checked 是否选中
     * @param {Event} e Dom 事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 鼠标进入enter事件
     * @param {Event} e Dom 事件对象
     */
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 鼠标离开事件
     * @param {Event} e Dom 事件对象
     */
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * radio是否被禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * radio 的value
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * name
     */
    name: _prop_types_15_7_2_prop_types_default.a.string
}, radio__class.defaultProps = {
    onChange: radio_noop,
    onMouseLeave: radio_noop,
    onMouseEnter: radio_noop,
    tabIndex: 0,
    prefix: 'next-'
}, radio__class.contextTypes = {
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    __group__: _prop_types_15_7_2_prop_types_default.a.bool,
    isButton: _prop_types_15_7_2_prop_types_default.a.bool,
    selectedValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.bool]),
    disabled: _prop_types_15_7_2_prop_types_default.a.bool
}, radio__temp);


/* harmony default export */ var radio_radio = (config_provider.config(radio_Radio));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/radio/radio-group.js






var radio_group__class, radio_group__temp;








var radio_group_pickOthers = util_obj.pickOthers;

/**
 * Radio.Group
 * @order 2
 */

var radio_group_RadioGroup = (radio_group__temp = radio_group__class = function (_Component) {
    inherits_default()(RadioGroup, _Component);

    function RadioGroup(props) {
        classCallCheck_default()(this, RadioGroup);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        var value = '';
        if ('value' in props) {
            value = props.value;
        } else if ('defaultValue' in props) {
            value = props.defaultValue;
        }
        _this.state = { value: value };
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }

    RadioGroup.prototype.getChildContext = function getChildContext() {
        return {
            __group__: true,
            isButton: this.props.shape === 'button',
            onChange: this.onChange,
            selectedValue: this.state.value,
            disabled: this.props.disabled
        };
    };

    RadioGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var value = nextProps.value;

        if ('value' in nextProps) {
            if (value === undefined) {
                value = '';
            }
            this.setState({
                value: value
            });
        }
    };

    RadioGroup.prototype.onChange = function onChange(currentValue, e) {
        if (!('value' in this.props)) {
            this.setState({ value: currentValue });
        }
        if (currentValue !== this.state.value) {
            this.props.onChange(currentValue, e);
        }
    };

    RadioGroup.prototype.render = function render() {
        var _this2 = this,
            _classnames;

        var _props = this.props,
            rtl = _props.rtl,
            className = _props.className,
            disabled = _props.disabled,
            shape = _props.shape,
            size = _props.size,
            style = _props.style,
            prefix = _props.prefix,
            itemDirection = _props.itemDirection,
            component = _props.component;

        var others = radio_group_pickOthers(Object.keys(RadioGroup.propTypes), this.props);

        if (rtl) {
            others.dir = 'rtl';
        }

        var children = void 0;
        if (this.props.children) {
            children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.map(this.props.children, function (child, index) {
                if (!external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(child)) {
                    return child;
                }
                var checked = _this2.state.value === child.props.value;
                var tabIndex = index === 0 && !_this2.state.value || checked ? 0 : -1;
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, child.props.tabIndex === undefined ? {
                    checked: checked,
                    tabIndex: tabIndex
                } : { checked: checked });
            });
        } else {
            children = this.props.dataSource.map(function (item, index) {
                var option = item;
                if ((typeof item === 'undefined' ? 'undefined' : typeof_default()(item)) !== 'object') {
                    option = {
                        label: item,
                        value: item,
                        disabled: disabled
                    };
                }
                var checked = _this2.state.value === option.value;
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(radio_radio, {
                    key: index,
                    tabIndex: index === 0 && !_this2.state.value || checked ? 0 : -1,
                    value: option.value,
                    checked: checked,
                    label: option.label,
                    disabled: disabled || option.disabled
                });
            });
        }

        var isButtonShape = shape === 'button';

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'radio-group'] = true, _classnames[prefix + 'radio-group-' + itemDirection] = !isButtonShape, _classnames[prefix + 'radio-button'] = isButtonShape, _classnames[prefix + 'radio-button-' + size] = isButtonShape, _classnames[className] = !!className, _classnames.disabled = disabled, _classnames));

        var TagName = component;
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            TagName,
            extends_default()({}, others, { 'aria-disabled': disabled, role: 'radiogroup', className: cls, style: style }),
            children
        );
    };

    return RadioGroup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), radio_group__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * name
     */
    name: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * radio group的选中项的值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * radio group的默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 设置标签类型
     */
    component: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 选中值改变时的事件
     * @param {String/Number} value 选中项的值
     * @param {Event} e Dom 事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 表示radio被禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 可以设置成 button 展示形状
     * @enumdesc 按钮状
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['button']),
    /**
     * 与 `shape` 属性配套使用，shape设为button时有效
     * @enumdesc 大, 中, 小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'medium', 'small']),
    /**
     * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']`
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.any),
    /**
     * 通过子元素方式设置内部radio
     */
    children: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.element), _prop_types_15_7_2_prop_types_default.a.element]),

    /**
     * 子项目的排列方式
     * - hoz: 水平排列 (default)
     * - ver: 垂直排列
     */
    itemDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver'])
}, radio_group__class.defaultProps = {
    dataSource: [],
    size: 'medium',
    onChange: function onChange() {},
    prefix: 'next-',
    component: 'div',
    itemDirection: 'hoz'
}, radio_group__class.childContextTypes = {
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    __group__: _prop_types_15_7_2_prop_types_default.a.bool,
    isButton: _prop_types_15_7_2_prop_types_default.a.bool,
    selectedValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.bool]),
    disabled: _prop_types_15_7_2_prop_types_default.a.bool
}, radio_group__temp);
radio_group_RadioGroup.displayName = 'RadioGroup';


/* harmony default export */ var radio_group = (config_provider.config(radio_group_RadioGroup));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/radio/index.js



radio_radio.Group = radio_group;

/* harmony default export */ var es_radio = (radio_radio);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/checkable-item.js





var checkable_item__class, checkable_item__temp;








var checkable_item_noop = {};
var checkable_item_bindCtx = func.bindCtx;
var checkable_item_pickOthers = util_obj.pickOthers;
var checkable_item_CheckableItem = (checkable_item__temp = checkable_item__class = function (_Component) {
    inherits_default()(CheckableItem, _Component);

    function CheckableItem(props) {
        classCallCheck_default()(this, CheckableItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        checkable_item_bindCtx(_this, ['stopPropagation', 'handleKeyDown', 'handleClick']);
        return _this;
    }

    CheckableItem.prototype.stopPropagation = function stopPropagation(e) {
        e.stopPropagation();
    };

    CheckableItem.prototype.handleCheck = function handleCheck(e) {
        var _props = this.props,
            checkType = _props.checkType,
            checked = _props.checked,
            onChange = _props.onChange;

        if (!(checkType === 'radio' && checked)) {
            onChange(!checked, e);
        }
    };

    CheckableItem.prototype.handleKeyDown = function handleKeyDown(e) {
        if (e.keyCode === KEYCODE.SPACE && !this.props.checkDisabled) {
            this.handleCheck(e);
        }

        this.props.onKeyDown && this.props.onKeyDown(e);
    };

    CheckableItem.prototype.handleClick = function handleClick(e) {
        this.handleCheck(e);

        this.props.onClick && this.props.onClick(e);
    };

    CheckableItem.prototype.renderCheck = function renderCheck() {
        var _props2 = this.props,
            root = _props2.root,
            checked = _props2.checked,
            indeterminate = _props2.indeterminate,
            disabled = _props2.disabled,
            checkType = _props2.checkType,
            checkDisabled = _props2.checkDisabled,
            onChange = _props2.onChange;
        var labelToggleChecked = root.props.labelToggleChecked;

        var Check = checkType === 'radio' ? es_radio : es_checkbox;

        var checkProps = {
            tabIndex: '-1',
            checked: checked,
            disabled: disabled || checkDisabled
        };
        if (checkType === 'checkbox') {
            checkProps.indeterminate = indeterminate;
        }
        if (!labelToggleChecked) {
            checkProps.onChange = onChange;
            checkProps.onClick = this.stopPropagation;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Check, checkProps);
    };

    CheckableItem.prototype.render = function render() {
        var _props3 = this.props,
            _key = _props3._key,
            root = _props3.root,
            checked = _props3.checked,
            disabled = _props3.disabled,
            onClick = _props3.onClick,
            helper = _props3.helper,
            children = _props3.children;
        var _root$props = root.props,
            prefix = _root$props.prefix,
            labelToggleChecked = _root$props.labelToggleChecked;

        var others = checkable_item_pickOthers(Object.keys(CheckableItem.propTypes), this.props);

        var newProps = extends_default()({
            _key: _key,
            root: root,
            disabled: disabled,
            type: 'item',
            onClick: onClick,
            onKeyDown: this.handleKeyDown
        }, others);
        if (labelToggleChecked && !disabled) {
            newProps.onClick = this.handleClick;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            view_item_Item,
            extends_default()({ 'aria-checked': checked }, newProps),
            this.renderCheck(),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'menu-item-text' },
                children
            ),
            helper ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'menu-item-helper' },
                helper
            ) : null
        );
    };

    return CheckableItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), checkable_item__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    inlineIndent: _prop_types_15_7_2_prop_types_default.a.number,
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    indeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    checkType: _prop_types_15_7_2_prop_types_default.a.oneOf(['checkbox', 'radio']),
    checkDisabled: _prop_types_15_7_2_prop_types_default.a.bool,
    helper: _prop_types_15_7_2_prop_types_default.a.node,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    onClick: _prop_types_15_7_2_prop_types_default.a.func
}, checkable_item__class.defaultProps = {
    disabled: false,
    checked: false,
    indeterminate: false,
    checkType: 'checkbox',
    checkDisabled: false,
    onChange: checkable_item_noop
}, checkable_item__temp);
checkable_item_CheckableItem.displayName = 'CheckableItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/checkbox-item.js






var checkbox_item__class, checkbox_item__temp;





/**
 * Menu.CheckboxItem
 * @order 3
 * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑
 */
var checkbox_item_CheckboxItem = (checkbox_item__temp = checkbox_item__class = function (_Component) {
  inherits_default()(CheckboxItem, _Component);

  function CheckboxItem() {
    classCallCheck_default()(this, CheckboxItem);

    return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
  }

  CheckboxItem.prototype.render = function render() {
    var _props = this.props,
        checkboxDisabled = _props.checkboxDisabled,
        others = objectWithoutProperties_default()(_props, ['checkboxDisabled']);

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(checkable_item_CheckableItem, extends_default()({ role: 'menuitemcheckbox', checkType: 'checkbox', checkDisabled: checkboxDisabled }, others));
  };

  return CheckboxItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), checkbox_item__class.menuChildType = 'item', checkbox_item__class.propTypes = {
  /**
   * 是否选中
   */
  checked: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否半选中
   */
  indeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否禁用
   */
  disabled: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 选中或取消选中触发的回调函数
   * @param {Boolean} checked 是否选中
   * @param {Object} event 选中事件对象
   */
  onChange: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * 帮助文本
   */
  helper: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 标签内容
   */
  children: _prop_types_15_7_2_prop_types_default.a.node,
  checkboxDisabled: _prop_types_15_7_2_prop_types_default.a.bool
}, checkbox_item__class.defaultProps = {
  checked: false,
  indeterminate: false,
  disabled: false,
  onChange: function onChange() {},
  checkboxDisabled: false
}, checkbox_item__temp);
checkbox_item_CheckboxItem.displayName = 'CheckboxItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/radio-item.js





var radio_item__class, radio_item__temp;





/**
 * Menu.RadioItem
 * @order 4
 * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑
 */
var radio_item_RadioItem = (radio_item__temp = radio_item__class = function (_Component) {
  inherits_default()(RadioItem, _Component);

  function RadioItem() {
    classCallCheck_default()(this, RadioItem);

    return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
  }

  RadioItem.prototype.render = function render() {
    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(checkable_item_CheckableItem, extends_default()({ role: 'menuitemradio', checkType: 'radio' }, this.props));
  };

  return RadioItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), radio_item__class.menuChildType = 'item', radio_item__class.propTypes = {
  /**
   * 是否选中
   */
  checked: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否禁用
   */
  disabled: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 选中或取消选中触发的回调函数
   * @param {Boolean} checked 是否选中
   * @param {Object} event 选中事件对象
   */
  onChange: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * 帮助文本
   */
  helper: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 标签内容
   */
  children: _prop_types_15_7_2_prop_types_default.a.node
}, radio_item__class.defaultProps = {
  checked: false,
  disabled: false,
  onChange: function onChange() {}
}, radio_item__temp);
radio_item_RadioItem.displayName = 'RadioItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/group.js






var view_group__class, view_group__temp;






/**
 * Menu.Group
 * @order 5
 */
var view_group_Group = (view_group__temp = view_group__class = function (_Component) {
    inherits_default()(Group, _Component);

    function Group() {
        classCallCheck_default()(this, Group);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Group.prototype.render = function render() {
        var _cx;

        var _props = this.props,
            root = _props.root,
            className = _props.className,
            label = _props.label,
            children = _props.children,
            parentMode = _props.parentMode,
            others = objectWithoutProperties_default()(_props, ['root', 'className', 'label', 'children', 'parentMode']);

        var prefix = root.props.prefix;


        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'menu-group-label'] = true, _cx[className] = !!className, _cx));

        var newChildren = children.map(function (child) {
            var _cx2;

            var className = child.props.className;

            var newChildClassName = _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'menu-group-item'] = true, _cx2[className] = !!className, _cx2));

            return Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, {
                parentMode: parentMode,
                className: newChildClassName
            });
        });

        return [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            view_item_Item,
            extends_default()({
                key: 'menu-group-label',
                className: newClassName,
                replaceClassName: true,
                root: root,
                parentMode: parentMode
            }, others),
            label
        )].concat(newChildren);
    };

    return Group;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), view_group__class.menuChildType = 'group', view_group__class.propTypes = {
    root: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 菜单项
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    parentMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup'])
}, view_group__temp);
view_group_Group.displayName = 'Group';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/divider.js






var divider__class, divider__temp;





/**
 * Menu.Divider
 * @order 6
 */
var divider_Divider = (divider__temp = divider__class = function (_Component) {
    inherits_default()(Divider, _Component);

    function Divider() {
        classCallCheck_default()(this, Divider);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Divider.prototype.render = function render() {
        var _cx;

        var _props = this.props,
            root = _props.root,
            className = _props.className,
            others = objectWithoutProperties_default()(_props, ['root', 'className']);

        var prefix = root.props.prefix;


        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'menu-divider'] = true, _cx[className] = !!className, _cx));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('li', extends_default()({ role: 'separator', className: newClassName }, others));
    };

    return Divider;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), divider__class.menuChildType = 'divider', divider__class.propTypes = {
    root: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, divider__temp);
divider_Divider.displayName = 'Divider';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/view/create.js






var create__class, create__temp;










var create_bindCtx = func.bindCtx;
var create_getContextProps = config_provider.getContextProps;

var create_Menu = config_provider.config(menu_Menu);

var menuInstance = void 0;

var create_ContextMenu = (create__temp = create__class = function (_Component) {
    inherits_default()(ContextMenu, _Component);

    function ContextMenu(props) {
        classCallCheck_default()(this, ContextMenu);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            visible: true
        };

        create_bindCtx(_this, ['handleOverlayClose', 'handleOverlayOpen', 'handleItemClick', 'getOverlay']);
        return _this;
    }

    ContextMenu.prototype.getOverlay = function getOverlay(ref) {
        this.overlay = ref;
    };

    ContextMenu.prototype.close = function close() {
        this.setState({
            visible: false
        });
        menuInstance = null;
    };

    ContextMenu.prototype.handleOverlayClose = function handleOverlayClose(triggerType, e) {
        var clickedPopupMenu = triggerType === 'docClick' && this.popupNodes.some(function (node) {
            return node.contains(e.target);
        });
        if (!clickedPopupMenu) {
            this.close();
            var overlayProps = this.props.overlayProps;

            if (overlayProps && overlayProps.onRequestClose) {
                for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                    others[_key - 2] = arguments[_key];
                }

                overlayProps.onRequestClose.apply(overlayProps, [triggerType, e].concat(others));
            }
        }
    };

    ContextMenu.prototype.handleOverlayOpen = function handleOverlayOpen() {
        this.popupNodes = this.overlay.getInstance().getContent().getInstance().popupNodes;
        var overlayProps = this.props.overlayProps;

        if (overlayProps && overlayProps.onOpen) {
            overlayProps.onOpen();
        }
    };

    ContextMenu.prototype.handleItemClick = function handleItemClick() {
        var _props;

        this.close();

        this.props.onItemClick && (_props = this.props).onItemClick.apply(_props, arguments);
    };

    ContextMenu.prototype.render = function render() {
        var _cx, _cx2;

        var _props2 = this.props,
            className = _props2.className,
            popupClassName = _props2.popupClassName,
            target = _props2.target,
            align = _props2.align,
            offset = _props2.offset,
            afterClose = _props2.afterClose,
            _props2$overlayProps = _props2.overlayProps,
            overlayProps = _props2$overlayProps === undefined ? {} : _props2$overlayProps,
            others = objectWithoutProperties_default()(_props2, ['className', 'popupClassName', 'target', 'align', 'offset', 'afterClose', 'overlayProps']);

        var contextProps = create_getContextProps(this.props);
        var prefix = contextProps.prefix;
        var visible = this.state.visible;


        var newOverlayProps = extends_default()({}, contextProps, overlayProps, {
            target: target, align: align, offset: offset, afterClose: afterClose, visible: visible,
            onRequestClose: this.handleOverlayClose,
            onOpen: this.handleOverlayOpen,
            ref: this.getOverlay
        });
        var menuProps = extends_default()({}, contextProps, {
            triggerType: 'hover'
        }, others, {
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'context'] = true, _cx[className] = !!className, _cx)),
            popupClassName: _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'context'] = true, _cx2[popupClassName] = !!popupClassName, _cx2)),
            onItemClick: this.handleItemClick
        });

        newOverlayProps.rtl = false;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_overlay,
            newOverlayProps,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(create_Menu, menuProps)
        );
    };

    return ContextMenu;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), create__class.propTypes = {
    className: _prop_types_15_7_2_prop_types_default.a.string,
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    target: _prop_types_15_7_2_prop_types_default.a.any,
    align: _prop_types_15_7_2_prop_types_default.a.string,
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    overlayProps: _prop_types_15_7_2_prop_types_default.a.object,
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup']),
    onOpen: _prop_types_15_7_2_prop_types_default.a.func,
    onItemClick: _prop_types_15_7_2_prop_types_default.a.func
}, create__class.defaultProps = {
    prefix: 'next-',
    align: 'tl tl',
    mode: 'popup'
}, create__temp);

/**
 * 创建上下文菜单
 * @exportName create
 * @param {Object} props 属性对象
 */

create_ContextMenu.displayName = 'ContextMenu';
function create_create(props) {
    if (menuInstance) {
        menuInstance.destroy();
    }

    /* eslint-disable no-unused-vars */

    var afterClose = props.afterClose,
        others = objectWithoutProperties_default()(props, ['afterClose']);
    /* eslint-enable no-unused-vars */

    var div = document.createElement('div');
    document.body.appendChild(div);

    var closeChain = function closeChain() {
        Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["unmountComponentAtNode"])(div);
        document.body.removeChild(div);

        afterClose && afterClose();
    };

    var newContext = config_provider.getContext();

    var menu = void 0;
    Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["render"])(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        config_provider,
        newContext,
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(create_ContextMenu, extends_default()({ ref: function ref(_ref) {
                menu = _ref;
            }, afterClose: closeChain }, others))
    ), div);

    menuInstance = {
        destroy: function destroy() {
            if (menu) {
                menu.close();
            }
        }
    };

    return menuInstance;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu/index.js













menu_Menu.SubMenu = sub_menu_SubMenu;
menu_Menu.Item = selectable_item_SelectableItem;
menu_Menu.CheckboxItem = checkbox_item_CheckboxItem;
menu_Menu.RadioItem = radio_item_RadioItem;
menu_Menu.PopupItem = popup_item_PopupItem;
menu_Menu.Group = view_group_Group;
menu_Menu.Divider = divider_Divider;
menu_Menu.create = create_create;

/* istanbul ignore next */
var menu_transform = function transform(props, deprecated) {
    if ('indentSize' in props) {
        deprecated('indentSize', 'inlineIndent', 'Menu');

        var _props = props,
            indentSize = _props.indentSize,
            others = objectWithoutProperties_default()(_props, ['indentSize']);

        props = extends_default()({ inlineIndent: indentSize }, others);
    }

    if ('onDeselect' in props) {
        deprecated('onDeselect', 'onSelect', 'Menu');
        if (props.onDeselect) {
            var _props2 = props,
                onDeselect = _props2.onDeselect,
                onSelect = _props2.onSelect,
                _others = objectWithoutProperties_default()(_props2, ['onDeselect', 'onSelect']);

            var newOnSelect = function newOnSelect(selectedKeys, item, extra) {
                if (!extra.select) {
                    onDeselect(extra.key);
                }
                if (onSelect) {
                    onSelect(selectedKeys, item, extra);
                }
            };

            props = extends_default()({ onSelect: newOnSelect }, _others);
        }
    }

    return props;
};

/* harmony default export */ var es_menu = (config_provider.config(menu_Menu, {
    transform: menu_transform
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/util.js





/**
 * util module
 */

/**
 * 是否是单选模式
 * @param {string} mode
 * @return {boolean} is single mode
 */
function util_isSingle(mode) {
    return !mode || mode === 'single' || mode === 'combobox';
}

/**
 * 在 Select 中，认为 null 和 undefined 都是空值
 * @param {*} n any object
 * @return {boolean}
 */
function isNull(n) {
    return n === null || n === undefined;
}

/**
 * 将字符串中的正则表达式关键字符添加转义
 * @param {string} str
 * @return {string}
 */
function escapeForReg(str) {
    return str.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
}

/**
 * filter by key
 * @param {string} key filter key
 * @param {object} item item object
 * @return {boolean} it's filtered
 */
function util_filter(key, item) {
    var _key = escapeForReg('' + key);
    var regExp = new RegExp('(' + _key + ')', 'ig');

    return regExp.test('' + item.value) || regExp.test('' + item.label);
}

/**
 * loop map
 * @param {Array} dataSource
 * @param {function} callback
 * @return {Array}
 * ----
 * @callback ~loopCallback
 * @param {object} option
 */
function loopMap(dataSource, callback) {
    var result = [];
    dataSource.forEach(function (option) {
        if (option.children) {
            var children = loopMap(option.children, callback);
            children.length && result.push(extends_default()({}, option, { children: children
            }));
        } else {
            // eslint-disable-next-line callback-return
            var tmp = callback(option);
            tmp && result.push(tmp);
        }
    });

    return result;
}

/**
 * Parse dataSource from MenuItem
 * @static
 * @param {Array<Element>} children
 * @param {number} [deep=0] recursion deep level
 */
function parseDataSourceFromChildren(children) {
    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var source = [];

    external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (child, index) {
        var type = child.type,
            childProps = child.props;

        var item2 = { deep: deep };

        var isOption = false;
        var isOptionGroup = false;

        if (typeof type === 'function' && type._typeMark === 'next_select_option' || type === 'option') {
            isOption = true;
        }
        if (typeof type === 'function' && type._typeMark === 'next_select_option_group' || type === 'optgroup') {
            isOptionGroup = true;
        }

        if (!isOption && !isOptionGroup) {
            return;
        }

        if (isOption) {
            // option
            // If children is a string, it can be used as value
            var isStrChild = typeof childProps.children === 'string';
            // value > key > string children > index
            item2.value = 'value' in childProps ? childProps.value : 'key' in childProps ? childProps.key : isStrChild ? childProps.children : '' + index;

            item2.label = childProps.label || childProps.children || '' + item2.value;
            item2.title = childProps.title;
            childProps.disabled === true && (item2.disabled = true);
            // You can put your extra data here, and use it in `itemRender` or `labelRender`
            extends_default()(item2, childProps['data-extra'] || {});
        } else if (isOptionGroup && deep < 1) {
            // option group
            item2.label = childProps.label || 'Group';
            // parse children nodes
            item2.children = parseDataSourceFromChildren(childProps.children, deep + 1);
        }

        source.push(item2);
    });

    return source;
}

/**
 * Normalize dataSource
 * @static
 * @param {Array} dataSource
 * @param {number} [deep=0] recursion deep level
 * ----
 * value priority: value > 'index'
 * label priority: label > 'value' > 'index'
 * disabled: disabled === true
 */
function util_normalizeDataSource(dataSource) {
    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var source = [];

    dataSource.forEach(function (item, index) {
        // enable array of basic type
        if (/string|boolean|number/.test(typeof item === 'undefined' ? 'undefined' : typeof_default()(item))) {
            item = { label: '' + item, value: item };
        }

        // filter off addon item
        if (item.__isAddon) {
            return;
        }

        var item2 = { deep: deep };
        // deep < 1: only 2 level allowed
        if (Array.isArray(item.children) && deep < 1) {
            // handle group
            item2.label = item.label || item.value || 'Group ' + index;
            // parse children
            item2.children = util_normalizeDataSource(item.children, deep + 1);
        } else {
            var _item = item,
                value = _item.value,
                label = _item.label,
                title = _item.title,
                disabled = _item.disabled,
                others = objectWithoutProperties_default()(_item, ['value', 'label', 'title', 'disabled']);

            item2.value = !isNull(value) ? value : '' + index;
            item2.label = label || '' + item2.value;
            item2.title = title;
            disabled === true && (item2.disabled = true);

            extends_default()(item2, others);
        }

        source.push(item2);
    });

    return source;
}

/**
 * Get flatten dataSource
 * @static
 * @param  {Array} dataSource structured dataSource
 * @return {Array}
 */
function flattingDataSource(dataSource) {
    var source = [];

    dataSource.forEach(function (item) {
        if (Array.isArray(item.children)) {
            source.push.apply(source, flattingDataSource(item.children));
        } else {
            source.push(item);
        }
    });

    return source;
}

function filterDataSource(dataSource, key, filter, addonKey) {
    if (!Array.isArray(dataSource)) {
        return [];
    }
    if (typeof key === 'undefined' || key === null) {
        return [].concat(dataSource);
    }

    var addKey = true;
    var menuDataSource = loopMap(dataSource, function (option) {
        if (key === '' + option.value) {
            addKey = false;
        }
        return filter(key, option) && !option.__isAddon && option;
    });

    // if key not in menuDataSource, add key to dataSource
    if (addonKey && key && addKey) {
        menuDataSource.unshift({
            value: key,
            label: key,
            title: key,
            __isAddon: true
        });
    }

    return menuDataSource;
}

function getKeyItemByValue(value, valueMap) {
    var item = void 0;

    if ((typeof value === 'undefined' ? 'undefined' : typeof_default()(value)) === 'object' && value.hasOwnProperty('value')) {
        item = value;
    } else {
        item = valueMap['' + value] || {
            value: value,
            label: value
        };
    }

    return item;
}

/**
 * compute valueDataSource by new value
 * @param {Array/String} value 数据
 * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表
 * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表
 * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}
 */
function getValueDataSource(value, mapValueDS, mapMenuDS) {
    if (isNull(value)) {
        return {};
    }

    var newValue = [];
    var newValueDS = [];
    var newMapValueDS = {};
    var _newMapDS = extends_default()({}, mapValueDS, mapMenuDS);

    if (Array.isArray(value)) {
        value.forEach(function (v) {
            var item = getKeyItemByValue(v, _newMapDS);

            newValueDS.push(item);
            newMapValueDS['' + item.value] = item;
            newValue.push(item.value);
        });

        return {
            value: newValue, // [value]
            valueDS: newValueDS, // [{value,label}]
            mapValueDS: newMapValueDS // {value: {value,label}}
        };
    } else {
        var _mapValueDS;

        var item = getKeyItemByValue(value, _newMapDS);

        return {
            value: item.value,
            valueDS: item,
            mapValueDS: (_mapValueDS = {}, _mapValueDS['' + item.value] = item, _mapValueDS)
        };
    }
}

/**
 * Get flatten dataSource
 * @static
 * @param  {any} value structured dataSource
 * @return {String}
 */
function valueToSelectKey(value) {
    var val = void 0;
    if ((typeof value === 'undefined' ? 'undefined' : typeof_default()(value)) === 'object' && value.hasOwnProperty('value')) {
        val = value.value;
    } else {
        val = value;
    }
    return '' + val;
}

/**
 * UP Down 改进双向链表方法
 */
// function DoubleLinkList(element){
//     this.prev = null;
//     this.next = null;
//     this.element = element;
// }
//
// export function mapDoubleLinkList(dataSource){
//
//     const mapDS = {};
//     let doubleLink = null;
//
//     let head = null;
//     let tail = null;
//
//     function  append(element) {
//         if (!doubleLink) {
//             doubleLink = new DoubleLinkList(element);
//             head = doubleLink;
//             tail = doubleLink;
//             return doubleLink;
//         }
//
//         const node = new DoubleLinkList(element);
//         tail.next = node;
//         node.prev = tail;
//         tail = node;
//
//         return tail;
//     }
//
//     dataSource.forEach((item => {
//         if (item.disabled) {
//             return;
//         }
//         mapDS[`${item.value}`] = append(item);
//     }));
//
//     return mapDS;
// }
//
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/data-store.js




/**
 * manage dataSource for menu list
 */

var data_store_DataStore = function () {
    function DataStore(options) {
        classCallCheck_default()(this, DataStore);

        this.options = extends_default()({
            filter: util_filter,
            key: undefined,
            addonKey: false,
            filterLocal: true
        }, options);

        // origin data
        this.dataSource = [];
        // current data for menu display
        this.menuDataSource = [];
        // key=>value map for menuDataSource
        this.mapDataSource = {};
        // current data can be select (not disabled) on menu
        this.enabledDataSource = [];
    }

    DataStore.prototype.setOptions = function setOptions(options) {
        extends_default()(this.options, options);
    };

    DataStore.prototype.updateByDS = function updateByDS(dataSource) {
        var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.dataSource = isChildren ? parseDataSourceFromChildren(dataSource) : util_normalizeDataSource(dataSource);
        return this.updateAll();
    };

    DataStore.prototype.updateByKey = function updateByKey(key) {
        if (key === this.options.key) {
            return this.getMenuDS();
        }

        this.options.key = key;
        return this.updateAll();
    };

    DataStore.prototype.getOriginDS = function getOriginDS() {
        return this.dataSource;
    };

    DataStore.prototype.getMenuDS = function getMenuDS() {
        return this.menuDataSource;
    };

    DataStore.prototype.getFlattenDS = function getFlattenDS() {
        return this.flattenDataSource;
    };

    DataStore.prototype.getEnableDS = function getEnableDS() {
        return this.enabledDataSource;
    };

    DataStore.prototype.getMapDS = function getMapDS() {
        return this.mapDataSource;
    };

    DataStore.prototype.updateAll = function updateAll() {
        var _this = this;

        var _options = this.options,
            key = _options.key,
            filter = _options.filter,
            filterLocal = _options.filterLocal;

        this.menuDataSource = filterDataSource(this.dataSource, filterLocal ? key : '', filter, this.options.addonKey);

        this.flattenDataSource = flattingDataSource(this.menuDataSource);

        this.mapDataSource = {};
        this.flattenDataSource.forEach(function (item) {
            _this.mapDataSource['' + item.value] = item;
        });

        this.enabledDataSource = this.flattenDataSource.filter(function (item) {
            return !item.disabled;
        });

        return this.menuDataSource;
    };

    return DataStore;
}();

/* harmony default export */ var data_store = (data_store_DataStore);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/virtual-list/virtual-list.js




var virtual_list__class, virtual_list__temp;







var NOOP = function NOOP() {};
var MAX_SYNC_UPDATES = 100;

var isEqualSubset = function isEqualSubset(a, b) {
    for (var key in b) {
        if (a[key] !== b[key]) {
            return false;
        }
    }

    return true;
};

/** VirtualList */
var virtual_list_VirtualList = (virtual_list__temp = virtual_list__class = function (_Component) {
    inherits_default()(VirtualList, _Component);

    function VirtualList(props) {
        classCallCheck_default()(this, VirtualList);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        var jumpIndex = props.jumpIndex;

        var _this$constrain = _this.constrain(jumpIndex, 0, props),
            from = _this$constrain.from,
            size = _this$constrain.size;

        _this.state = { from: from, size: size };
        _this.cache = {};
        _this.scrollTo = _this.scrollTo.bind(_this);
        _this.cachedScroll = null;
        _this.unstable = false;
        _this.updateCounter = 0;
        return _this;
    }

    VirtualList.prototype.componentDidMount = function componentDidMount() {
        var jumpIndex = this.props.jumpIndex;


        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);

        util_events.on(window, 'resize', this.updateFrameAndClearCache);

        this.updateFrame(this.scrollTo.bind(this, jumpIndex));
    };

    VirtualList.prototype.componentWillReceiveProps = function componentWillReceiveProps(next) {
        var _state = this.state,
            from = _state.from,
            size = _state.size;


        var oldIndex = this.props.jumpIndex;
        var newIndex = next.jumpIndex;

        if (oldIndex !== newIndex) {
            this.updateFrame(this.scrollTo.bind(this, newIndex));
        }

        this.maybeSetState(this.constrain(from, size, next), NOOP);
    };

    VirtualList.prototype.componentDidUpdate = function componentDidUpdate() {
        var _this2 = this;

        // If the list has reached an unstable state, prevent an infinite loop.
        if (this.unstable) {
            return;
        }

        if (++this.updateCounter > MAX_SYNC_UPDATES) {
            this.unstable = true;
        }

        if (!this.updateCounterTimeoutId) {
            this.updateCounterTimeoutId = setTimeout(function () {
                _this2.updateCounter = 0;
                delete _this2.updateCounterTimeoutId;
            }, 0);
        }

        this.updateFrame();
    };

    VirtualList.prototype.componentWillUnmount = function componentWillUnmount() {
        util_events.off(window, 'resize', this.updateFrameAndClearCache);

        util_events.off(this.scrollParent, 'scroll', this.updateFrameAndClearCache);
        util_events.off(this.scrollParent, 'mousewheel', NOOP);
    };

    VirtualList.prototype.maybeSetState = function maybeSetState(b, cb) {

        if (isEqualSubset(this.state, b)) {
            return cb();
        }

        this.setState(b, cb);
    };

    VirtualList.prototype.getOffset = function getOffset(el) {
        var offset = el.clientLeft || 0;
        do {
            offset += el.offsetTop || 0;
            el = el.offsetParent;
        } while (el);
        return offset;
    };

    VirtualList.prototype.getEl = function getEl() {
        return this.el || this.items || {};
    };

    VirtualList.prototype.getScrollParent = function getScrollParent() {
        var el = this.getEl();
        el = el.parentElement;

        switch (window.getComputedStyle(el).overflowY) {
            case 'auto':case 'scroll':case 'overlay':case 'visible':
                return el;
        }

        return window;
    };

    VirtualList.prototype.getScroll = function getScroll() {
        // Cache scroll position as this causes a forced synchronous layout.
        // if (typeof this.cachedScroll === 'number') {
        //     return this.cachedScroll;
        // }
        var scrollParent = this.scrollParent;

        var scrollKey = 'scrollTop';
        var actual = scrollParent === window ?
        // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari
        // always return document.documentElement[scrollKey] as 0, so take
        // whichever has a value.
        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];
        var max = this.getScrollSize() - this.getViewportSize();

        var scroll = Math.max(0, Math.min(actual, max));
        var el = this.getEl();
        this.cachedScroll = this.getOffset(scrollParent) + scroll - this.getOffset(el);

        return this.cachedScroll;
    };

    VirtualList.prototype.setScroll = function setScroll(offset) {
        var scrollParent = this.scrollParent;

        offset += this.getOffset(this.getEl());
        if (scrollParent === window) {
            return window.scrollTo(0, offset);
        }

        offset -= this.getOffset(this.scrollParent);
        scrollParent.scrollTop = offset;
    };

    VirtualList.prototype.getViewportSize = function getViewportSize() {
        var scrollParent = this.scrollParent;

        return scrollParent === window ? window.innerHeight : scrollParent.clientHeight;
    };

    VirtualList.prototype.getScrollSize = function getScrollSize() {
        var scrollParent = this.scrollParent;
        var _document = document,
            body = _document.body,
            documentElement = _document.documentElement;

        var key = 'scrollHeight';
        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];
    };

    VirtualList.prototype.getStartAndEnd = function getStartAndEnd() {
        var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;

        var scroll = this.getScroll();

        var trueScroll = scroll;
        var start = Math.max(0, trueScroll - threshold);
        var end = trueScroll + this.getViewportSize() + threshold;

        return { start: start, end: end };
    };

    // Called by 'scroll' and 'resize' events, clears scroll position cache.


    VirtualList.prototype.updateFrameAndClearCache = function updateFrameAndClearCache(cb) {
        this.cachedScroll = null;
        return this.updateFrame(cb);
    };

    VirtualList.prototype.updateFrame = function updateFrame(cb) {
        this.updateScrollParent();

        if (typeof cb !== 'function') {
            cb = NOOP;
        }

        return this.updateVariableFrame(cb);
    };

    VirtualList.prototype.updateScrollParent = function updateScrollParent() {
        var prev = this.scrollParent;
        this.scrollParent = this.getScrollParent();

        if (prev === this.scrollParent) {
            return;
        }
        if (prev) {
            util_events.off(prev, 'scroll', this.updateFrameAndClearCache);
            util_events.off(prev, 'mousewheel', NOOP);
        }

        util_events.on(this.scrollParent, 'scroll', this.updateFrameAndClearCache);
        util_events.on(this.scrollParent, 'mousewheel', NOOP);

        // You have to attach mousewheel listener to the scrollable element.
        // Just an empty listener. After that onscroll events will be fired synchronously.
    };

    VirtualList.prototype.updateVariableFrame = function updateVariableFrame(cb) {
        if (!this.props.itemSizeGetter) {
            this.cacheSizes();
        }

        var _getStartAndEnd = this.getStartAndEnd(),
            start = _getStartAndEnd.start,
            end = _getStartAndEnd.end;

        var _props = this.props,
            pageSize = _props.pageSize,
            children = _props.children;

        var length = children.length;
        var space = 0;
        var from = 0;
        var size = 0;
        var maxFrom = length - 1;

        while (from < maxFrom) {
            var itemSize = this.getSizeOf(from);
            if (itemSize === null || itemSize === undefined || space + itemSize > start) {
                break;
            }
            space += itemSize;
            ++from;
        }

        var maxSize = length - from;

        while (size < maxSize && space < end) {
            var _itemSize = this.getSizeOf(from + size);
            if (_itemSize === null || _itemSize === undefined) {
                size = Math.min(size + pageSize, maxSize);
                break;
            }
            space += _itemSize;
            ++size;
        }

        this.maybeSetState({ from: from, size: size }, cb);
    };

    VirtualList.prototype.getSpaceBefore = function getSpaceBefore(index) {
        var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};


        if (!index) {
            return 0;
        }
        if (cache[index] !== null && cache[index] !== undefined) {
            return cache[index] || 0;
        }

        // Find the closest space to index there is a cached value for.
        var from = index;
        while (from > 0 && (cache[from] === null || cache[from] === undefined)) {
            from--;
        }

        // Finally, accumulate sizes of items from - index.
        var space = cache[from] || 0;
        for (var i = from; i < index; ++i) {
            cache[i] = space;
            var itemSize = this.getSizeOf(i);
            if (itemSize === null || itemSize === undefined) {
                break;
            }
            space += itemSize;
        }

        cache[index] = space;

        return cache[index] || 0;
    };

    VirtualList.prototype.cacheSizes = function cacheSizes() {
        var cache = this.cache;
        var from = this.state.from;
        var _items = this.items,
            children = _items.children,
            _items$props = _items.props,
            props = _items$props === undefined ? {} : _items$props;

        var itemEls = children || props.children || [];
        for (var i = 0, l = itemEls.length; i < l; ++i) {
            var ulRef = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.items);
            var height = ulRef.children[i].offsetHeight;
            if (height > 0) {
                cache[from + i] = height;
            }
        }
    };

    VirtualList.prototype.getSizeOf = function getSizeOf(index) {
        var cache = this.cache;
        var _props2 = this.props,
            itemSizeGetter = _props2.itemSizeGetter,
            jumpIndex = _props2.jumpIndex;

        // Try the cache.

        if (index in cache) {
            return cache[index];
        }
        if (itemSizeGetter) {
            return itemSizeGetter(index);
        }

        var height = Object.values(this.cache).pop();
        if (!this.defaultItemHeight && jumpIndex > -1 && height) {
            this.defaultItemHeight = height;
        }

        if (this.defaultItemHeight) {
            return this.defaultItemHeight;
        }
    };

    VirtualList.prototype.constrain = function constrain(from, size, _ref) {
        var children = _ref.children,
            minSize = _ref.minSize;

        var length = children && children.length;
        size = Math.max(size, minSize);
        if (size > length) {
            size = length;
        }
        from = from ? Math.max(Math.min(from, length - size), 0) : 0;

        return { from: from, size: size };
    };

    VirtualList.prototype.scrollTo = function scrollTo(index) {
        this.setScroll(this.getSpaceBefore(index));
    };

    VirtualList.prototype.renderMenuItems = function renderMenuItems() {
        var _this3 = this;

        var _props3 = this.props,
            children = _props3.children,
            itemsRenderer = _props3.itemsRenderer;
        var _state2 = this.state,
            from = _state2.from,
            size = _state2.size;

        var items = [];

        for (var i = 0; i < size; ++i) {
            items.push(children[from + i]);
        }

        return itemsRenderer(items, function (c) {
            _this3.items = c;
            return _this3.items;
        });
    };

    VirtualList.prototype.render = function render() {
        var _cx,
            _this4 = this;

        var _props4 = this.props,
            _props4$children = _props4.children,
            children = _props4$children === undefined ? [] : _props4$children,
            prefix = _props4.prefix,
            className = _props4.className;

        var length = children.length;
        var from = this.state.from;

        var items = this.renderMenuItems();

        var style = { position: 'relative' };
        var cache = {};

        var size = this.getSpaceBefore(length, cache);

        if (size) {
            style.height = size;
        }
        var offset = this.getSpaceBefore(from, cache);
        var transform = 'translate(0px, ' + offset + 'px)';
        var listStyle = {
            msTransform: transform,
            WebkitTransform: transform,
            transform: transform
        };

        var cls = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'virtual-list-wrapper'] = true, _cx[className] = !!className, _cx));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: cls, style: style, ref: function ref(c) {
                    _this4.el = c;
                    return _this4.el;
                } },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { style: listStyle },
                items
            )
        );
    };

    return VirtualList;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), virtual_list__class.displayName = 'VirtualList', virtual_list__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 渲染的子节点
     */
    children: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 最小加载数量
     */
    minSize: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 一屏数量
     */
    pageSize: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 父渲染函数，默认为 (items, ref) => <ul ref={ref}>{items}</ul>
     */
    itemsRenderer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 缓冲区高度
     */
    threshold: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 获取item高度的函数
     */
    itemSizeGetter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置跳转位置，需要设置 itemSizeGetter 才能生效, 不设置认为元素等高并取第一个元素高度作为默认高
     */
    jumpIndex: _prop_types_15_7_2_prop_types_default.a.number,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, virtual_list__class.defaultProps = {
    prefix: 'next-',
    itemsRenderer: function itemsRenderer(items, ref) {
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            { ref: ref },
            items
        );
    },
    minSize: 1,
    pageSize: 10,
    jumpIndex: 0,
    threshold: 100
}, virtual_list__temp);
virtual_list_VirtualList.displayName = 'VirtualList';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/virtual-list/index.js



/* harmony default export */ var virtual_list = (config_provider.config(virtual_list_VirtualList));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/base.js





var select_base__class, base__temp;













var base_Popup = es_overlay.Popup;
var MenuItem = es_menu.Item,
    MenuGroup = es_menu.Group;
var base_noop = func.noop,
    base_bindCtx = func.bindCtx,
    base_makeChain = func.makeChain;


function base_preventDefault(e) {
    e.preventDefault();
}

var select_base_Base = (base__temp = select_base__class = function (_React$Component) {
    inherits_default()(Base, _React$Component);

    function Base(props) {
        classCallCheck_default()(this, Base);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        _this.saveSelectRef = function (ref) {
            _this.selectDOM = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);
        };

        _this.saveInputRef = function (ref) {
            if (ref && ref.getInstance()) {
                _this.inputRef = ref.getInstance();
            }
        };

        _this.savePopupRef = function (ref) {
            _this.popupRef = ref;
            if (_this.props.popupProps && typeof _this.props.popupProps.ref === 'function') {
                _this.props.popupProps.ref(ref);
            }
        };

        _this.dataStore = new data_store({
            filter: props.filter,
            filterLocal: props.filterLocal
        });

        _this.state = {
            value: 'value' in props ? props.value : props.defaultValue,
            visible: 'visible' in props ? props.visible : props.defaultVisible,
            dataSource: [],
            width: 100,
            // current highlight key
            highlightKey: null
        };

        base_bindCtx(_this, ['handleMenuBodyClick', 'handleVisibleChange', 'focusInput', 'beforeOpen', 'beforeClose', 'afterClose', 'handleResize']);
        return _this;
    }

    Base.prototype.componentWillMount = function componentWillMount() {
        this.setState({
            dataSource: this.setDataSource(this.props)
        });
    };

    Base.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        // overlay 还没有完成 mount，所以需要滞后同步宽度
        setTimeout(function () {
            return _this2.syncWidth();
        }, 0);

        util_events.on(window, 'resize', this.handleResize);
    };

    Base.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: nextProps.value
            });
        }

        if ('visible' in nextProps) {
            // this.state.visible = nextProps.visible;
            this.setState({
                visible: nextProps.visible
            });
        }

        this.dataStore.setOptions({
            filter: nextProps.filter,
            filterLocal: nextProps.filterLocal
        });

        if (nextProps.children !== this.props.children || nextProps.dataSource !== this.props.dataSource) {
            var dataSource = this.setDataSource(nextProps);
            this.setState({
                dataSource: dataSource
            });
        }
    };

    Base.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (prevProps.label !== this.props.label || prevState.value !== this.state.value) {
            this.syncWidth();
        }
    };

    Base.prototype.componentWillUnmount = function componentWillUnmount() {
        util_events.off(window, 'resize', this.handleResize);
        clearTimeout(this.resizeTimeout);
    };

    /**
     * Calculate and set width of popup menu
     * @protected
     */


    Base.prototype.syncWidth = function syncWidth() {
        var _this3 = this;

        var width = dom.getStyle(this.selectDOM, 'width');

        if (width && this.width !== width) {
            this.width = width;

            if (this.popupRef && this.props.autoWidth) {
                // overy 的 node 节点可能没有挂载完成，所以这里需要异步
                setTimeout(function () {
                    if (_this3.popupRef && _this3.popupRef.getInstance().overlay) {
                        dom.setStyle(_this3.popupRef.getInstance().overlay.getInstance().getContentNode(), 'width', _this3.width);
                    }
                }, 0);
            }
        }
    };

    Base.prototype.handleResize = function handleResize() {
        var _this4 = this;

        clearTimeout(this.resizeTimeout);
        if (this.state.visible) {
            this.resizeTimeout = setTimeout(function () {
                _this4.syncWidth();
            }, 200);
        }
    };

    /**
     * Get structured dataSource, for cache
     * @protected
     * @param  {Object} [props=this.props]
     * @return {Array}
     */


    Base.prototype.setDataSource = function setDataSource(props) {
        var dataSource = props.dataSource,
            children = props.children;

        // children is higher priority then dataSource

        if (external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children)) {
            return this.dataStore.updateByDS(children, true);
        } else if (Array.isArray(dataSource)) {
            return this.dataStore.updateByDS(dataSource, false);
        }
        return [];
    };

    /**
     * Set popup visible
     * @protected
     * @param {boolean} visible
     * @param {string} type trigger type
     */


    Base.prototype.setVisible = function setVisible(visible, type) {
        if (this.props.disabled || this.state.visible === visible) {
            return;
        }

        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }

        this.props.onVisibleChange(visible, type);
    };

    Base.prototype.setFirstHightLightKeyForMenu = function setFirstHightLightKeyForMenu() {
        // 设置高亮 item key
        if (this.dataStore.getMenuDS().length && this.dataStore.getEnableDS().length) {
            this.setState({
                highlightKey: '' + this.dataStore.getEnableDS()[0].value
            });
        }
    };

    Base.prototype.handleChange = function handleChange(value) {
        var _props2;

        // 非受控模式清空内部数据
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        (_props2 = this.props).onChange.apply(_props2, [value].concat(args));
    };

    /**
     * Handle Menu body click
     * @param {Event} e click event
     */


    Base.prototype.handleMenuBodyClick = function handleMenuBodyClick(e) {
        this.focusInput(e);
    };

    /**
     * Toggle highlight MenuItem
     * @private
     * @param {number} dir -1: up, 1: down
     */


    Base.prototype.toggleHighlightItem = function toggleHighlightItem(dir) {
        if (!this.state.visible) {
            this.setVisible(true, 'enter');
            return;
        }

        var maxCount = this.dataStore.getEnableDS().length;
        // When there is no enabled item
        if (!maxCount) {
            return false;
        }

        var highlightKey = this.state.highlightKey;

        var highlightIndex = -1;

        // find previous highlight index
        highlightKey !== null && this.dataStore.getEnableDS().some(function (item, index) {
            if ('' + item.value === highlightKey) {
                highlightIndex = index;
            }
            return highlightIndex > -1;
        });

        // toggle highlight index
        highlightIndex += dir;
        if (highlightIndex < 0) {
            highlightIndex = maxCount - 1;
        }
        if (highlightIndex >= maxCount) {
            highlightIndex = 0;
        }

        // get highlight key
        var highlightItem = this.dataStore.getEnableDS()[highlightIndex];
        highlightKey = highlightItem ? '' + highlightItem.value : null;

        this.setState({ highlightKey: highlightKey });

        this.scrollMenuIntoView();

        return highlightItem;
    };

    // scroll into focus item


    Base.prototype.scrollMenuIntoView = function scrollMenuIntoView() {
        var _this5 = this;

        var prefix = this.props.prefix;


        clearTimeout(this.highlightTimer);
        this.highlightTimer = setTimeout(function () {
            try {
                var menuNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(_this5.menuRef);
                var itemNode = menuNode.querySelector('.' + prefix + 'select-menu-item.' + prefix + 'focused');
                itemNode && itemNode.scrollIntoViewIfNeeded();
            } catch (ex) {
                // I don't care...
            }
        });
    };

    /**
     * render popup menu header
     * @abstract
     */


    Base.prototype.renderMenuHeader = function renderMenuHeader() {
        return null;
    };

    Base.prototype.handleSelect = function handleSelect() {};

    /**
     * render popup children
     * @protected
     * @param {object} props
     */


    Base.prototype.renderMenu = function renderMenu() {
        var _classNames,
            _this6 = this;

        var _props3 = this.props,
            prefix = _props3.prefix,
            mode = _props3.mode,
            autoWidth = _props3.autoWidth,
            locale = _props3.locale,
            notFoundContent = _props3.notFoundContent,
            useVirtual = _props3.useVirtual;
        var _state = this.state,
            dataSource = _state.dataSource,
            highlightKey = _state.highlightKey;

        var value = this.state.value;
        var selectedKeys = void 0;

        if (isNull(value) || value.length === 0) {
            selectedKeys = [];
        } else if (util_isSingle(mode)) {
            selectedKeys = [valueToSelectKey(value)];
        } else {
            selectedKeys = [].concat(value).map(function (n) {
                return valueToSelectKey(n);
            });
        }

        var children = this.renderMenuItem(dataSource);

        var menuClassName = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'select-menu'] = true, _classNames[prefix + 'select-menu-empty'] = !children || !children.length, _classNames));

        if (!children || !children.length) {
            children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'select-menu-empty-content' },
                notFoundContent || locale.notFoundContent
            );
        }

        var menuProps = {
            children: children,
            style: autoWidth ? { width: this.width } : { minWidth: this.width },
            selectedKeys: selectedKeys,
            focusedKey: highlightKey,
            focusable: false,
            selectMode: util_isSingle(mode) ? 'single' : 'multiple',
            onSelect: this.handleMenuSelect,
            onItemClick: this.handleItemClick,
            header: this.renderMenuHeader(),
            onClick: this.handleMenuBodyClick,
            onMouseDown: base_preventDefault,
            className: menuClassName
        };

        return useVirtual && children.length ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'select-menu-wrapper', style: { position: 'relative' } },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                virtual_list,
                {
                    itemsRenderer: function itemsRenderer(items, _ref) {
                        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                            es_menu,
                            extends_default()({ ref: function ref(c) {
                                    _ref(c);
                                    _this6.menuRef = c;
                                } }, menuProps),
                            items
                        );
                    } },
                children
            )
        ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_menu, menuProps);
    };

    /**
     * render menu item
     * @protected
     * @param {Array} dataSource
     */


    Base.prototype.renderMenuItem = function renderMenuItem(dataSource) {
        var _this7 = this;

        var _props4 = this.props,
            prefix = _props4.prefix,
            itemRender = _props4.itemRender;
        // If it has.

        var searchKey = void 0;
        if (this.isAutoComplete) {
            // In AutoComplete, value is the searchKey
            searchKey = this.state.value;
        } else {
            searchKey = this.state.searchValue;
        }

        return dataSource.map(function (item, index) {
            if (!item) {
                return null;
            }
            if (Array.isArray(item.children)) {
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    MenuGroup,
                    {
                        key: index,
                        label: item.label },
                    _this7.renderMenuItem(item.children)
                );
            } else {
                var itemProps = {
                    key: item.value,
                    className: prefix + 'select-menu-item',
                    disabled: item.disabled
                };
                if (item.title) {
                    itemProps.title = item.title;
                }

                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    MenuItem,
                    itemProps,
                    itemRender(item, searchKey)
                );
            }
        });
    };

    /**
     * 点击 arrow 或 label 的时候焦点切到 input 中
     * @override
     */
    Base.prototype.focusInput = function focusInput() {
        this.inputRef.focus();
    };

    Base.prototype.beforeOpen = function beforeOpen() {
        var _state2 = this.state,
            value = _state2.value,
            highlightKey = _state2.highlightKey;

        if (this.props.mode === 'single' && !value && !highlightKey) {
            this.setFirstHightLightKeyForMenu();
        }
        this.syncWidth();
    };

    Base.prototype.beforeClose = function beforeClose() {};

    Base.prototype.afterClose = function afterClose() {};

    Base.prototype.render = function render(props) {
        var _classNames2;

        var prefix = props.prefix,
            mode = props.mode,
            popupProps = props.popupProps,
            popupContainer = props.popupContainer,
            popupClassName = props.popupClassName,
            popupStyle = props.popupStyle,
            popupContent = props.popupContent,
            autoWidth = props.autoWidth,
            canCloseByTrigger = props.canCloseByTrigger,
            cache = props.cache;


        var cls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'select-auto-complete-menu'] = !popupContent && this.isAutoComplete, _classNames2[prefix + 'select-' + mode + '-menu'] = !popupContent && !!mode, _classNames2), popupClassName || popupProps.className);

        var _props = extends_default()({
            triggerType: 'click',
            autoFocus: false,
            cache: cache
        }, popupProps, {
            //beforeOpen node not mount, afterOpen too slow.
            // from display:none to block, we may need to recompute width
            beforeOpen: base_makeChain(this.beforeOpen, popupProps.beforeOpen),
            beforeClose: base_makeChain(this.beforeClose, popupProps.beforeClose),
            afterClose: base_makeChain(this.afterClose, popupProps.afterClose),
            canCloseByTrigger: canCloseByTrigger,
            visible: this.state.visible,
            onVisibleChange: this.handleVisibleChange,
            shouldUpdatePosition: true,
            container: popupContainer || popupProps.container,
            className: cls,
            style: popupStyle || popupProps.style
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            base_Popup,
            extends_default()({}, _props, { trigger: this.renderSelect(), ref: this.savePopupRef }),
            popupContent ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'select-popup-wrap', style: autoWidth ? { width: this.width } : {} },
                popupContent
            ) : this.renderMenu()
        );
    };

    return Base;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), select_base__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择器尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    // 当前值，用于受控模式
    value: _prop_types_15_7_2_prop_types_default.a.any, // to be override
    // 初始化的默认值
    defaultValue: _prop_types_15_7_2_prop_types_default.a.any, // to be override
    /**
     * 没有值的时候的占位符
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 下拉菜单是否与选择器对齐
     */
    autoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义内联 label
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否有清除按钮（单选模式有效）
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 校验状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'loading']),
    /**
     * 是否只读，只读模式下可以展开弹层但不能选
     */
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用选择器
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前弹层是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层初始化是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示或隐藏时触发的回调
     * @param {Boolean} visible 弹层是否显示
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层挂载的容器节点
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 弹层的 className
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 弹层的内联样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 添加到弹层上的属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义弹层的内容
     */
    popupContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否使用本地过滤，在数据源为远程的时候需要关闭此项
     */
    filterLocal: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 本地过滤方法，返回一个 Boolean 值确定是否保留
     */
    filter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 键盘上下键切换菜单高亮选项的回调
     */
    onToggleHighlightItem: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否开启虚拟滚动模式
     */
    useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
    // 自定义类名
    className: _prop_types_15_7_2_prop_types_default.a.any,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    mode: _prop_types_15_7_2_prop_types_default.a.string,
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, select_base__class.defaultProps = {
    prefix: 'next-',
    size: 'medium',
    autoWidth: true,
    onChange: base_noop,
    onVisibleChange: base_noop,
    onToggleHighlightItem: base_noop,
    popupProps: {},
    filterLocal: true,
    filter: util_filter,
    itemRender: function itemRender(item) {
        return item.label || item.value;
    },
    locale: zh_cn.Select
}, base__temp);
select_base_Base.displayName = 'Base';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/select.js





var select__class, select__temp;

/* eslint-disable valid-jsdoc */










var select_bindCtx = func.bindCtx,
    select_noop = func.noop;

var isIE9 = util_env.ieVersion === 9;

/**
 * 无障碍化注意事项:
 * 1. Select 无搜索情况下，不应该让 Input 可focus，此时外层wrap必须可focus，并且需要相应focus事件让外边框发生变化
 */

// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化

/**
 * Select
 */
var select_Select = (select__temp = select__class = function (_Base) {
    inherits_default()(Select, _Base);

    function Select(props) {
        classCallCheck_default()(this, Select);

        // @extend Base state
        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        _this.handleWrapClick = function (e) {
            e.preventDefault();
            _this.focusInput();
        };

        _this.handleArrowClick = function (e) {
            e.preventDefault();
            _this.focusInput();

            // because of can not close Popup by click Input while hasSearch.
            // so when Popup open and hasSearch, we should close Popup intentionally
            _this.state.visible && _this.hasSearch() && _this.setVisible(false);
        };

        _this.handleClear = function (e) {
            e.stopPropagation();

            _this.handleChange(undefined, 'clear');
        };

        extends_default()(_this.state, {
            // search keyword
            searchValue: 'searchValue' in props ? props.searchValue : ''
        });

        // because dataSource maybe updated while select a item, so we should cache choosen value's item
        _this.valueDataSource = {
            valueDS: [], // [{value,label}]
            mapValueDS: {} // {value: {value,label}}
        };

        select_bindCtx(_this, ['handleMenuSelect', 'handleItemClick', 'handleSearch', 'handleSearchKeyDown', 'handleSelectAll']);
        return _this;
    }

    Select.prototype.componentWillMount = function componentWillMount() {
        this.dataStore.setOptions({
            key: this.state.searchValue,
            addonKey: this.props.mode === 'tag' // tag 模式手动输入的数据
        });

        _Base.prototype.componentWillMount.call(this);

        // 根据value和计算后的dataSource，更新value对应的详细数据valueDataSource
        if (typeof this.state.value !== 'undefined') {
            this.valueDataSource = getValueDataSource(this.state.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        }

        if (isIE9) {
            this.ie9Hack();
        }
    };

    Select.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('searchValue' in nextProps) {
            this.dataStore.setOptions({ key: nextProps.searchValue });
            this.setState({
                searchValue: typeof nextProps.searchValue === 'undefined' ? '' : nextProps.searchValue
            });
        }
        if (this.props.mode !== nextProps.mode) {
            this.dataStore.setOptions({
                addonKey: nextProps.mode === 'tag'
            });
        }

        _Base.prototype.componentWillReceiveProps.call(this, nextProps);

        if ('value' in nextProps) {
            // under controll
            this.valueDataSource = getValueDataSource(nextProps.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        } else if ('defaultValue' in nextProps && nextProps.defaultValue === this.valueDataSource.value && (nextProps.children !== this.props.children || nextProps.dataSource !== this.props.dataSource)) {
            //has defaultValue and value not changed and dataSource changed
            this.valueDataSource = getValueDataSource(nextProps.defaultValue, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        }
    };

    Select.prototype.componentDidMount = function componentDidMount() {
        if (isIE9) {
            this.ie9Hack();
        }
        _Base.prototype.componentDidMount.call(this);
    };

    // ie9 下 table-cell 布局不支持宽度超出隐藏


    Select.prototype.ie9Hack = function ie9Hack() {
        try {
            var width = this.selectDOM.currentStyle.width;
            this.setState({
                fixWidth: width !== 'auto'
            });
        } catch (e) {
            //
        }
    };

    Select.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        var props = this.props;
        // 随着输入自动伸展
        if (/tag|multiple/.test(props.mode) && prevState.searchValue !== this.state.searchValue) {
            this.syncWidth();
        } else {
            return _Base.prototype.componentDidUpdate.call(this, prevProps, prevState);
        }
    };

    Select.prototype.useDetailValue = function useDetailValue() {
        var _props = this.props,
            popupContent = _props.popupContent,
            useDetailValue = _props.useDetailValue,
            dataSource = _props.dataSource;

        return useDetailValue || popupContent && !dataSource;
    };

    Select.prototype.hasSearch = function hasSearch() {
        var _props2 = this.props,
            showSearch = _props2.showSearch,
            mode = _props2.mode;

        return showSearch || mode === 'tag';
    };

    /**
     * Menu.Item onSelect
     * @private
     * @param  {Array<string>} keys
     * @
     */


    Select.prototype.handleMenuSelect = function handleMenuSelect(keys) {
        var _props3 = this.props,
            mode = _props3.mode,
            readOnly = _props3.readOnly,
            disabled = _props3.disabled;


        if (readOnly || disabled) {
            return false;
        }

        var isSingle = mode === 'single';

        if (isSingle) {
            // 单选
            return this.handleSingleSelect(keys[0], 'itemClick');
        } else {
            // 正常多选
            return this.handleMultipleSelect(keys, 'itemClick');
        }
    };

    Select.prototype.handleItemClick = function handleItemClick() {
        this.focusInput();
    };

    /**
     * 单选模式
     */


    Select.prototype.handleSingleSelect = function handleSingleSelect(key, triggerType) {
        var cacheValue = this.props.cacheValue;
        // get data only from dataStore while cacheValue=false

        var itemObj = getValueDataSource(key, cacheValue ? this.valueDataSource.mapValueDS : {}, this.dataStore.getMapDS());
        this.valueDataSource = itemObj;

        this.setVisible(false, triggerType);

        if (this.useDetailValue()) {
            return this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);
        }

        this.setState({
            highlightKey: key
        });

        // 清空搜索
        if (!('searchValue' in this.props) && this.state.searchValue) {
            this.handleSearchClear(triggerType);
        }
    };

    /**
     * 多选模式 multiple/tag
     */


    Select.prototype.handleMultipleSelect = function handleMultipleSelect(keys, triggerType) {
        var _this2 = this;

        var itemObj = getValueDataSource(keys, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());

        var _props4 = this.props,
            cacheValue = _props4.cacheValue,
            mode = _props4.mode,
            hiddenSelected = _props4.hiddenSelected;

        // cache those value maybe not exists in dataSource

        if (cacheValue || mode === 'tag') {
            this.valueDataSource = itemObj;
        }

        if (hiddenSelected) {
            this.setVisible(false, triggerType);
        }

        if (this.useDetailValue()) {
            this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);
        }

        // 清空搜索
        if (!('searchValue' in this.props) && this.state.searchValue) {
            // 因为 SearchValue 被 clear 后会重新渲染 Menu，所以在 Overlay 检测 safeNode 的时候 e.target 可能会找不到导致弹窗关闭
            setTimeout(function () {
                _this2.handleSearchClear(triggerType);
            });
        }
    };

    Select.prototype.handleSearchValue = function handleSearchValue(value) {
        if (this.state.searchValue === value) {
            return;
        }

        var filterLocal = this.props.filterLocal;


        if (filterLocal) {
            if (!('searchValue' in this.props)) {
                this.setState({
                    searchValue: value,
                    dataSource: this.dataStore.updateByKey(value)
                });
                this.setFirstHightLightKeyForMenu();
            }
        } else if (!('searchValue' in this.props)) {
            this.setState({
                searchValue: value
            });
        }
    };

    /**
     * Handle search input change event
     * @param {Event} e change Event
     */


    Select.prototype.handleSearch = function handleSearch(value) {
        this.handleSearchValue(value);

        // inputing should trigger popup open
        if (!this.state.visible && value) {
            this.setVisible(true);
        }

        this.props.onSearch(value);
    };

    Select.prototype.handleSearchClear = function handleSearchClear(triggerType) {
        this.handleSearchValue('');
        this.props.onSearchClear(triggerType);
    };

    // 搜索框 keyDown 事件


    Select.prototype.handleSearchKeyDown = function handleSearchKeyDown(e) {
        var _props5 = this.props,
            popupContent = _props5.popupContent,
            onKeyDown = _props5.onKeyDown,
            showSearch = _props5.showSearch,
            mode = _props5.mode,
            hasClear = _props5.hasClear,
            onToggleHighlightItem = _props5.onToggleHighlightItem;


        if (popupContent) {
            return onKeyDown(e);
        }

        var proxy = 'search';
        var hasSearch = this.hasSearch();

        switch (e.keyCode) {
            case KEYCODE.UP:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');
                break;
            case KEYCODE.DOWN:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');
                break;
            case KEYCODE.ENTER:
                e.preventDefault();
                this.chooseHighlightItem(proxy, e);
                break;
            case KEYCODE.ESC:
                e.preventDefault();
                this.state.visible && this.setVisible(false, 'keyDown');
                break;
            case KEYCODE.SPACE:
                e.stopPropagation();
                !hasSearch && e.preventDefault();
                break;
            case KEYCODE.BACKSPACE:
                if (mode === 'multiple' && showSearch || mode === 'tag') {
                    // 在多选并且有搜索的情况下，删除最后一个 tag
                    this.handleDeleteTag(e);
                } else if (mode === 'single' && hasClear && !this.state.visible) {
                    // 单选、非展开、并且可清除的情况，允许按删除键清除
                    this.handleClear(e);
                }
                break;
            default:
                break;
        }

        onKeyDown(e);
    };

    Select.prototype.chooseMultipleItem = function chooseMultipleItem(key) {
        var value = this.state.value || [];
        var keys = value.map(function (v) {
            return valueToSelectKey(v);
        });

        var index = keys.map(function (v) {
            return '' + v;
        }).indexOf(key);

        if (index > -1) {
            // unselect
            keys.splice(index, 1);
        } else {
            // select
            keys.push(key);
        }

        this.handleMultipleSelect(keys, 'enter');
    };

    // 回车 选择高亮的 item


    Select.prototype.chooseHighlightItem = function chooseHighlightItem(proxy, e) {
        var prevVisible = this.state.visible;
        var mode = this.props.mode;


        if (!prevVisible) {
            // input tag by itself
            if (mode === 'tag' && this.state.searchValue) {
                this.chooseMultipleItem(this.state.searchValue);
            }
            return false;
        }

        var highlightKey = this.state.highlightKey;

        // 没有高亮选项 或者 没有可选菜单

        if (highlightKey === null || !this.dataStore.getMenuDS().length) {
            return;
        }

        if (mode === 'single') {
            this.handleSingleSelect(highlightKey, 'enter');
        } else {
            this.chooseMultipleItem(highlightKey);
            // 阻止事件冒泡到最外层，让Popup 监听到触发弹层关闭
            e && e.stopPropagation();
        }
    };

    /**
     * Handle Tag close event
     * @param  {Object} item
     * @return {Boolean} false  return false to prevent auto close
     * ----
     * It MUST be multiple mode, needn't additional judgement
     */


    Select.prototype.handleTagClose = function handleTagClose(item) {

        if (this.useDetailValue()) {
            var value = this.state.value.filter(function (v) {
                return item.value !== v.value;
            });

            this.handleChange(value, 'tag');
        } else {
            // filter out current item, and then call handleMenuSelect
            var _value = this.state.value.filter(function (v) {
                return item.value !== v;
            });

            this.handleMultipleSelect(_value, 'tag');
        }

        this.props.onRemove(item);

        // prevent tag close
        return false;
    };

    // eslint-disable-next-line valid-jsdoc
    /**
     * Handle BACKSPACE key event
     * @param {Event} e keyDown event
     * ---
     * It MUST be multiple mode
     */


    Select.prototype.handleDeleteTag = function handleDeleteTag(e) {
        var value = this.state.value;
        var searchValue = this.state.searchValue;

        if (searchValue || !value || !value.length) {
            return false;
        }

        e.preventDefault();

        var nextValues = value.slice(0, value.length - 1);
        // 手动调用 handleMenuSelect 时直接传入原生的 value，可以减少 toString 的操作

        if (this.useDetailValue()) {
            this.handleChange(nextValues, 'tag');
        } else {
            this.handleMultipleSelect(nextValues, 'tag');
        }
    };

    /**
     * Handle SelectAll span click event
     * @param {Event} e click event
     */


    Select.prototype.handleSelectAll = function handleSelectAll(e) {
        e && e.preventDefault();
        var nextValues = this.dataStore.getEnableDS().map(function (item) {
            return item.value;
        });
        // 直接传 values，减少 toString 操作
        this.handleMultipleSelect(nextValues, 'selectAll');
    };

    Select.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {
        this.setVisible(visible, type);
    };

    Select.prototype.afterClose = function afterClose() {
        // 关闭的时候清空搜索值
        if (this.hasSearch()) {
            this.handleSearchClear('popupClose');
        }
    };

    /**
     * 如果用户是自定义的弹层，则直接以 value 为准，不再校验 dataSource
     * @param {object} props
     */


    Select.prototype.renderValues = function renderValues() {
        var _this3 = this;

        var _props6 = this.props,
            mode = _props6.mode,
            size = _props6.size,
            valueRender = _props6.valueRender,
            fillProps = _props6.fillProps,
            disabled = _props6.disabled;

        var value = this.state.value;

        if (isNull(value)) {
            return null;
        }

        // get detail value
        if (!this.useDetailValue()) {
            if (value === this.valueDataSource.value) {
                value = this.valueDataSource.valueDS;
            } else {
                value = getValueDataSource(value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS()).valueDS;
            }
        }

        if (mode === 'single') {
            if (!value) {
                return null;
            }

            var retvalue = fillProps ? value[fillProps] : valueRender(value);
            // 0 => '0'
            return typeof retvalue === 'number' ? retvalue.toString() : retvalue;
        } else if (value) {
            if (!Array.isArray(value)) {
                value = [value];
            }
            return value.map(function (v) {
                if (!v) {
                    return null;
                }

                var labelNode = fillProps ? v[fillProps] : valueRender(v);
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_tag,
                    { key: v.value,
                        disabled: disabled || v.disabled,
                        type: 'primary',
                        size: size === 'large' ? 'medium' : 'small',
                        animation: false,
                        onClose: _this3.handleTagClose.bind(_this3, v),
                        closable: true },
                    labelNode
                );
            });
        }

        return null;
    };
    /**
     * 1. fix flash while click <label/>
     * 2. fix onBlur while has clear
     * @returns
     */


    Select.prototype.hasClear = function hasClear() {
        var _props7 = this.props,
            hasClear = _props7.hasClear,
            readOnly = _props7.readOnly,
            disabled = _props7.disabled,
            mode = _props7.mode,
            showSearch = _props7.showSearch;
        var _state = this.state,
            value = _state.value,
            visible = _state.visible;


        return typeof value !== 'undefined' && hasClear && !readOnly && !disabled && mode === 'single' && !(showSearch && visible);
    };

    /**
     * render arrow
     * @param {object} props
     * @param {function} [clickHandler]
     */


    Select.prototype.renderExtraNode = function renderExtraNode() {
        var _props8 = this.props,
            hasArrow = _props8.hasArrow,
            hasClear = _props8.hasClear,
            prefix = _props8.prefix;


        var ret = [];

        if (hasArrow) {
            ret.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { key: 'arrow', onClick: this.handleArrowClick, className: prefix + 'select-arrow' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, {
                    type: 'arrow-down' })
            ));
        }

        // do not use this.hasClear() here, to make sure clear btn always exists, can not influenced by apis like `disabled` `readOnly`
        if (hasClear) {
            ret.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { key: 'clear', onClick: this.handleClear, className: prefix + 'select-clear' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, {
                    type: 'delete-filling' })
            ));
        }

        return ret;
    };

    /**
     * 选择器
     * @override
     * @param {object} props
     */


    Select.prototype.renderSelect = function renderSelect() {
        var _classNames,
            _this4 = this;

        var _props9 = this.props,
            prefix = _props9.prefix,
            showSearch = _props9.showSearch,
            placeholder = _props9.placeholder,
            mode = _props9.mode,
            size = _props9.size,
            className = _props9.className,
            style = _props9.style,
            readOnly = _props9.readOnly,
            disabled = _props9.disabled,
            hasBorder = _props9.hasBorder,
            label = _props9.label,
            locale = _props9.locale,
            state = _props9.state,
            onBlur = _props9.onBlur,
            onFocus = _props9.onFocus,
            rtl = _props9.rtl;

        var others = util_obj.pickOthers(Select.propTypes, this.props);
        var othersData = util_obj.pickAttrsWith(others, 'data-');

        var visible = this.state.visible;
        var isSingle = mode === 'single';
        var hasSearch = this.hasSearch();
        var valueNodes = this.renderValues();

        // compatible with selectPlaceHolder. TODO: removed in 2.0 version
        var _placeholder = placeholder || locale.selectPlaceholder || locale.selectPlaceHolder;
        if (valueNodes && valueNodes.length) {
            _placeholder = null;
        }

        // 弹窗展开时将当前的值作为 placeholder，这个功能的前提是 valueNode 必须是一个字符串
        if (showSearch && visible && isSingle && typeof valueNodes === 'string') {
            _placeholder = valueNodes;
        }

        // 下拉箭头
        var extra = this.renderExtraNode();

        var triggerClazz = _classnames_2_2_6_classnames_default()([prefix + 'select', prefix + 'select-trigger', prefix + 'select-' + mode, '' + prefix + size, className], (_classNames = {}, _classNames[prefix + 'active'] = visible, _classNames[prefix + 'inactive'] = !visible, _classNames[prefix + 'no-search'] = !hasSearch, _classNames[prefix + 'has-search'] = hasSearch, _classNames[prefix + 'select-in-ie'] = isIE9, _classNames[prefix + 'select-in-ie-fixwidth'] = this.state.fixWidth, _classNames[prefix + 'has-clear'] = this.hasClear(), _classNames));

        var valuetext = this.valueDataSource.valueDS ? this.valueDataSource.valueDS.label : '';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({}, othersData, {
                className: triggerClazz,
                style: style,
                dir: rtl ? 'rtl' : undefined,
                ref: this.saveSelectRef,
                onClick: this.handleWrapClick,
                onMouseDown: this.handleWrapClick
            }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({
                'aria-valuetext': valuetext
            }, util_obj.pickOthers(othersData, others), {
                role: 'combobox',
                tabIndex: 0,
                'aria-expanded': this.state.visible,
                'aria-disabled': disabled,
                state: state,
                label: label,
                extra: extra,
                value: this.state.searchValue,
                size: size,
                readOnly: !this.hasSearch() || readOnly,
                disabled: disabled,
                placeholder: _placeholder,
                hasBorder: hasBorder,
                hasClear: false,
                htmlSize: '1',
                inputRender: function inputRender(inputEl) {
                    return _this4.renderSearchInput(valueNodes, _placeholder, inputEl);
                },
                onChange: this.handleSearch,
                onKeyDown: this.handleSearchKeyDown,
                onFocus: onFocus,
                onBlur: onBlur,
                className: prefix + 'select-inner',
                ref: this.saveInputRef }))
        );
    };

    Select.prototype.renderSearchInput = function renderSearchInput(valueNodes, placeholder, inputEl) {
        var _classNames2;

        var _props10 = this.props,
            prefix = _props10.prefix,
            mode = _props10.mode;

        var isSingle = mode === 'single';

        var mirrorText = this.state.searchValue;

        var cls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'select-values'] = true, _classNames2[prefix + 'input-text-field'] = true, _classNames2));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: cls },
            isSingle && valueNodes ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'em',
                null,
                valueNodes
            ) : valueNodes,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'select-trigger-search' },
                inputEl,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { 'aria-hidden': true },
                    mirrorText || placeholder,
                    '\xA0'
                )
            )
        );
    };

    /**
     * 渲染弹层的 header 内容
     * @override
     * @param {object} props
     */


    Select.prototype.renderMenuHeader = function renderMenuHeader() {
        var _props11 = this.props,
            prefix = _props11.prefix,
            hasSelectAll = _props11.hasSelectAll,
            mode = _props11.mode;


        var sourceCount = this.dataStore.getEnableDS().length;
        // 多选模式下才有全选
        if (!hasSelectAll || mode === 'single' || !sourceCount) {
            return null;
        }

        var text = typeof hasSelectAll === 'boolean' ? 'Select All' : hasSelectAll;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { key: 'all', onClick: this.handleSelectAll, className: prefix + 'select-all' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                null,
                text
            )
        );
    };

    Select.prototype.render = function render() {
        var mode = this.props.mode;

        var props = extends_default()({}, this.props);

        // forbid to close Popup by click Input while hasSearch
        if (this.hasSearch()) {
            props.canCloseByTrigger = false;
        }
        if (mode === 'single') {
            props.cache = true;
        }
        return _Base.prototype.render.call(this, props);
    };

    return Select;
}(select_base_Base), select__class.propTypes = extends_default()({}, select_base_Base.propTypes, {
    /**
     * 选择器模式
     */
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple', 'tag']),
    /**
     * 当前值，用于受控模式
     */
    value: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 初始的默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * Select发生改变时触发的回调
     * @param {*} value 选中的值
     * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'tag'
     * @param {*} item 选中的值的对象数据 (useDetailValue=false有效)
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.shape({
        value: _prop_types_15_7_2_prop_types_default.a.any,
        label: _prop_types_15_7_2_prop_types_default.a.any,
        disabled: _prop_types_15_7_2_prop_types_default.a.bool,
        children: _prop_types_15_7_2_prop_types_default.a.array
    }), _prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string])),
    /**
     * 是否有边框
     */
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有下拉箭头
     */
    hasArrow: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 展开后是否能搜索（tag 模式下固定为true）
     */
    showSearch: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当搜索框值变化时回调
     * @param {String} value 数据
     */
    onSearch: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 当搜索框值被清空时候的回调
     * @param {String} actionType 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)
     */
    onSearchClear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 多选模式下是否有全选功能
     */
    hasSelectAll: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 填充到选择框里的值的 key
     */
    fillProps: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * onChange 返回的 value 使用 dataSource 的对象
     */
    useDetailValue: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * dataSource 变化的时是否保留已选的内容
     */
    cacheValue: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 渲染 Select 展现内容的方法
     * @param {Object} item 渲染节点的item
     * @return {ReactNode} 展现内容
     * @default item => item.label \|\| item.value
     */
    valueRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 渲染 MenuItem 内容的方法
     * @param {Object} item 渲染节点的item
     * @param {String} searchValue 搜索关键字（如果开启搜索）
     * @return {ReactNode} item node
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层内容为空的文案
     */
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 受控搜索值，一般不需要设置
     * @type {[type]}
     */
    searchValue: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)
     */
    hiddenSelected: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * tag 删除回调
     * @param {object} item 渲染节点的item
     */
    onRemove: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 焦点事件
     */
    onFocus: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 失去焦点事件
     */
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func
}), select__class.defaultProps = extends_default()({}, select_base_Base.defaultProps, {
    mode: 'single',
    showSearch: false,
    cacheValue: true,
    onSearch: select_noop,
    onSearchClear: select_noop,
    hasArrow: true,
    onRemove: select_noop,
    valueRender: function valueRender(item) {
        return item.label || item.value;
    },
    onKeyDown: select_noop,
    onFocus: select_noop,
    onBlur: select_noop
}), select__class.displayName = 'Select', select__temp);


/* harmony default export */ var select_select = (select_Select);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/auto-complete.js





var auto_complete__class, auto_complete__temp;









var auto_complete_bindCtx = func.bindCtx,
    auto_complete_noop = func.noop;

/**
 * Select.AutoComplete
 */

var auto_complete_AutoComplete = (auto_complete__temp = auto_complete__class = function (_Base) {
    inherits_default()(AutoComplete, _Base);

    function AutoComplete(props) {
        classCallCheck_default()(this, AutoComplete);

        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        _this.handleChange = function (value, proxy, item) {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                readOnly = _this$props.readOnly,
                filterLocal = _this$props.filterLocal;


            if (disabled || readOnly) {
                return false;
            }

            var actionType = typeof proxy === 'string' ? proxy : 'change';

            _this.isInputing = actionType === 'change';

            if (filterLocal) {
                _this.setState({
                    dataSource: _this.dataStore.updateByKey(value)
                });

                _this.shouldControlPopup(_this.props, actionType);
                _this.setFirstHightLightKeyForMenu();
            }

            // 非受控模式清空内部数据
            if (!('value' in _this.props)) {
                _this.setState({
                    value: value
                });
            }

            _this.props.onChange(value, actionType, item);

            if (actionType === 'itemClick' || actionType === 'enter') {
                // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理
                _this.setVisible(false, actionType);
            }
        };

        _this.isAutoComplete = true;
        _this.isInputing = false;

        auto_complete_bindCtx(_this, ['handleTriggerKeyDown', 'handleMenuSelect', 'handleItemClick']);
        return _this;
    }

    AutoComplete.prototype.componentWillMount = function componentWillMount() {
        this.dataStore.setOptions({ key: this.state.value });

        _Base.prototype.componentWillMount.call(this);
    };

    AutoComplete.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.dataStore.setOptions({ key: nextProps.value });
        }

        _Base.prototype.componentWillReceiveProps.call(this, nextProps);

        // remote dataSource and focused
        // 因为autoComplete没有下拉数据不展示，搜索并且有数据了需要自动展示下拉
        if (!nextProps.filterLocal && this.isInputing) {
            this.shouldControlPopup(nextProps, 'update');
        }

        if (!nextProps.filterLocal && !nextProps.popupContent) {
            this.setFirstHightLightKeyForMenu();
        }
    };

    AutoComplete.prototype.componentWillUpdate = function componentWillUpdate() {
        if (this.hasClear()) {
            var inputNode = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.inputRef);
            if (inputNode) {
                this.clearNode = inputNode.querySelector('.' + this.props.prefix + 'input-control');
            }
        }
    };

    AutoComplete.prototype.shouldControlPopup = function shouldControlPopup() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
        var type = arguments[1];

        var hasPopup = props.popupContent || this.dataStore.getMenuDS().length;
        if (hasPopup) {
            this.setVisible(true, type);
        } else {
            this.setVisible(false, type);
        }
    };

    AutoComplete.prototype.handleMenuSelect = function handleMenuSelect(keys) {
        var key = keys[0];
        if (this.state.value === keys[0]) {
            return this.setVisible(false, 'itemClick');
        }

        var mapDS = this.dataStore.getMapDS();

        if (key in mapDS) {
            var item = mapDS[key];
            this.handleSelectEvent(key, item, 'itemClick');
        }
    };

    AutoComplete.prototype.handleItemClick = function handleItemClick() {
        this.setVisible(false, 'itemClick');
    };

    AutoComplete.prototype.handleSelectEvent = function handleSelectEvent(key, item, triggerType) {
        var value = item && item[this.props.fillProps] || key;

        if (triggerType === 'itemClick' || triggerType === 'enter') {
            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理
            this.setVisible(false, triggerType);
        }

        this.handleChange(value, triggerType, item);
    };

    AutoComplete.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {
        if (!('visible' in this.props) && visible && !this.props.popupContent && !this.dataStore.getMenuDS().length) {
            return;
        }

        this.setVisible(visible, type);
    };

    AutoComplete.prototype.beforeClose = function beforeClose() {
        this.isInputing = false;
    };

    /**
     * Handle trigger keydown event
     * @param {Event} e
     */


    AutoComplete.prototype.handleTriggerKeyDown = function handleTriggerKeyDown(e) {
        var _props = this.props,
            popupContent = _props.popupContent,
            onToggleHighlightItem = _props.onToggleHighlightItem,
            onKeyDown = _props.onKeyDown;

        if (popupContent) {
            return onKeyDown(e);
        }

        switch (e.keyCode) {
            case KEYCODE.UP:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');
                break;
            case KEYCODE.DOWN:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');
                break;
            case KEYCODE.ENTER:
                e.preventDefault();
                this.chooseHighlightItem(e);
                break;
            case KEYCODE.SPACE:
                // 防止 Popup 监听到 space key 触发 onVisibleChange
                e.stopPropagation();
                break;
            case KEYCODE.ESC:
                e.preventDefault();
                this.state.visible && this.setVisible(false, 'esc');
                break;
            default:
                break;
        }

        onKeyDown(e);
    };

    // 回车 选择高亮的 item


    AutoComplete.prototype.chooseHighlightItem = function chooseHighlightItem() {
        if (!this.state.visible) {
            return false;
        }

        var highlightKey = this.state.highlightKey;

        var highlightItem = this.dataStore.getEnableDS().find(function (item) {
            return highlightKey === '' + item.value;
        });

        if (highlightItem) {
            this.handleSelectEvent(highlightKey, highlightItem, 'enter');
        }
    };

    AutoComplete.prototype.hasClear = function hasClear() {
        var _props2 = this.props,
            hasClear = _props2.hasClear,
            readOnly = _props2.readOnly,
            disabled = _props2.disabled;
        var value = this.state.value;


        return value && hasClear && !readOnly && !disabled;
    };

    /**
     * 选择器
     * @override
     * @param {object} props
     */


    AutoComplete.prototype.renderSelect = function renderSelect() {
        var _classNames;

        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
        var placeholder = props.placeholder,
            size = props.size,
            prefix = props.prefix,
            className = props.className,
            style = props.style,
            label = props.label,
            readOnly = props.readOnly,
            disabled = props.disabled,
            highlightHolder = props.highlightHolder,
            locale = props.locale,
            hasClear = props.hasClear,
            state = props.state,
            rtl = props.rtl;

        var others = util_obj.pickOthers(AutoComplete.propTypes, props);
        var othersData = util_obj.pickAttrsWith(others, 'data-');

        var value = this.state.value;
        var visible = this.state.visible;

        // // 下拉箭头
        // const arrowNode = this.renderArrowNode(props, () => {
        //     this.focusInput();
        //     this.setVisible(!this.state.visible);
        // });

        // trigger className
        var triggerClazz = _classnames_2_2_6_classnames_default()([prefix + 'select', prefix + 'select-auto-complete', prefix + 'size-' + size, className], (_classNames = {}, _classNames[prefix + 'active'] = visible, _classNames[prefix + 'disabled'] = disabled, _classNames));

        // highlightKey into placeholder
        // compatible with selectPlaceHolder. TODO: removed in 2.0 version
        var _placeholder = placeholder || locale.autoCompletePlaceholder || locale.autoCompletePlaceHolder;
        if (highlightHolder && visible) {
            _placeholder = this.state.highlightKey || _placeholder;
        }

        // Input props
        var _inputProps = extends_default()({}, util_obj.pickOthers(othersData, others), {
            state: state,
            ref: this.saveInputRef,
            hasClear: hasClear,
            value: value || '',
            size: size,
            disabled: disabled,
            readOnly: readOnly,
            placeholder: _placeholder,
            label: label,
            // extra: arrowNode,
            onChange: this.handleChange,
            onKeyDown: this.handleTriggerKeyDown
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({}, othersData, {
                className: triggerClazz,
                style: style,
                dir: rtl ? 'rtl' : undefined,
                ref: this.saveSelectRef,
                onClick: this.focusInput }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, _inputProps, {
                role: 'combobox',
                'aria-autocomplete': 'list',
                'aria-disabled': disabled,
                'aria-expanded': this.state.visible }))
        );
    };

    AutoComplete.prototype.render = function render() {
        var _this2 = this;

        if (this.hasClear()) {
            // clear 按钮点击后，会在 dom 结构中被删除掉，需要将其额外设置为安全节点，防止触发弹层的显示或隐藏
            var safeNode = this.props.popupProps.safeNode || [];
            var safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];
            safeNodes.push(function () {
                return _this2.clearNode;
            });
            this.props.popupProps.safeNode = safeNodes;
        }

        return _Base.prototype.render.call(this, extends_default()({}, this.props, { canCloseByTrigger: false }));
    };

    return AutoComplete;
}(select_base_Base), auto_complete__class.propTypes = extends_default()({}, select_base_Base.propTypes, {
    /**
     * 当前值，用于受控模式
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 初始化的默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * Select发生改变时触发的回调
     * @param {*} value 选中的值
     * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'change'
     * @param {*} item 选中的值的对象数据
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 传入的数据源，可以动态渲染子项
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.shape({
        value: _prop_types_15_7_2_prop_types_default.a.string,
        label: _prop_types_15_7_2_prop_types_default.a.any,
        disabled: _prop_types_15_7_2_prop_types_default.a.bool,
        children: _prop_types_15_7_2_prop_types_default.a.array
    }), _prop_types_15_7_2_prop_types_default.a.string])),
    /**
     * 填充到选择框里的值的 key，默认是 value
     */
    fillProps: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 渲染 MenuItem 内容的方法
     * @param {Object} item 渲染节点的 item
     * @return {ReactNode} item node
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    // input keydown
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    // 是否将当前高亮的选项作为 placeholder
    highlightHolder: _prop_types_15_7_2_prop_types_default.a.bool,
    style: _prop_types_15_7_2_prop_types_default.a.object
}), auto_complete__class.defaultProps = extends_default()({}, select_base_Base.defaultProps, {
    onKeyDown: auto_complete_noop,
    fillProps: 'value'
}), auto_complete__temp);


/* harmony default export */ var auto_complete = (auto_complete_AutoComplete);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/option.js




var option__class, option__temp;




/* istanbul ignore file */

/**
 * Select.Option
 */
var option_Option = (option__temp = option__class = function (_React$Component) {
  inherits_default()(Option, _React$Component);

  function Option() {
    classCallCheck_default()(this, Option);

    return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
  }

  Option.prototype.render = function render() {
    return this.props.children;
  };

  return Option;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), option__class.propTypes = {
  /**
   * 选项值
   */
  value: _prop_types_15_7_2_prop_types_default.a.any.isRequired,
  /**
   * 是否禁用
   */
  disabled: _prop_types_15_7_2_prop_types_default.a.bool,
  children: _prop_types_15_7_2_prop_types_default.a.any
}, option__class._typeMark = 'next_select_option', option__temp);
option_Option.displayName = 'Option';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/option-group.js




var option_group__class, option_group__temp;




/* istanbul ignore file */

/**
 * Select.OptionGroup
 */
var option_group_OptionGroup = (option_group__temp = option_group__class = function (_React$Component) {
    inherits_default()(OptionGroup, _React$Component);

    function OptionGroup() {
        classCallCheck_default()(this, OptionGroup);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    OptionGroup.prototype.render = function render() {
        return this.props.children;
    };

    return OptionGroup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), option_group__class.propTypes = {
    /**
     * 设置分组的文案
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, option_group__class._typeMark = 'next_select_option_group', option_group__temp);
option_group_OptionGroup.displayName = 'OptionGroup';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/select/index.js







select_select.AutoComplete = config_provider.config(auto_complete, {
    componentName: 'Select'
});

select_select.Option = option_Option;
select_select.OptionGroup = option_group_OptionGroup;

// compatible with 0.x version
/* istanbul ignore next */
function _transform(props, deprecated) {
    var shape = props.shape,
        container = props.container,
        multiple = props.multiple,
        filterBy = props.filterBy,
        overlay = props.overlay,
        safeNode = props.safeNode,
        noFoundContent = props.noFoundContent,
        others = objectWithoutProperties_default()(props, ['shape', 'container', 'multiple', 'filterBy', 'overlay', 'safeNode', 'noFoundContent']);

    var newprops = others;
    if (shape === 'arrow-only') {
        deprecated('shape=arrow-only', 'hasBorder=false', 'Select');
        newprops.hasBorder = false;
    }
    if (container) {
        deprecated('container', 'popupContainer', 'Select');
        newprops.popupContainer = container;
    }
    if (multiple) {
        deprecated('multiple', 'mode=multiple', 'Select');
        newprops.mode = 'multiple';
    }
    if (filterBy) {
        deprecated('filterBy', 'filter', 'Select');
        newprops.filter = filterBy;
    }
    if (overlay) {
        deprecated('overlay', 'popupContent', 'Select');
        newprops.popupContent = overlay;
        newprops.autoWidth = false;
    }

    if (noFoundContent) {
        deprecated('noFoundContent', 'notFoundContent', 'Select');
        newprops.notFoundContent = noFoundContent;
    }

    if (safeNode) {
        deprecated('safeNode', 'popupProps={safeNode}', 'Select');
        newprops.popupProps = {
            safeNode: safeNode
        };
    }

    return newprops;
}

// compatible with 0.x version: Select.Combobox
select_select.Combobox = config_provider.config(select_select, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Select.Combobox', '<Select showSearch={true}/>', 'Select');

        var newprops = _transform(props, deprecated);
        if (props.onInputUpdate) {
            newprops.onSearch = props.onInputUpdate;
            newprops.showSearch = true;
        }
        return newprops;
    }
});

/* harmony default export */ var es_select = (config_provider.config(select_select, {
    transform: _transform,
    exportNames: ['focusInput']
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/head/card-header.js




var card_header__class, card_header__temp2;






var card_header_CardHeader = (card_header__temp2 = card_header__class = function (_React$PureComponent) {
    inherits_default()(CardHeader, _React$PureComponent);

    function CardHeader() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, CardHeader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.selectContainerHandler = function (target) {
            return target.parentNode;
        }, _this.onYearChange = function (year) {
            var _this$props = _this.props,
                visibleMonth = _this$props.visibleMonth,
                changeVisibleMonth = _this$props.changeVisibleMonth;

            changeVisibleMonth(visibleMonth.clone().year(year), 'yearSelect');
        }, _this.changeVisibleMonth = function (month) {
            var _this$props2 = _this.props,
                visibleMonth = _this$props2.visibleMonth,
                changeVisibleMonth = _this$props2.changeVisibleMonth;

            changeVisibleMonth(visibleMonth.clone().month(month), 'monthSelect');
        }, _this.onModePanelChange = function (mode) {
            _this.props.changeMode(mode);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    CardHeader.prototype.getYearSelect = function getYearSelect(year) {
        var _props = this.props,
            prefix = _props.prefix,
            yearRangeOffset = _props.yearRangeOffset;

        var startYear = year - yearRangeOffset;
        var endYear = year + yearRangeOffset;

        var options = [];
        for (var i = startYear; i < endYear; i++) {
            options.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_select.Option,
                { key: i, value: i },
                i
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_select,
            {
                prefix: prefix,
                value: year,
                onChange: this.onYearChange,
                popupContainer: this.selectContainerHandler },
            options
        );
    };

    CardHeader.prototype.getMonthSelect = function getMonthSelect(month) {
        var _props2 = this.props,
            prefix = _props2.prefix,
            momentLocale = _props2.momentLocale;

        var localeMonths = momentLocale.monthsShort();
        var options = [];
        for (var i = 0; i < 12; i++) {
            options.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_select.Option,
                { key: i, value: i },
                localeMonths[i]
            ));
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_select,
            {
                prefix: prefix,
                value: month,
                onChange: this.changeVisibleMonth,
                popupContainer: this.selectContainerHandler },
            options
        );
    };

    CardHeader.prototype.render = function render() {
        var _props3 = this.props,
            prefix = _props3.prefix,
            mode = _props3.mode,
            locale = _props3.locale,
            visibleMonth = _props3.visibleMonth;


        var yearSelect = this.getYearSelect(visibleMonth.year());
        var monthSelect = mode === 'month' ? null : this.getMonthSelect(visibleMonth.month());
        var panelSelect = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_radio.Group,
            { shape: 'button', size: 'medium', value: mode, onChange: this.onModePanelChange },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_radio,
                { value: 'date' },
                locale.month
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_radio,
                { value: 'month' },
                locale.year
            )
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'calendar-header' },
            yearSelect,
            monthSelect,
            panelSelect
        );
    };

    return CardHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent), card_header__class.propTypes = {
    yearRangeOffset: _prop_types_15_7_2_prop_types_default.a.number
}, card_header__class.defaultProps = {
    yearRangeOffset: 10
}, card_header__temp2);


/* harmony default export */ var card_header = (card_header_CardHeader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/head/date-panel-header.js






var date_panel_header_DatePanelHeader = function (_React$PureComponent) {
    inherits_default()(DatePanelHeader, _React$PureComponent);

    function DatePanelHeader() {
        classCallCheck_default()(this, DatePanelHeader);

        return possibleConstructorReturn_default()(this, _React$PureComponent.apply(this, arguments));
    }

    DatePanelHeader.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            visibleMonth = _props.visibleMonth,
            momentLocale = _props.momentLocale,
            locale = _props.locale,
            changeMode = _props.changeMode,
            goNextMonth = _props.goNextMonth,
            goNextYear = _props.goNextYear,
            goPrevMonth = _props.goPrevMonth,
            goPrevYear = _props.goPrevYear;


        var localedMonths = momentLocale.months();
        var monthLabel = localedMonths[visibleMonth.month()];
        var yearLable = visibleMonth.year();
        var btnCls = prefix + 'calendar-btn';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'calendar-panel-header' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevYear,
                    className: btnCls + ' ' + btnCls + '-prev-year',
                    onClick: goPrevYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevMonth,
                    className: btnCls + ' ' + btnCls + '-prev-month',
                    onClick: goPrevMonth },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-panel-header-full' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', className: btnCls, title: monthLabel, onClick: function onClick() {
                            return changeMode('month', 'start');
                        } },
                    monthLabel
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', className: btnCls, title: yearLable, onClick: function onClick() {
                            return changeMode('year', 'start');
                        } },
                    yearLable
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextMonth,
                    className: btnCls + ' ' + btnCls + '-next-month',
                    onClick: goNextMonth },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextYear,
                    className: btnCls + ' ' + btnCls + '-next-year',
                    onClick: goNextYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-right' })
            )
        );
    };

    return DatePanelHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent);

/* harmony default export */ var date_panel_header = (date_panel_header_DatePanelHeader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/head/month-panel-header.js






var month_panel_header_MonthPanelHeader = function (_React$PureComponent) {
    inherits_default()(MonthPanelHeader, _React$PureComponent);

    function MonthPanelHeader() {
        classCallCheck_default()(this, MonthPanelHeader);

        return possibleConstructorReturn_default()(this, _React$PureComponent.apply(this, arguments));
    }

    MonthPanelHeader.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            visibleMonth = _props.visibleMonth,
            locale = _props.locale,
            changeMode = _props.changeMode,
            goPrevYear = _props.goPrevYear,
            goNextYear = _props.goNextYear;

        var yearLabel = visibleMonth.year();
        var btnCls = prefix + 'calendar-btn';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'calendar-panel-header' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevYear,
                    className: btnCls + ' ' + btnCls + '-prev-year',
                    onClick: goPrevYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-panel-header-full' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: yearLabel, className: '' + btnCls, onClick: function onClick() {
                            return changeMode('year');
                        } },
                    yearLabel
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextYear,
                    className: btnCls + ' ' + btnCls + '-next-year',
                    onClick: goNextYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-right' })
            )
        );
    };

    return MonthPanelHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent);

/* harmony default export */ var month_panel_header = (month_panel_header_MonthPanelHeader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/head/year-panel-header.js






var year_panel_header_YearPanelHeader = function (_React$PureComponent) {
    inherits_default()(YearPanelHeader, _React$PureComponent);

    function YearPanelHeader() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, YearPanelHeader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.getDecadeLabel = function (date) {
            var year = date.year();
            var start = parseInt(year / 10, 10) * 10;
            var end = start + 9;
            return start + '-' + end;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    YearPanelHeader.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            visibleMonth = _props.visibleMonth,
            locale = _props.locale,
            goPrevDecade = _props.goPrevDecade,
            goNextDecade = _props.goNextDecade;

        var decadeLable = this.getDecadeLabel(visibleMonth);
        var btnCls = prefix + 'calendar-btn';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'calendar-panel-header' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevDecade,
                    className: btnCls + ' ' + btnCls + '-prev-decade',
                    onClick: goPrevDecade },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-panel-header-full' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: decadeLable, className: btnCls },
                    decadeLable
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextDecade,
                    className: btnCls + ' ' + btnCls + '-next-decade',
                    onClick: goNextDecade },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-right' })
            )
        );
    };

    return YearPanelHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent);

/* harmony default export */ var year_panel_header = (year_panel_header_YearPanelHeader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/table/date-table-head.js






var date_table_head_DateTableHead = function (_PureComponent) {
    inherits_default()(DateTableHead, _PureComponent);

    function DateTableHead() {
        classCallCheck_default()(this, DateTableHead);

        return possibleConstructorReturn_default()(this, _PureComponent.apply(this, arguments));
    }

    DateTableHead.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            momentLocale = _props.momentLocale;

        var firstDayOfWeek = momentLocale.firstDayOfWeek();
        var weekdaysShort = momentLocale.weekdaysShort();

        var elements = [];
        for (var i = 0; i < DAYS_OF_WEEK; i++) {
            var index = (firstDayOfWeek + i) % DAYS_OF_WEEK;
            elements.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'th',
                { key: i, className: prefix + 'calendar-th', role: 'cell' },
                weekdaysShort[index]
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'thead',
            { className: prefix + 'calendar-thead', role: 'rowgroup' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { role: 'row' },
                elements
            )
        );
    };

    return DateTableHead;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["PureComponent"]);

/* harmony default export */ var date_table_head = (date_table_head_DateTableHead);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/table/date-table.js









function date_table_isSameDay(a, b) {
    return a && b && a.isSame(b, 'day');
}

function isRangeDate(date, startDate, endDate) {
    return date.format('L') !== startDate.format('L') && date.format('L') !== endDate.format('L') && date.valueOf() > startDate.valueOf() && date.valueOf() < endDate.valueOf();
}

function isLastMonthDate(date, target) {
    if (date.year() < target.year()) {
        return 1;
    }
    return date.year() === target.year() && date.month() < target.month();
}

function isNextMonthDate(date, target) {
    if (date.year() > target.year()) {
        return 1;
    }
    return date.year() === target.year() && date.month() > target.month();
}

var date_table_DateTable = function (_PureComponent) {
    inherits_default()(DateTable, _PureComponent);

    function DateTable() {
        classCallCheck_default()(this, DateTable);

        return possibleConstructorReturn_default()(this, _PureComponent.apply(this, arguments));
    }

    DateTable.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            visibleMonth = _props.visibleMonth,
            showOtherMonth = _props.showOtherMonth,
            endValue = _props.endValue,
            format = _props.format,
            today = _props.today,
            momentLocale = _props.momentLocale,
            dateCellRender = _props.dateCellRender,
            disabledDate = _props.disabledDate,
            onSelectDate = _props.onSelectDate;

        var startValue = this.props.startValue || this.props.value;

        var firstDayOfMonth = visibleMonth.clone().startOf('month'); // 该月的 1 号
        var firstDayOfMonthInWeek = firstDayOfMonth.day(); // 星期几

        var firstDayOfWeek = momentLocale.firstDayOfWeek();

        var datesOfLastMonthCount = (firstDayOfMonthInWeek + DAYS_OF_WEEK - firstDayOfWeek) % DAYS_OF_WEEK;

        var lastMonthDate = firstDayOfMonth.clone();
        lastMonthDate.add(0 - datesOfLastMonthCount, 'days');

        var counter = 0;
        var currentDate = void 0;
        var dateList = [];
        for (var i = 0; i < CALENDAR_TABLE_ROW_COUNT; i++) {
            for (var j = 0; j < CALENDAR_TABLE_COL_COUNT; j++) {
                currentDate = lastMonthDate;
                if (counter) {
                    currentDate = currentDate.clone();
                    currentDate.add(counter, 'days');
                }
                dateList.push(currentDate);
                counter++;
            }
        }

        counter = 0; // reset counter
        var monthElements = [];
        for (var _i = 0; _i < CALENDAR_TABLE_ROW_COUNT; _i++) {
            var weekElements = [];
            for (var _j = 0; _j < CALENDAR_TABLE_COL_COUNT; _j++) {
                var _classNames;

                currentDate = dateList[counter];
                var isLastMonth = isLastMonthDate(currentDate, visibleMonth);
                var isNextMonth = isNextMonthDate(currentDate, visibleMonth);
                var isCurrentMonth = !isLastMonth && !isNextMonth;

                var isDisabled = isDisabledDate(currentDate, disabledDate);
                var isToday = !isDisabled && date_table_isSameDay(currentDate, today) && isCurrentMonth;
                var isSelected = !isDisabled && (date_table_isSameDay(currentDate, startValue) || date_table_isSameDay(currentDate, endValue)) && isCurrentMonth;
                var isInRange = !isDisabled && startValue && endValue && isRangeDate(currentDate, startValue, endValue) && isCurrentMonth;

                var cellContent = !showOtherMonth && !isCurrentMonth ? null : dateCellRender(currentDate);

                var elementCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'calendar-cell'] = true, _classNames[prefix + 'calendar-cell-prev-month'] = isLastMonth, _classNames[prefix + 'calendar-cell-next-month'] = isNextMonth, _classNames[prefix + 'calendar-cell-current'] = isToday, _classNames[prefix + 'inrange'] = isInRange, _classNames[prefix + 'selected'] = isSelected, _classNames[prefix + 'disabled'] = cellContent && isDisabled, _classNames));

                weekElements.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'td',
                    {
                        key: counter,
                        title: currentDate.format(format),
                        onClick: isDisabled ? undefined : onSelectDate.bind(null, currentDate),
                        className: elementCls,
                        role: 'cell',
                        'aria-disabled': isDisabled ? 'true' : 'false',
                        'aria-selected': isSelected ? 'true' : 'false' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'calendar-date' },
                        cellContent
                    )
                ));
                counter++;
            }
            monthElements.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { key: _i, role: 'row' },
                weekElements
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'table',
            { className: prefix + 'calendar-table', role: 'grid' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(date_table_head, extends_default()({}, this.props, { momentLocale: momentLocale })),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tbody',
                { className: prefix + 'calendar-tbody', role: 'rowgroup' },
                monthElements
            )
        );
    };

    return DateTable;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["PureComponent"]);

/* harmony default export */ var date_table = (date_table_DateTable);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/table/month-table.js







function isSameMonth(currentDate, selectedDate) {
    return selectedDate && currentDate.year() === selectedDate.year() && currentDate.month() === selectedDate.month();
}

var month_table_MonthTable = function (_PureComponent) {
    inherits_default()(MonthTable, _PureComponent);

    function MonthTable() {
        classCallCheck_default()(this, MonthTable);

        return possibleConstructorReturn_default()(this, _PureComponent.apply(this, arguments));
    }

    MonthTable.prototype.onMonthCellClick = function onMonthCellClick(date) {
        this.props.onSelectMonth(date, 'date');
    };

    MonthTable.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            value = _props.value,
            visibleMonth = _props.visibleMonth,
            disabledDate = _props.disabledDate,
            today = _props.today,
            momentLocale = _props.momentLocale,
            monthCellRender = _props.monthCellRender;


        var monthLocale = momentLocale.monthsShort();

        var counter = 0;
        var monthList = [];
        for (var i = 0; i < MONTH_TABLE_ROW_COUNT; i++) {
            var rowList = [];
            for (var j = 0; j < MONTH_TABLE_COL_COUNT; j++) {
                var _classnames;

                var monthDate = visibleMonth.clone().month(counter);
                var isDisabled = isDisabledDate(monthDate, disabledDate);
                var isSelected = isSameMonth(monthDate, value);
                var isThisMonth = isSameMonth(monthDate, today);
                var elementCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'calendar-cell'] = true, _classnames[prefix + 'calendar-cell-current'] = isThisMonth, _classnames[prefix + 'selected'] = isSelected, _classnames[prefix + 'disabled'] = isDisabled, _classnames));
                var localedMonth = monthLocale[counter];
                var monthCellContent = monthCellRender ? monthCellRender(monthDate) : localedMonth;
                rowList.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'td',
                    {
                        key: counter,
                        title: localedMonth,
                        onClick: isDisabled ? undefined : this.onMonthCellClick.bind(this, monthDate),
                        className: elementCls,
                        role: 'cell',
                        'aria-disabled': isDisabled ? 'true' : 'false',
                        'aria-selected': isSelected ? 'true' : 'false' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'calendar-month' },
                        monthCellContent
                    )
                ));
                counter++;
            }
            monthList.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { key: i, role: 'row' },
                rowList
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'table',
            { className: prefix + 'calendar-table', role: 'grid' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tbody',
                { className: prefix + 'calendar-tbody', role: 'rowgroup' },
                monthList
            )
        );
    };

    return MonthTable;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["PureComponent"]);

/* harmony default export */ var month_table = (month_table_MonthTable);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/table/year-table.js








var year_table_YearTable = function (_React$PureComponent) {
    inherits_default()(YearTable, _React$PureComponent);

    function YearTable() {
        classCallCheck_default()(this, YearTable);

        return possibleConstructorReturn_default()(this, _React$PureComponent.apply(this, arguments));
    }

    YearTable.prototype.onYearCellClick = function onYearCellClick(date) {
        this.props.onSelectYear(date, 'month');
    };

    YearTable.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            value = _props.value,
            today = _props.today,
            visibleMonth = _props.visibleMonth,
            locale = _props.locale,
            disabledDate = _props.disabledDate,
            goPrevDecade = _props.goPrevDecade,
            goNextDecade = _props.goNextDecade;

        var currentYear = today.year();
        var selectedYear = value ? value.year() : null;
        var visibleYear = visibleMonth.year();
        var startYear = Math.floor(visibleYear / 10) * 10;

        var yearElements = [];
        var counter = 0;

        var lastRowIndex = YEAR_TABLE_ROW_COUNT - 1;
        var lastColIndex = YEAR_TABLE_COL_COUNT - 1;

        for (var i = 0; i < YEAR_TABLE_ROW_COUNT; i++) {
            var rowElements = [];
            for (var j = 0; j < YEAR_TABLE_COL_COUNT; j++) {
                var _classnames;

                var content = void 0;
                var year = void 0;
                var isDisabled = false;
                var onClick = void 0;
                var title = void 0;

                if (i === 0 && j === 0) {
                    title = locale.prevDecade;
                    onClick = goPrevDecade;
                    content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left', size: 'xs' });
                } else if (i === lastRowIndex && j === lastColIndex) {
                    title = locale.nextDecade;
                    onClick = goNextDecade;
                    content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right', size: 'xs' });
                } else {
                    year = startYear + counter++;
                    content = year;
                    title = year;
                    var yearDate = visibleMonth.clone().year(year);
                    isDisabled = isDisabledDate(yearDate, disabledDate);

                    !isDisabled && (onClick = this.onYearCellClick.bind(this, yearDate));
                }

                var isSelected = year === selectedYear;

                var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'calendar-cell'] = true, _classnames[prefix + 'calendar-cell-current'] = year === currentYear, _classnames[prefix + 'selected'] = isSelected, _classnames[prefix + 'disabled'] = isDisabled, _classnames));

                rowElements.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'td',
                    { key: i + '-' + j, className: classNames, role: 'cell' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        {
                            className: prefix + 'calendar-year',
                            onClick: onClick,
                            title: title,
                            'aria-disabled': isDisabled ? 'true' : 'false',
                            'aria-selected': isSelected ? 'true' : 'false' },
                        content
                    )
                ));
            }
            yearElements.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { key: i, role: 'row' },
                rowElements
            ));
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'table',
            { className: prefix + 'calendar-table', role: 'grid' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tbody',
                { className: prefix + 'calendar-tbody', role: 'rowgroup' },
                yearElements
            )
        );
    };

    return YearTable;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent);

/* harmony default export */ var year_table = (year_table_YearTable);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/calendar.js






var calendar__class, calendar__temp, calendar__initialiseProps;
















/** Calendar */
var calendar_Calendar = (calendar__temp = calendar__class = function (_Component) {
    inherits_default()(Calendar, _Component);

    function Calendar(props, context) {
        classCallCheck_default()(this, Calendar);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        calendar__initialiseProps.call(_this);

        var value = formatDateValue(props.value || props.defaultValue);
        var visibleMonth = getVisibleMonth(props.defaultVisibleMonth, value);

        _this.MODES = props.modes;
        _this.today = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()();
        _this.state = {
            value: value,
            mode: props.mode || _this.MODES[0],
            visibleMonth: visibleMonth
        };
        return _this;
    }

    Calendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = formatDateValue(nextProps.value);
            this.setState({
                value: value
            });

            if (value) {
                this.setState({
                    visibleMonth: value
                });
            }
        }

        if (nextProps.mode && this.MODES.indexOf(nextProps.mode) > -1) {
            this.setState({
                mode: nextProps.mode
            });
        }
    };

    /**
     * 根据日期偏移量设置当前展示的月份
     * @param {Number} offset 日期偏移的数量
     * @param {String} type 日期偏移的类型 days, months, years
     */
    Calendar.prototype.changeVisibleMonthByOffset = function changeVisibleMonthByOffset(offset, type) {
        var cloneValue = this.state.visibleMonth.clone();
        cloneValue.add(offset, type);
        this.changeVisibleMonth(cloneValue, 'buttonClick');
    };

    Calendar.prototype.render = function render() {
        var _classnames, _tables, _panelHeaders;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            className = _props.className,
            shape = _props.shape,
            showOtherMonth = _props.showOtherMonth,
            format = _props.format,
            locale = _props.locale,
            dateCellRender = _props.dateCellRender,
            monthCellRender = _props.monthCellRender,
            disabledDate = _props.disabledDate,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'className', 'shape', 'showOtherMonth', 'format', 'locale', 'dateCellRender', 'monthCellRender', 'disabledDate']);

        var state = this.state;

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'calendar'] = true, _classnames[prefix + 'calendar-' + shape] = shape, _classnames), className);

        if (rtl) {
            others.dir = 'rtl';
        }

        var visibleMonth = state.visibleMonth;

        // reset moment locale
        if (locale.momentLocale) {
            state.value && state.value.locale(locale.momentLocale);
            visibleMonth.locale(locale.momentLocale);
        }

        var localeData = visibleMonth.localeData();

        var headerProps = {
            prefix: prefix,
            value: state.value,
            mode: state.mode,
            locale: locale,
            rtl: rtl,
            visibleMonth: visibleMonth,
            momentLocale: localeData,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth,
            goNextDecade: this.goNextDecade,
            goNextYear: this.goNextYear,
            goNextMonth: this.goNextMonth,
            goPrevDecade: this.goPrevDecade,
            goPrevYear: this.goPrevYear,
            goPrevMonth: this.goPrevMonth
        };

        var tableProps = {
            prefix: prefix,
            visibleMonth: visibleMonth,
            showOtherMonth: showOtherMonth,
            value: state.value,
            mode: state.mode,
            locale: locale,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            disabledDate: disabledDate,
            momentLocale: localeData,
            today: this.today,
            goPrevDecade: this.goPrevDecade,
            goNextDecade: this.goNextDecade
        };

        var tables = (_tables = {}, _tables[CALENDAR_MODE_DATE] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(date_table, extends_default()({ format: format }, tableProps, { onSelectDate: this.onSelectCell })), _tables[CALENDAR_MODE_MONTH] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(month_table, extends_default()({}, tableProps, { onSelectMonth: this.onSelectCell })), _tables[CALENDAR_MODE_YEAR] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(year_table, extends_default()({}, tableProps, { rtl: rtl, onSelectYear: this.onSelectCell })), _tables);

        var panelHeaders = (_panelHeaders = {}, _panelHeaders[CALENDAR_MODE_DATE] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(date_panel_header, headerProps), _panelHeaders[CALENDAR_MODE_MONTH] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(month_panel_header, headerProps), _panelHeaders[CALENDAR_MODE_YEAR] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(year_panel_header, headerProps), _panelHeaders);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(Calendar.propTypes, others), { className: classNames }),
            shape === 'panel' ? panelHeaders[state.mode] : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(card_header, headerProps),
            tables[state.mode]
        );
    };

    return Calendar;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), calendar__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 默认选中的日期（moment 对象）
     */
    defaultValue: checkMomentObj,
    /**
     * 选中的日期值 (moment 对象)
     */
    value: checkMomentObj,
    // 面板模式
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(CALENDAR_MODES),
    // 面板可变化的模式列表，仅初始化时接收一次
    modes: _prop_types_15_7_2_prop_types_default.a.array,
    // 日期值的格式（用于日期title显示的格式）
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否展示非本月的日期
     */
    showOtherMonth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 默认展示的月份
     */
    defaultVisibleMonth: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 展现形态
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['card', 'fullscreen', 'panel']),
    /**
     * 选择日期单元格时的回调
     * @param {Object} value 对应的日期值 (moment 对象)
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 展现的月份变化时的回调
     * @param {Object} value 显示的月份 (moment 对象)
     * @param {String} reason 触发月份改变原因
     */
    onVisibleMonthChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义样式类
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义日期渲染函数
     * @param {Object} value 日期值（moment对象）
     * @returns {ReactNode}
     */
    dateCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义月份渲染函数
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {ReactNode}
     */
    monthCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 不可选择的日期
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {Boolean}
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 国际化配置
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, calendar__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    shape: 'fullscreen',
    modes: CALENDAR_MODES,
    format: 'YYYY-MM-DD',
    onSelect: func.noop,
    onVisibleMonthChange: func.noop,
    dateCellRender: function dateCellRender(value) {
        return value.date();
    },
    locale: zh_cn.Calendar,
    showOtherMonth: true
}, calendar__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onSelectCell = function (date, nextMode) {
        _this2.changeVisibleMonth(date, 'cellClick');

        // 当用户所在的面板为初始化面板时，则选择动作为触发 onSelect 回调
        if (_this2.state.mode === _this2.MODES[0]) {
            _this2.props.onSelect(date);
        }
        _this2.changeMode(nextMode);
    };

    this.changeMode = function (nextMode) {
        if (nextMode && _this2.MODES.indexOf(nextMode) > -1 && nextMode !== _this2.state.mode) {
            _this2.setState({ mode: nextMode });
        }
    };

    this.changeVisibleMonth = function (date, reason) {
        if (!isSameYearMonth(date, _this2.state.visibleMonth)) {
            _this2.setState({ visibleMonth: date });
            _this2.props.onVisibleMonthChange(date, reason);
        }
    };

    this.goPrevDecade = function () {
        _this2.changeVisibleMonthByOffset(-10, 'years');
    };

    this.goNextDecade = function () {
        _this2.changeVisibleMonthByOffset(10, 'years');
    };

    this.goPrevYear = function () {
        _this2.changeVisibleMonthByOffset(-1, 'years');
    };

    this.goNextYear = function () {
        _this2.changeVisibleMonthByOffset(1, 'years');
    };

    this.goPrevMonth = function () {
        _this2.changeVisibleMonthByOffset(-1, 'months');
    };

    this.goNextMonth = function () {
        _this2.changeVisibleMonthByOffset(1, 'months');
    };
}, calendar__temp);
calendar_Calendar.displayName = 'Calendar';


/* harmony default export */ var calendar = (calendar_Calendar);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/index.js





/* istanbul ignore next */
var calendar_transform = function transform(props, deprecated) {
    var type = props.type,
        onChange = props.onChange,
        base = props.base,
        disabledMonth = props.disabledMonth,
        disabledYear = props.disabledYear,
        others = objectWithoutProperties_default()(props, ['type', 'onChange', 'base', 'disabledMonth', 'disabledYear']);

    var newProps = others;

    if ('type' in props) {
        deprecated('type', 'shape', 'Calendar');

        newProps.shape = type;

        if ('shape' in props) {
            newProps.shape = props.shape;
        }
    }

    if ('base' in props) {
        deprecated('base', 'defaultVisibleMonth', 'Calendar');

        var newDefaultVisibleMonth = function newDefaultVisibleMonth() {
            preFormatDateValue(base, 'YYYY-MM-DD');
        };

        if ('defaultVisibleMonth' in props) {
            newDefaultVisibleMonth = props.defaultVisibleMonth;
        }

        newProps.defaultVisibleMonth = newDefaultVisibleMonth;
    }

    if ('onChange' in props && typeof onChange === 'function') {
        deprecated('onChange', 'onSelect', 'Calendar');

        var newOnSelect = function newOnSelect(date) {
            onChange({ mode: others.mode, value: date });

            if ('onSelect' in props) {
                props.onSelect(date);
            }
        };

        newProps.onSelect = newOnSelect;
    }

    if ('disabledMonth' in props && typeof disabledMonth === 'function') {
        deprecated('disabledMonth', 'disabledDate', 'Calendar');
    }

    if ('disabledYear' in props && typeof disabledYear === 'function') {
        deprecated('disabledYear', 'disabledDate', 'Calendar');
    }

    if ('yearCellRender' in props) {
        deprecated('yearCellRender', 'monthCellRender/dateCellRender', 'Calendar');
    }

    if ('language' in props) {
        deprecated('language', 'moment.locale', 'Calendar');
    }

    return newProps;
};

/* harmony default export */ var es_calendar = (config_provider.config(calendar, {
    transform: calendar_transform
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/card/card.js





var card__class, card__temp;

/* eslint-disable valid-jsdoc */









var card_pickOthers = util_obj.pickOthers;

/** Card */

var card_Card = (card__temp = card__class = function (_React$Component) {
    inherits_default()(Card, _React$Component);

    function Card(props, context) {
        classCallCheck_default()(this, Card);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.handleToggle = function () {
            _this.setState(function (prevState) {
                return {
                    expand: !prevState.expand
                };
            });
        };

        _this._contentRefHandler = function (ref) {
            _this.content = ref;
        };

        _this.saveFooter = function (ref) {
            _this.footer = ref;
        };

        _this.state = {
            needMore: false,
            expand: false,
            contentHeight: 'auto'
        };
        return _this;
    }

    Card.prototype.componentDidMount = function componentDidMount() {
        this._setNeedMore();
        this._setContentHeight();
    };

    Card.prototype.componentDidUpdate = function componentDidUpdate() {
        this._setContentHeight();
    };

    // 是否展示 More 按钮
    Card.prototype._setNeedMore = function _setNeedMore() {
        var contentHeight = this.props.contentHeight;

        var childrenHeight = this._getNodeChildrenHeight(this.content);
        this.setState({
            needMore: contentHeight !== 'auto' && childrenHeight > contentHeight
        });
    };

    // 设置 Body 的高度


    Card.prototype._setContentHeight = function _setContentHeight() {
        if (this.state.expand) {
            var childrenHeight = this._getNodeChildrenHeight(this.content);
            this.content.style.height = childrenHeight + 'px'; // get the real height
        } else {
            var el = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.footer);
            var height = this.props.contentHeight;

            if (el) {
                height = height - el.getBoundingClientRect().height;
            }

            this.content.style.height = height + 'px';
        }
    };

    Card.prototype._getNodeChildrenHeight = function _getNodeChildrenHeight(node) {
        if (!node) {
            return 0;
        }

        var contentChildNodes = node.childNodes;
        var length = contentChildNodes.length;

        if (!length) {
            return 0;
        }

        var lastNode = contentChildNodes[length - 1];

        return lastNode.offsetTop + lastNode.offsetHeight;
    };

    Card.prototype.render = function render() {
        var _classNames, _classNames2;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            title = _props.title,
            subTitle = _props.subTitle,
            extra = _props.extra,
            showTitleBullet = _props.showTitleBullet,
            showHeadDivider = _props.showHeadDivider,
            children = _props.children,
            locale = _props.locale;
        var _state = this.state,
            needMore = _state.needMore,
            expand = _state.expand;


        var cardCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'card'] = true, _classNames[prefix + 'card-show-divider'] = showHeadDivider, _classNames[prefix + 'card-hide-divider'] = !showHeadDivider, _classNames), className);

        var headCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'card-head'] = true, _classNames2[prefix + 'card-head-show-bullet'] = showTitleBullet, _classNames2));

        var others = card_pickOthers(Object.keys(Card.propTypes), this.props);

        var headExtra = extra ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'card-extra' },
            extra
        ) : null;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: cardCls }),
            title ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: headCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'card-head-main' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'card-title' },
                        title,
                        subTitle ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                            'span',
                            { className: prefix + 'card-subtitle' },
                            subTitle
                        ) : null
                    ),
                    headExtra
                )
            ) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'card-body' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'card-content', ref: this._contentRefHandler },
                    children
                ),
                needMore ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'card-footer', ref: this.saveFooter, onClick: this.handleToggle },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        es_button,
                        { text: true, type: 'primary' },
                        expand ? locale.fold : locale.expand,
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-down', size: 'xs', className: expand ? 'expand' : '' })
                    )
                ) : null
            )
        );
    };

    return Card;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), card__class.displayName = 'Card', card__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 卡片的标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 卡片的副标题
     */
    subTitle: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否显示标题的项目符号
     */
    showTitleBullet: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否展示头部的分隔线
     */
    showHeadDivider: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 内容区域的固定高度
     */
    contentHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 标题区域的用户自定义内容
     */
    extra: _prop_types_15_7_2_prop_types_default.a.node,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, card__class.defaultProps = {
    prefix: 'next-',
    showTitleBullet: true,
    showHeadDivider: true,
    contentHeight: 120,
    locale: zh_cn.Card
}, card__temp);
card_Card.displayName = 'Card';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/card/index.js





/* harmony default export */ var card = (config_provider.config(card_Card, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('titlePrefixLine' in props) {
            deprecated('titlePrefixLine', 'showTitleBullet', 'Card');

            var _props = props,
                titlePrefixLine = _props.titlePrefixLine,
                others = objectWithoutProperties_default()(_props, ['titlePrefixLine']);

            props = extends_default()({ showTitleBullet: titlePrefixLine }, others);
        }
        if ('titleBottomLine' in props) {
            deprecated('titleBottomLine', 'showHeadDivider', 'Card');

            var _props2 = props,
                titleBottomLine = _props2.titleBottomLine,
                _others = objectWithoutProperties_default()(_props2, ['titleBottomLine']);

            props = extends_default()({ showHeadDivider: titleBottomLine }, _others);
        }
        if ('bodyHeight' in props) {
            deprecated('bodyHeight', 'contentHeight', 'Card');

            var _props3 = props,
                bodyHeight = _props3.bodyHeight,
                _others2 = objectWithoutProperties_default()(_props3, ['bodyHeight']);

            props = extends_default()({ contentHeight: bodyHeight }, _others2);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader/menu.js






var cascader_menu__class, cascader_menu__temp;







var menu_CascaderMenu = (cascader_menu__temp = cascader_menu__class = function (_Component) {
    inherits_default()(CascaderMenu, _Component);

    function CascaderMenu() {
        classCallCheck_default()(this, CascaderMenu);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    CascaderMenu.prototype.componentDidMount = function componentDidMount() {
        this.scrollToSelectedItem();
    };

    CascaderMenu.prototype.scrollToSelectedItem = function scrollToSelectedItem() {
        var _props = this.props,
            prefix = _props.prefix,
            useVirtual = _props.useVirtual,
            children = _props.children;

        if (!children || children.length === 0) {
            return;
        }
        var selectedIndex = children.findIndex(function (item) {
            return !!item.props.checked || !!item.props.selected || !!item.props.expanded;
        });

        if (selectedIndex === -1) {
            return;
        }

        if (useVirtual) {
            var instance = this.refs.virtual.getInstance();
            setTimeout(function () {
                return instance.scrollTo(selectedIndex);
            }, 0);
        } else {
            var itemSelector = '.' + prefix + 'menu-item';
            var menu = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.refs.menu);
            var targetItem = menu.querySelectorAll(itemSelector)[selectedIndex];
            if (targetItem) {
                menu.scrollTop = targetItem.offsetTop - Math.floor((menu.clientHeight / targetItem.clientHeight - 1) / 2) * targetItem.clientHeight;
            }
        }
    };

    CascaderMenu.prototype.renderMenu = function renderMenu(items, ref, props) {
        var _this2 = this;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu,
            extends_default()({ ref: ref, role: 'listbox' }, props),
            items.map(function (node) {
                if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(node) && node.type.menuChildType === 'item') {
                    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(node, {
                        menu: _this2
                    });
                }

                return node;
            })
        );
    };

    CascaderMenu.prototype.render = function render() {
        var _this3 = this;

        var _props2 = this.props,
            prefix = _props2.prefix,
            useVirtual = _props2.useVirtual,
            className = _props2.className,
            style = _props2.style,
            children = _props2.children,
            others = objectWithoutProperties_default()(_props2, ['prefix', 'useVirtual', 'className', 'style', 'children']);

        var menuProps = extends_default()({
            labelToggleChecked: false,
            className: prefix + 'cascader-menu'
        }, others);
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { ref: 'menu', className: prefix + 'cascader-menu-wrapper ' + (className ? className : ''), style: style },
            useVirtual ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                virtual_list,
                { ref: 'virtual',
                    itemsRenderer: function itemsRenderer(items, ref) {
                        return _this3.renderMenu(items, ref, menuProps);
                    } },
                children
            ) : this.renderMenu(children, undefined, menuProps)
        );
    };

    return CascaderMenu;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), cascader_menu__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, cascader_menu__temp);
menu_CascaderMenu.displayName = 'CascaderMenu';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader/item.js





var cascader_item__class, cascader_item__temp;








var cascader_item_bindCtx = func.bindCtx;
var cascader_item_pickOthers = util_obj.pickOthers;
var item_CascaderMenuItem = (cascader_item__temp = cascader_item__class = function (_Component) {
    inherits_default()(CascaderMenuItem, _Component);

    function CascaderMenuItem(props) {
        classCallCheck_default()(this, CascaderMenuItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            loading: false
        };

        cascader_item_bindCtx(_this, ['handleExpand', 'handleClick', 'handleMouseEnter', 'handleKeyDown', 'removeLoading']);
        return _this;
    }

    CascaderMenuItem.prototype.addLoading = function addLoading() {
        this.setState({
            loading: true
        });
    };

    CascaderMenuItem.prototype.removeLoading = function removeLoading() {
        this.setState({
            loading: false
        });
    };

    CascaderMenuItem.prototype.setLoadingIfNeed = function setLoadingIfNeed(p) {
        if (p && typeof p.then === 'function') {

            this.addLoading();
            p.then(this.removeLoading).catch(this.removeLoading);
        }
    };

    CascaderMenuItem.prototype.handleExpand = function handleExpand(focusedFirstChild) {
        this.setLoadingIfNeed(this.props.onExpand(focusedFirstChild));
    };

    CascaderMenuItem.prototype.handleClick = function handleClick() {
        this.handleExpand(false);
    };

    CascaderMenuItem.prototype.handleMouseEnter = function handleMouseEnter() {
        this.handleExpand(false);
    };

    CascaderMenuItem.prototype.handleKeyDown = function handleKeyDown(e) {
        if (!this.props.disabled) {
            if (e.keyCode === KEYCODE.RIGHT || e.keyCode === KEYCODE.ENTER) {
                if (this.props.canExpand) {
                    this.handleExpand(true);
                }
            } else if (e.keyCode === KEYCODE.LEFT || e.keyCode === KEYCODE.ESC) {
                this.props.onFold();
            } else if (e.keyCode === KEYCODE.SPACE) {
                this.handleExpand(false);
            }
        }
    };

    CascaderMenuItem.prototype.render = function render() {
        var _cx;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            menu = _props.menu,
            disabled = _props.disabled,
            selected = _props.selected,
            onSelect = _props.onSelect,
            expanded = _props.expanded,
            canExpand = _props.canExpand,
            expandTriggerType = _props.expandTriggerType,
            checkable = _props.checkable,
            checked = _props.checked,
            indeterminate = _props.indeterminate,
            checkboxDisabled = _props.checkboxDisabled,
            onCheck = _props.onCheck,
            children = _props.children;

        var others = cascader_item_pickOthers(Object.keys(CascaderMenuItem.propTypes), this.props);
        var loading = this.state.loading;


        var itemProps = extends_default()({
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'cascader-menu-item'] = true, _cx[prefix + 'expanded'] = expanded, _cx[className] = !!className, _cx)),
            disabled: disabled,
            menu: menu,
            onKeyDown: this.handleKeyDown,
            role: 'option',
            'aria-expanded': expanded
        }, others);
        if (!disabled) {
            if (expandTriggerType === 'hover') {
                itemProps.onMouseEnter = this.handleMouseEnter;
            } else {
                itemProps.onClick = this.handleClick;
            }
        }

        var Item = void 0;
        if (checkable) {
            Item = es_menu.CheckboxItem;
            itemProps.checked = checked;
            itemProps.indeterminate = indeterminate;
            itemProps.checkboxDisabled = checkboxDisabled;
            itemProps.onChange = onCheck;
        } else {
            Item = es_menu.Item;
            itemProps.selected = selected;
            itemProps.onSelect = onSelect;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Item,
            itemProps,
            children,
            canExpand ? loading ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, {
                className: prefix + 'cascader-menu-icon-right ' + prefix + 'cascader-menu-icon-loading',
                type: 'loading'
            }) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, {
                className: prefix + 'cascader-menu-icon-right ' + prefix + 'cascader-menu-icon-expand',
                type: 'arrow-right'
            }) : null
        );
    };

    return CascaderMenuItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), cascader_item__class.menuChildType = 'item', cascader_item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    selected: _prop_types_15_7_2_prop_types_default.a.bool,
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    expanded: _prop_types_15_7_2_prop_types_default.a.bool,
    canExpand: _prop_types_15_7_2_prop_types_default.a.bool,
    menu: _prop_types_15_7_2_prop_types_default.a.any,
    expandTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    onExpand: _prop_types_15_7_2_prop_types_default.a.func,
    onFold: _prop_types_15_7_2_prop_types_default.a.func,
    checkable: _prop_types_15_7_2_prop_types_default.a.bool,
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    indeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
    checkboxDisabled: _prop_types_15_7_2_prop_types_default.a.bool,
    onCheck: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, cascader_item__temp);
item_CascaderMenuItem.displayName = 'CascaderMenuItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader/cascader.js





var cascader__class, cascader__temp;









var cascader_bindCtx = func.bindCtx;
var cascader_pickOthers = util_obj.pickOthers;
var cascader_addClass = dom.addClass,
    cascader_removeClass = dom.removeClass,
    cascader_setStyle = dom.setStyle,
    cascader_getStyle = dom.getStyle;

/**
 * Cascader
 */

var cascader_Cascader = (cascader__temp = cascader__class = function (_Component) {
    inherits_default()(Cascader, _Component);

    function Cascader(props, context) {
        classCallCheck_default()(this, Cascader);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        var defaultValue = props.defaultValue,
            value = props.value,
            defaultExpandedValue = props.defaultExpandedValue,
            expandedValue = props.expandedValue,
            dataSource = props.dataSource,
            multiple = props.multiple,
            checkStrictly = props.checkStrictly,
            canOnlyCheckLeaf = props.canOnlyCheckLeaf,
            loadData = props.loadData;


        _this.updateCache(dataSource);

        var normalizedValue = _this.normalizeValue(typeof value === 'undefined' ? defaultValue : value);
        if (!loadData) {
            normalizedValue = normalizedValue.filter(function (v) {
                return _this._v2n[v];
            });
        }
        // TODO loadData
        var realExpandedValue = typeof expandedValue === 'undefined' ? typeof defaultExpandedValue === 'undefined' ? _this.getExpandedValue(normalizedValue[0]) : _this.normalizeValue(defaultExpandedValue) : _this.normalizeValue(expandedValue);
        var st = {
            value: normalizedValue,
            expandedValue: realExpandedValue
        };
        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
            st.value = _this.completeValue(props.dataSource, st.value);
        }

        _this.state = st;

        _this.lastExpandedValue = [].concat(_this.state.expandedValue);

        cascader_bindCtx(_this, ['handleMouseLeave', 'handleFocus', 'handleFold', 'getCascaderNode', 'onBlur']);
        return _this;
    }

    Cascader.prototype.componentDidMount = function componentDidMount() {
        this.setCascaderInnerWidth();
    };

    Cascader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        this.updateCache(nextProps.dataSource);

        var state = {};
        if ('value' in nextProps) {
            state.value = this.normalizeValue(nextProps.value);
            if (!nextProps.loadData) {
                state.value = state.value.filter(function (v) {
                    return _this2._v2n[v];
                });
            }

            var multiple = nextProps.multiple,
                checkStrictly = nextProps.checkStrictly,
                canOnlyCheckLeaf = nextProps.canOnlyCheckLeaf;

            if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
                state.value = this.completeValue(nextProps.dataSource, state.value);
            }
            if (!this.state.expandedValue.length && !('expandedValue' in nextProps)) {
                state.expandedValue = this.getExpandedValue(state.value[0]);
            }
        }
        if ('expandedValue' in nextProps) {
            state.expandedValue = this.normalizeValue(nextProps.expandedValue);
        }
        if (Object.keys(state).length) {
            this.setState(state);
        }
    };

    Cascader.prototype.componentDidUpdate = function componentDidUpdate() {
        this.setCascaderInnerWidth();
    };

    Cascader.prototype.getCascaderNode = function getCascaderNode(ref) {
        this.cascader = ref;
        if (this.cascader) {
            this.cascaderInner = this.cascader.querySelector('.' + this.props.prefix + 'cascader-inner');
        }
    };

    Cascader.prototype.setCascaderInnerWidth = function setCascaderInnerWidth() {
        if (!this.cascaderInner) {
            return;
        }
        var menus = [].slice.call(this.cascaderInner.querySelectorAll('.' + this.props.prefix + 'cascader-menu-wrapper'));
        if (menus.length === 0) {
            return;
        }

        var menusWidth = Math.ceil(menus.reduce(function (ret, menu) {
            return ret + menu.offsetWidth;
        }, 0));
        if (cascader_getStyle(this.cascaderInner, 'width') !== menusWidth) {
            cascader_setStyle(this.cascaderInner, 'width', menusWidth);
        }

        if (cascader_getStyle(this.cascader, 'display') === 'inline-block') {
            var hasRightBorderClass = this.props.prefix + 'has-right-border';
            menus.forEach(function (menu) {
                return cascader_removeClass(menu, hasRightBorderClass);
            });
            if (this.cascader.clientWidth > menusWidth) {
                cascader_addClass(menus[menus.length - 1], hasRightBorderClass);
            }
        }
    };

    Cascader.prototype.setCache = function setCache(data) {
        var _this3 = this;

        var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

        data.forEach(function (item, index) {
            var value = item.value,
                children = item.children;

            var pos = prefix + '-' + index;
            var newValue = String(value);
            item.value = newValue;
            _this3._v2n[newValue] = _this3._p2n[pos] = extends_default()({}, item, { pos: pos, _source: item });

            if (children && children.length) {
                _this3.setCache(children, pos);
            }
        });
    };

    Cascader.prototype.updateCache = function updateCache(dataSource) {
        this._v2n = {};
        this._p2n = {};
        this.setCache(dataSource);
    };

    Cascader.prototype.normalizeValue = function normalizeValue(value) {
        if (value) {
            if (Array.isArray(value)) {
                return value;
            }

            return [value];
        }

        return [];
    };

    Cascader.prototype.getExpandedValue = function getExpandedValue(v) {
        var _this4 = this;

        if (!v || !this._v2n[v]) {
            return [];
        }

        var pos = this._v2n[v].pos;
        if (pos.split('-').length === 2) {
            return [];
        }

        var expandedMap = {};
        Object.keys(this._p2n).forEach(function (p) {
            if (_this4.isDescendantOrSelf(p, pos) && p !== pos) {
                expandedMap[_this4._p2n[p].value] = p;
            }
        });

        return Object.keys(expandedMap).sort(function (prev, next) {
            return expandedMap[prev].split('-').length - expandedMap[next].split('-').length;
        });
    };
    /*eslint-disable max-statements*/


    Cascader.prototype.completeValue = function completeValue(dataSource, value) {
        var _this5 = this;

        var filterValue = value.filter(function (v) {
            return typeof _this5._v2n[v] !== 'undefined';
        });
        var flatValue = this.flatValue(filterValue);

        var childChecked = function childChecked(child) {
            return flatValue.indexOf(child.value) > -1;
        };
        var removeValue = function removeValue(child) {
            return flatValue.splice(flatValue.indexOf(child.value), 1);
        };
        var addParentValue = function addParentValue(i, parent) {
            return flatValue.splice(i, 0, parent.value);
        };
        for (var i = 0; i < flatValue.length; i++) {
            var pos = this.getPos(flatValue[i]);
            var nums = pos.split('-');
            if (nums.length === 2) {
                break;
            }
            for (var j = nums.length - 2; j > 0; j--) {
                var parent = nums.slice(1, j + 1).reduce(function (ret, num) {
                    return ret.children[num];
                }, { children: dataSource });
                var parentChecked = parent.children.every(childChecked);
                if (parentChecked) {
                    parent.children.forEach(removeValue);
                    addParentValue(i, parent);
                } else {
                    break;
                }
            }
        }

        var newValue = [];
        if (flatValue.length) {
            // flatValue = flatValue.reverse(); TODO 后续检测大数据性能问题
            var ps = Object.keys(this._p2n);
            for (var _i = 0; _i < flatValue.length; _i++) {
                var _pos = this.getPos(flatValue[_i]);
                for (var _j = 0; _j < ps.length; _j++) {
                    if (this.isDescendantOrSelf(_pos, ps[_j])) {
                        newValue.push(this.getValue(ps[_j]));
                        ps.splice(_j, 1);
                        _j--;
                    }
                }
            }
        }

        return newValue;
    };
    /*eslint-enable*/


    Cascader.prototype.flatValue = function flatValue(value) {
        var _this6 = this;

        var getDepth = function getDepth(v) {
            return _this6.getPos(v).split('-').length;
        };
        var newValue = value.slice(0).sort(function (prev, next) {
            return getDepth(prev) - getDepth(next);
        });

        for (var i = 0; i < newValue.length; i++) {
            for (var j = 0; j < newValue.length; j++) {
                if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {
                    newValue.splice(j, 1);
                    j--;
                }
            }
        }

        return newValue;
    };

    Cascader.prototype.getValue = function getValue(pos) {
        return this._p2n[pos] ? this._p2n[pos].value : null;
    };

    Cascader.prototype.getPos = function getPos(value) {
        return this._v2n[value] ? this._v2n[value].pos : null;
    };

    Cascader.prototype.getData = function getData(value) {
        var _this7 = this;

        return value.map(function (v) {
            return _this7._v2n[v];
        });
    };

    Cascader.prototype.isDescendantOrSelf = function isDescendantOrSelf(currentPos, targetPos) {
        if (!currentPos || !targetPos) {
            return false;
        }

        var currentNums = currentPos.split('-');
        var targetNums = targetPos.split('-');

        return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };

    Cascader.prototype.isSiblingOrSelf = function isSiblingOrSelf(currentPos, targetPos) {
        var currentNums = currentPos.split('-').slice(0, -1);
        var targetNums = targetPos.split('-').slice(0, -1);

        return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };

    Cascader.prototype.processValue = function processValue(value, v, checked) {
        var index = value.indexOf(v);
        if (checked && index === -1) {
            value.push(v);
        } else if (!checked && index > -1) {
            value.splice(index, 1);
        }
    };

    Cascader.prototype.handleSelect = function handleSelect(v, canExpand) {
        var _this8 = this;

        if (!(this.props.canOnlySelectLeaf && canExpand) && this.state.value[0] !== v) {
            if (!('value' in this.props)) {
                this.setState({
                    value: [v]
                });
            }

            if ('onChange' in this.props) {
                var data = this._v2n[v];
                var nums = data.pos.split('-');
                var selectedPath = nums.slice(1).reduce(function (ret, num, index) {
                    var p = nums.slice(0, index + 2).join('-');
                    ret.push(_this8._p2n[p]);
                    return ret;
                }, []);

                this.props.onChange(v, data, {
                    selectedPath: selectedPath
                });
            }
        }

        if (canExpand) {
            if (!this.props.canOnlySelectLeaf) {
                this.lastExpandedValue = this.state.expandedValue.slice(0, -1);
            }
        } else {
            this.lastExpandedValue = [].concat(this.state.expandedValue);
        }
    };
    /*eslint-disable max-statements*/


    Cascader.prototype.handleCheck = function handleCheck(v, checked) {
        var _this9 = this;

        var _props = this.props,
            checkStrictly = _props.checkStrictly,
            canOnlyCheckLeaf = _props.canOnlyCheckLeaf;

        var value = [].concat(this.state.value);

        if (checkStrictly || canOnlyCheckLeaf) {
            this.processValue(value, v, checked);
        } else {
            var pos = this.getPos(v);

            var ps = Object.keys(this._p2n);
            ps.forEach(function (p) {
                if (_this9.isDescendantOrSelf(pos, p)) {
                    _this9.processValue(value, _this9.getValue(p), checked);
                }
            });

            var currentPos = pos;
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentChecked = true;
                for (var j = 0; j < ps.length; j++) {
                    var p = ps[j];
                    if (!this.isSiblingOrSelf(currentPos, p)) {
                        continue;
                    }
                    var _v = this.getValue(p);
                    if (value.indexOf(_v) === -1) {
                        parentChecked = false;
                        break;
                    }
                }
                var parentPos = nums.slice(0, i - 1).join('-');
                this.processValue(value, this.getValue(parentPos), parentChecked);

                currentPos = parentPos;
            }
        }

        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }

        if ('onChange' in this.props) {
            if (checkStrictly || canOnlyCheckLeaf) {
                var data = this.getData(value);
                this.props.onChange(value, data, {
                    checked: checked,
                    currentData: this._v2n[v],
                    checkedData: data
                });
            } else {
                var flatValue = this.flatValue(value);
                var flatData = this.getData(flatValue);
                var checkedData = this.getData(value);
                var indeterminateValue = this.getIndeterminate(value);
                var indeterminateData = this.getData(indeterminateValue);
                this.props.onChange(flatValue, flatData, {
                    checked: checked,
                    currentData: this._v2n[v],
                    checkedData: checkedData,
                    indeterminateData: indeterminateData
                });
            }
        }

        this.lastExpandedValue = [].concat(this.state.expandedValue);
    };

    Cascader.prototype.handleExpand = function handleExpand(value, level, canExpand, focusedFirstChild) {
        var _this10 = this;

        var expandedValue = this.state.expandedValue;


        if (canExpand || expandedValue.length > level) {
            if (canExpand) {
                expandedValue.splice(level, expandedValue.length - level, value);
            } else {
                expandedValue.splice(level);
            }

            var callback = function callback() {
                _this10.setExpandValue(expandedValue);

                if (focusedFirstChild) {
                    var endExpandedValue = expandedValue[expandedValue.length - 1];
                    _this10.setState({
                        focusedValue: _this10._v2n[endExpandedValue].children[0].value
                    });
                }
            };

            var loadData = this.props.loadData;

            if (canExpand && loadData) {
                var data = this._v2n[value];
                return loadData(data, data._source).then(callback);
            } else {
                return callback();
            }
        }
    };

    Cascader.prototype.handleMouseLeave = function handleMouseLeave() {
        this.setExpandValue([].concat(this.lastExpandedValue));
    };

    Cascader.prototype.setExpandValue = function setExpandValue(expandedValue) {
        if (!('expandedValue' in this.props)) {
            this.setState({
                expandedValue: expandedValue
            });
        }

        if ('onExpand' in this.props) {
            this.props.onExpand(expandedValue);
        }
    };

    Cascader.prototype.getFirstFocusKeyByDataSource = function getFirstFocusKeyByDataSource(dataSource) {
        if (!dataSource || dataSource.length === 0) {
            return '';
        }

        for (var i = 0; i < dataSource.length; i++) {
            if (dataSource[i] && !dataSource[i].disabled) {
                return dataSource[i].value;
            }
        }

        return '';
    };

    Cascader.prototype.getFirstFocusKeyByFilteredPaths = function getFirstFocusKeyByFilteredPaths(filteredPaths) {
        if (!filteredPaths || filteredPaths.length === 0) {
            return '';
        }

        for (var i = 0; i < filteredPaths.length; i++) {
            var path = filteredPaths[i];
            if (!path.some(function (item) {
                return item.disabled;
            })) {
                var lastItem = path[path.length - 1];
                return lastItem.value;
            }
        }

        return '';
    };

    Cascader.prototype.getFirstFocusKey = function getFirstFocusKey() {
        var _props2 = this.props,
            dataSource = _props2.dataSource,
            searchValue = _props2.searchValue,
            filteredPaths = _props2.filteredPaths;


        return !searchValue ? this.getFirstFocusKeyByDataSource(dataSource) : this.getFirstFocusKeyByFilteredPaths(filteredPaths);
    };

    Cascader.prototype.setFocusValue = function setFocusValue() {
        this.setState({
            focusedValue: this.getFirstFocusKey()
        });
    };

    Cascader.prototype.handleFocus = function handleFocus(focusedValue) {
        this.setState({
            focusedValue: focusedValue
        });
    };

    Cascader.prototype.handleFold = function handleFold() {
        var expandedValue = this.state.expandedValue;

        if (expandedValue.length > 0) {
            this.setExpandValue(expandedValue.slice(0, -1));
        }

        this.setState({
            focusedValue: expandedValue[expandedValue.length - 1]
        });
    };

    Cascader.prototype.getIndeterminate = function getIndeterminate(value) {
        var _this11 = this;

        var indeterminate = [];

        var positions = this.flatValue(value).map(function (value) {
            return _this11.getPos(value);
        });
        positions.forEach(function (pos) {
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentValue = _this11.getValue(parentPos);
                if (indeterminate.indexOf(parentValue) === -1) {
                    indeterminate.push(parentValue);
                }
            }
        });

        return indeterminate;
    };

    Cascader.prototype.onBlur = function onBlur(e) {
        this.setState({
            focusedValue: ''
        });

        this.props.onBlur && this.props.onBlur(e);
    };

    Cascader.prototype.renderMenu = function renderMenu(data, level) {
        var _this12 = this;

        var _props3 = this.props,
            prefix = _props3.prefix,
            multiple = _props3.multiple,
            useVirtual = _props3.useVirtual,
            checkStrictly = _props3.checkStrictly,
            expandTriggerType = _props3.expandTriggerType,
            loadData = _props3.loadData,
            canOnlyCheckLeaf = _props3.canOnlyCheckLeaf,
            listClassName = _props3.listClassName,
            listStyle = _props3.listStyle,
            itemRender = _props3.itemRender;
        var _state = this.state,
            value = _state.value,
            expandedValue = _state.expandedValue,
            focusedValue = _state.focusedValue;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            menu_CascaderMenu,
            {
                key: level,
                prefix: prefix,
                useVirtual: useVirtual,
                className: listClassName,
                style: listStyle,
                ref: this.saveMenuRef,
                focusedKey: focusedValue,
                onItemFocus: this.handleFocus,
                onBlur: this.onBlur
            },
            data.map(function (item) {
                var disabled = !!item.disabled;
                var canExpand = !!item.children && !!item.children.length || !!loadData && !item.isLeaf;
                var expanded = expandedValue[level] === item.value;
                var props = {
                    prefix: prefix,
                    disabled: disabled,
                    canExpand: canExpand,
                    expanded: expanded,
                    expandTriggerType: expandTriggerType,
                    onExpand: _this12.handleExpand.bind(_this12, item.value, level, canExpand),
                    onFold: _this12.handleFold
                };

                if (multiple) {
                    props.checkable = !(canOnlyCheckLeaf && canExpand);
                    props.checked = value.indexOf(item.value) > -1;
                    props.indeterminate = checkStrictly || canOnlyCheckLeaf ? false : _this12.indeterminate.indexOf(item.value) > -1;
                    props.checkboxDisabled = !!item.checkboxDisabled;
                    props.onCheck = _this12.handleCheck.bind(_this12, item.value);
                } else {
                    props.selected = value[0] === item.value;
                    props.onSelect = _this12.handleSelect.bind(_this12, item.value, canExpand);
                }

                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    item_CascaderMenuItem,
                    extends_default()({ key: item.value }, props),
                    itemRender(item)
                );
            })
        );
    };

    Cascader.prototype.renderMenus = function renderMenus() {
        var dataSource = this.props.dataSource;
        var expandedValue = this.state.expandedValue;


        var menus = [];
        var data = dataSource;

        for (var i = 0; i <= expandedValue.length; i++) {
            if (!data) {
                break;
            }

            menus.push(this.renderMenu(data, i));

            var expandedItem = void 0;
            for (var j = 0; j < data.length; j++) {
                if (data[j].value === expandedValue[i]) {
                    expandedItem = data[j];
                    break;
                }
            }
            data = expandedItem ? expandedItem.children : null;
        }

        return menus;
    };

    Cascader.prototype.renderFilteredItem = function renderFilteredItem(path) {
        var _props4 = this.props,
            prefix = _props4.prefix,
            resultRender = _props4.resultRender,
            searchValue = _props4.searchValue,
            multiple = _props4.multiple;
        var value = this.state.value;

        var lastItem = path[path.length - 1];

        var Item = void 0;
        var props = {
            key: lastItem.value,
            className: prefix + 'cascader-filtered-item',
            disabled: path.some(function (item) {
                return item.disabled;
            }),
            children: resultRender(searchValue, path)
        };

        if (multiple) {
            Item = es_menu.CheckboxItem;
            var _props5 = this.props,
                checkStrictly = _props5.checkStrictly,
                canOnlyCheckLeaf = _props5.canOnlyCheckLeaf;

            props.checked = value.indexOf(lastItem.value) > -1;
            props.indeterminate = !checkStrictly && !canOnlyCheckLeaf && this.indeterminate.indexOf(lastItem.value) > -1;
            props.checkboxDisabled = lastItem.checkboxDisabled;
            props.onChange = this.handleCheck.bind(this, lastItem.value);
        } else {
            Item = es_menu.Item;
            props.selected = value[0] === lastItem.value;
            props.onSelect = this.handleSelect.bind(this, lastItem.value, false);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Item, props);
    };

    Cascader.prototype.renderFilteredList = function renderFilteredList() {
        var _this13 = this;

        var _props6 = this.props,
            prefix = _props6.prefix,
            filteredListStyle = _props6.filteredListStyle,
            filteredPaths = _props6.filteredPaths;
        var focusedValue = this.state.focusedValue;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu,
            {
                focusedKey: focusedValue,
                onItemFocus: this.handleFocus,
                className: prefix + 'cascader-filtered-list',
                style: filteredListStyle
            },
            filteredPaths.map(function (path) {
                return _this13.renderFilteredItem(path);
            })
        );
    };

    Cascader.prototype.render = function render() {
        var _cx;

        var _props7 = this.props,
            prefix = _props7.prefix,
            className = _props7.className,
            expandTriggerType = _props7.expandTriggerType,
            multiple = _props7.multiple,
            dataSource = _props7.dataSource,
            checkStrictly = _props7.checkStrictly,
            canOnlyCheckLeaf = _props7.canOnlyCheckLeaf,
            searchValue = _props7.searchValue;

        var others = cascader_pickOthers(Object.keys(Cascader.propTypes), this.props);
        var value = this.state.value;


        var props = extends_default()({
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'cascader'] = true, _cx.multiple = multiple, _cx[className] = !!className, _cx)),
            ref: 'cascader'
        }, others);
        if (expandTriggerType === 'hover') {
            props.onMouseLeave = this.handleMouseLeave;
        }

        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
            this.indeterminate = this.getIndeterminate(value);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, props, { ref: this.getCascaderNode }),
            !searchValue ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'cascader-inner' },
                dataSource && dataSource.length ? this.renderMenus() : null
            ) : this.renderFilteredList()
        );
    };

    return Cascader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), cascader__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 数据源，结构可参考下方说明
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.object),
    /**
     * （非受控）默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * （受控）当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * 选中值改变时触发的回调函数
     * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
     * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
     * @param {Object} extra 额外参数
     * @param {Array} extra.selectedPath 单选时选中的数据的路径
     * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中
     * @param {Object} extra.currentData 多选时当前操作的数据
     * @param {Array} extra.checkedData 多选时所有被选中的数据
     * @param {Array} extra.indeterminateData 多选时半选的数据
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置
     */
    defaultExpandedValue: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * （受控）当前展开值
     */
    expandedValue: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 展开触发的方式
     */
    expandTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 展开时触发的回调函数
     * @param {Array} expandedValue 各列展开值的数组
     */
    onExpand: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否开启虚拟滚动
     */
    useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否多选
     */
    multiple: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 单选时是否只能选中叶子节点
     */
    canOnlySelectLeaf: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 多选时是否只能选中叶子节点
     */
    canOnlyCheckLeaf: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 父子节点是否选中不关联
     */
    checkStrictly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 每列列表样式对象
     */
    listStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 每列列表类名
     */
    listClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 每列列表项渲染函数
     * @param {Object} data 数据
     * @return {ReactNode} 列表项内容
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 异步加载数据函数
     * @param {Object} data 当前点击异步加载的数据
     * @param {Object} source 当前点击数据
     */
    loadData: _prop_types_15_7_2_prop_types_default.a.func,
    searchValue: _prop_types_15_7_2_prop_types_default.a.string,
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    filteredPaths: _prop_types_15_7_2_prop_types_default.a.array,
    filteredListStyle: _prop_types_15_7_2_prop_types_default.a.object,
    resultRender: _prop_types_15_7_2_prop_types_default.a.func
}, cascader__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    dataSource: [],
    defaultValue: null,
    canOnlySelectLeaf: false,
    canOnlyCheckLeaf: false,
    expandTriggerType: 'click',
    multiple: false,
    useVirtual: false,
    checkStrictly: false,
    itemRender: function itemRender(item) {
        return item.label;
    }
}, cascader__temp);
cascader_Cascader.displayName = 'Cascader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader/index.js





/* harmony default export */ var cascader = (config_provider.config(cascader_Cascader, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('expandTrigger' in props) {
            deprecated('expandTrigger', 'expandTriggerType', 'Cascader');

            var _props = props,
                expandTrigger = _props.expandTrigger,
                others = objectWithoutProperties_default()(_props, ['expandTrigger']);

            props = extends_default()({ expandTriggerType: expandTrigger }, others);
        }

        if ('showItemCount' in props) {
            deprecated('showItemCount', 'listStyle | listClassName', 'Cascader');
        }
        if ('labelWidth' in props) {
            deprecated('labelWidth', 'listStyle | listClassName', 'Cascader');
        }

        return props;
    },
    exportNames: ['setFocusValue']
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader-select/cascader-select.js





var cascader_select__class, cascader_select__temp;








var cascader_select_bindCtx = func.bindCtx;
var cascader_select_pickOthers = util_obj.pickOthers;
var cascader_select_getStyle = dom.getStyle;

/**
 * CascaderSelect
 */

var cascader_select_CascaderSelect = (cascader_select__temp = cascader_select__class = function (_Component) {
    inherits_default()(CascaderSelect, _Component);

    function CascaderSelect(props, context) {
        classCallCheck_default()(this, CascaderSelect);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this.state = {
            value: _this.normalizeValue('value' in props ? props.value : props.defaultValue),
            searchValue: '',
            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible
        };

        cascader_select_bindCtx(_this, ['handleVisibleChange', 'handleAfterOpen', 'handleChange', 'handleClear', 'handleRemove', 'handleSearch', 'getPopup', 'saveSelectRef', 'saveCascaderRef', 'handleKeyDown']);
        return _this;
    }

    CascaderSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var st = {};

        if ('value' in nextProps) {
            st.value = this.normalizeValue(nextProps.value);
        }
        if ('visible' in nextProps) {
            st.visible = nextProps.visible;
        }

        if (Object.keys(st).length) {
            this.setState(st);
        }
    };

    CascaderSelect.prototype.normalizeValue = function normalizeValue(value) {
        if (value) {
            if (Array.isArray(value)) {
                return value;
            }

            return [value];
        }

        return [];
    };

    CascaderSelect.prototype.updateCache = function updateCache(dataSource) {
        var _this2 = this;

        this._v2n = {};
        this._p2n = {};
        var loop = function loop(data) {
            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
            return data.forEach(function (item, index) {
                var value = item.value,
                    children = item.children;

                var pos = prefix + '-' + index;
                _this2._v2n[value] = _this2._p2n[pos] = extends_default()({}, item, { pos: pos });

                if (children && children.length) {
                    loop(children, pos);
                }
            });
        };

        loop(dataSource);
    };

    CascaderSelect.prototype.flatValue = function flatValue(value) {
        var _this3 = this;

        var getDepth = function getDepth(v) {
            var pos = _this3.getPos(v);
            if (!pos) {
                return 0;
            }
            return pos.split('-').length;
        };
        var newValue = value.slice(0).sort(function (prev, next) {
            return getDepth(prev) - getDepth(next);
        });

        for (var i = 0; i < newValue.length; i++) {
            for (var j = 0; j < newValue.length; j++) {
                if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {
                    newValue.splice(j, 1);
                    j--;
                }
            }
        }

        return newValue;
    };

    CascaderSelect.prototype.isDescendantOrSelf = function isDescendantOrSelf(currentPos, targetPos) {
        if (!currentPos || !targetPos) {
            return false;
        }

        var currentNums = currentPos.split('-');
        var targetNums = targetPos.split('-');

        return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };

    CascaderSelect.prototype.getValue = function getValue(pos) {
        return this._p2n[pos] ? this._p2n[pos].value : null;
    };

    CascaderSelect.prototype.getPos = function getPos(value) {
        return this._v2n[value] ? this._v2n[value].pos : null;
    };

    CascaderSelect.prototype.getData = function getData(value) {
        var _this4 = this;

        return value.map(function (v) {
            return _this4._v2n[v];
        });
    };

    CascaderSelect.prototype.getLabelPath = function getLabelPath(data) {
        var _this5 = this;

        var nums = data.pos.split('-');
        return nums.slice(1).reduce(function (ret, num, index) {
            var p = nums.slice(0, index + 2).join('-');
            ret.push(_this5._p2n[p].label);
            return ret;
        }, []);
    };

    CascaderSelect.prototype.getSignleData = function getSignleData(value) {
        if (!value.length) {
            return null;
        }

        var data = this._v2n[value];
        if (!data) {
            return null;
        }

        var labelPath = this.getLabelPath(data);
        var displayRender = this.props.displayRender || function (labels) {
            return labels.join(' / ');
        };

        return extends_default()({}, data, {
            label: displayRender(labelPath, data)
        });
    };

    CascaderSelect.prototype.getMultipleData = function getMultipleData(value) {
        var _this6 = this;

        var _props = this.props,
            checkStrictly = _props.checkStrictly,
            canOnlyCheckLeaf = _props.canOnlyCheckLeaf,
            displayRender = _props.displayRender;

        var data = this.getData(checkStrictly || canOnlyCheckLeaf ? value : this.flatValue(value));
        if (displayRender) {
            data = data.map(function (item) {
                var labelPath = _this6.getLabelPath(item);

                return extends_default()({}, item, {
                    label: displayRender(labelPath, item)
                });
            });
        }

        return data;
    };

    CascaderSelect.prototype.getIndeterminate = function getIndeterminate(value) {
        var _this7 = this;

        var indeterminate = [];

        var positions = value.map(this.getPos.bind(this));
        positions.forEach(function (pos) {
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentValue = _this7.getValue(parentPos);
                if (indeterminate.indexOf(parentValue) === -1) {
                    indeterminate.push(parentValue);
                }
            }
        });

        return indeterminate;
    };

    CascaderSelect.prototype.saveSelectRef = function saveSelectRef(ref) {
        this.select = ref;
    };

    CascaderSelect.prototype.saveCascaderRef = function saveCascaderRef(ref) {
        this.cascader = ref;
    };

    CascaderSelect.prototype.completeValue = function completeValue(value) {
        var newValue = [];

        var flatValue = this.flatValue(value).reverse();
        var ps = Object.keys(this._p2n);
        for (var i = 0; i < ps.length; i++) {
            for (var j = 0; j < flatValue.length; j++) {
                var v = flatValue[j];
                if (this.isDescendantOrSelf(this.getPos(v), ps[i])) {
                    newValue.push(this.getValue(ps[i]));
                    ps.splice(i, 1);
                    i--;
                    break;
                }
            }
        }

        return newValue;
    };

    CascaderSelect.prototype.isLeaf = function isLeaf(data) {
        return !(data.children && data.children.length || !!this.props.loadData && !data.isLeaf);
    };

    CascaderSelect.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }

        if (['fromCascader', 'keyboard'].indexOf(type) !== -1 && !visible) {
            this.select.focusInput();
        }

        this.props.onVisibleChange(visible, type);
    };

    CascaderSelect.prototype.handleKeyDown = function handleKeyDown(e) {
        var onKeyDown = this.props.onKeyDown;
        var visible = this.state.visible;


        if (onKeyDown) {
            onKeyDown(e);
        }

        if (!visible) {
            return;
        }

        switch (e.keyCode) {
            case KEYCODE.UP:
            case KEYCODE.DOWN:
                this.cascader.setFocusValue();
                e.preventDefault();
                break;
            default:
                break;
        }
    };

    CascaderSelect.prototype.getPopup = function getPopup(ref) {
        this.popup = ref;
        if (typeof this.props.popupProps.ref === 'function') {
            this.props.popupProps.ref(ref);
        }
    };

    CascaderSelect.prototype.handleAfterOpen = function handleAfterOpen() {
        if (!this.popup) {
            return;
        }

        var _props2 = this.props,
            prefix = _props2.prefix,
            popupProps = _props2.popupProps;

        var dropDownNode = this.popup.getInstance().overlay.getInstance().getContentNode();
        var cascaderNode = dropDownNode.querySelector('.' + prefix + 'cascader');
        if (cascaderNode) {
            this.cascaderHeight = cascader_select_getStyle(cascaderNode, 'height');
        }

        if (typeof popupProps.afterOpen === 'function') {
            popupProps.afterOpen();
        }
    };

    CascaderSelect.prototype.handleChange = function handleChange(value, data, extra) {
        var _props3 = this.props,
            multiple = _props3.multiple,
            changeOnSelect = _props3.changeOnSelect,
            onChange = _props3.onChange;
        var _state = this.state,
            visible = _state.visible,
            searchValue = _state.searchValue;


        var st = {};
        if (!multiple && (!changeOnSelect || this.isLeaf(data) || !!searchValue)) {
            this.handleVisibleChange(!visible, 'fromCascader');
        }
        if (!('value' in this.props)) {
            st.value = value;
        }
        if (!multiple && searchValue) {
            st.searchValue = '';
        }
        if (Object.keys(st).length) {
            this.setState(st);
        }

        if (onChange) {
            onChange(value, data, extra);
        }
    };

    CascaderSelect.prototype.handleClear = function handleClear() {
        // 单选时点击清空按钮
        var _props4 = this.props,
            hasClear = _props4.hasClear,
            multiple = _props4.multiple,
            treeCheckable = _props4.treeCheckable;

        if (hasClear && (!multiple || !treeCheckable)) {
            if (!('value' in this.props)) {
                this.setState({
                    value: []
                });
            }

            this.props.onChange(null, null);
        }
    };

    CascaderSelect.prototype.handleRemove = function handleRemove(currentData) {
        var currentValue = currentData.value;

        var value = void 0;

        var _props5 = this.props,
            multiple = _props5.multiple,
            checkStrictly = _props5.checkStrictly,
            onChange = _props5.onChange;

        if (multiple) {
            value = [].concat(this.state.value);
            value.splice(value.indexOf(currentValue), 1);

            if (this.props.onChange) {
                var data = this.getData(value);
                var checked = false;

                if (checkStrictly) {
                    this.props.onChange(value, data, {
                        checked: checked,
                        currentData: currentData,
                        checkedData: data
                    });
                } else {
                    var checkedValue = this.completeValue(value);
                    var checkedData = this.getData(checkedValue);
                    var indeterminateValue = this.getIndeterminate(value);
                    var indeterminateData = this.getData(indeterminateValue);
                    this.props.onChange(value, data, {
                        checked: checked,
                        currentData: currentData,
                        checkedData: checkedData,
                        indeterminateData: indeterminateData
                    });
                }
            }
        } else {
            value = [];
            onChange(null, null);
        }

        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
    };

    CascaderSelect.prototype.handleSearch = function handleSearch(searchValue) {
        this.setState({
            searchValue: searchValue
        });
    };

    CascaderSelect.prototype.getPath = function getPath(pos) {
        var items = [];

        var nums = pos.split('-');
        if (nums === 2) {
            items.push(this._p2n[pos]);
        } else {
            for (var i = 1; i < nums.length; i++) {
                var p = nums.slice(0, i + 1).join('-');
                items.push(this._p2n[p]);
            }
        }

        return items;
    };

    CascaderSelect.prototype.filterItems = function filterItems() {
        var _this8 = this;

        var _props6 = this.props,
            multiple = _props6.multiple,
            changeOnSelect = _props6.changeOnSelect,
            canOnlyCheckLeaf = _props6.canOnlyCheckLeaf,
            filter = _props6.filter;
        var searchValue = this.state.searchValue;

        var items = Object.keys(this._p2n).map(function (p) {
            return _this8._p2n[p];
        });
        if (!multiple && !changeOnSelect || multiple && canOnlyCheckLeaf) {
            items = items.filter(function (item) {
                return !item.children || !item.children.length;
            });
        }

        return items.map(function (item) {
            return _this8.getPath(item.pos);
        }).filter(function (path) {
            return filter(searchValue, path);
        });
    };

    CascaderSelect.prototype.renderNotFound = function renderNotFound() {
        var _props7 = this.props,
            prefix = _props7.prefix,
            notFoundContent = _props7.notFoundContent;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu,
            { className: prefix + 'cascader-select-not-found' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu.Item,
                null,
                notFoundContent
            )
        );
    };

    CascaderSelect.prototype.renderCascader = function renderCascader() {
        var dataSource = this.props.dataSource;

        if (dataSource.length === 0) {
            return this.renderNotFound();
        }

        var searchValue = this.state.searchValue;

        var filteredPaths = [];
        if (searchValue) {
            filteredPaths = this.filterItems();
            if (filteredPaths.length === 0) {
                return this.renderNotFound();
            }
        }

        var _props8 = this.props,
            multiple = _props8.multiple,
            useVirtual = _props8.useVirtual,
            changeOnSelect = _props8.changeOnSelect,
            checkStrictly = _props8.checkStrictly,
            canOnlyCheckLeaf = _props8.canOnlyCheckLeaf,
            defaultExpandedValue = _props8.defaultExpandedValue,
            expandTriggerType = _props8.expandTriggerType,
            onExpand = _props8.onExpand,
            listStyle = _props8.listStyle,
            listClassName = _props8.listClassName,
            loadData = _props8.loadData,
            showSearch = _props8.showSearch,
            resultRender = _props8.resultRender,
            readOnly = _props8.readOnly,
            itemRender = _props8.itemRender;
        var value = this.state.value;


        var props = {
            dataSource: dataSource,
            value: value,
            multiple: multiple,
            useVirtual: useVirtual,
            canOnlySelectLeaf: !changeOnSelect,
            checkStrictly: checkStrictly,
            canOnlyCheckLeaf: canOnlyCheckLeaf,
            defaultExpandedValue: defaultExpandedValue,
            expandTriggerType: expandTriggerType,
            ref: this.saveCascaderRef,
            onExpand: onExpand,
            listStyle: listStyle,
            listClassName: listClassName,
            loadData: loadData,
            itemRender: itemRender
        };
        if (!readOnly) {
            props.onChange = this.handleChange;
        }
        if (showSearch) {
            props.searchValue = searchValue;
            props.filteredPaths = filteredPaths;
            props.resultRender = resultRender;
            props.filteredListStyle = { height: this.cascaderHeight };
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(cascader, props);
    };

    CascaderSelect.prototype.renderPopupContent = function renderPopupContent() {
        var _props9 = this.props,
            prefix = _props9.prefix,
            header = _props9.header,
            footer = _props9.footer;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'cascader-select-dropdown' },
            header,
            this.renderCascader(),
            footer
        );
    };

    CascaderSelect.prototype.render = function render() {
        var _props10 = this.props,
            prefix = _props10.prefix,
            size = _props10.size,
            hasArrow = _props10.hasArrow,
            hasBorder = _props10.hasBorder,
            hasClear = _props10.hasClear,
            label = _props10.label,
            readOnly = _props10.readOnly,
            placeholder = _props10.placeholder,
            dataSource = _props10.dataSource,
            disabled = _props10.disabled,
            multiple = _props10.multiple,
            className = _props10.className,
            showSearch = _props10.showSearch,
            popupStyle = _props10.popupStyle,
            popupClassName = _props10.popupClassName,
            popupContainer = _props10.popupContainer,
            popupProps = _props10.popupProps;
        var _state2 = this.state,
            value = _state2.value,
            searchValue = _state2.searchValue,
            visible = _state2.visible;

        var others = cascader_select_pickOthers(Object.keys(CascaderSelect.propTypes), this.props);
        var popupContent = this.renderPopupContent();

        this.updateCache(dataSource);

        var props = {
            prefix: prefix,
            className: className,
            size: size,
            placeholder: placeholder,
            disabled: disabled,
            hasArrow: hasArrow,
            hasBorder: hasBorder,
            hasClear: hasClear,
            label: label,
            readOnly: readOnly,
            ref: this.saveSelectRef,
            autoWidth: false,
            mode: multiple ? 'multiple' : 'single',
            value: multiple ? this.getMultipleData(value) : this.getSignleData(value),
            onChange: this.handleClear,
            onRemove: this.handleRemove,
            visible: visible,
            onVisibleChange: this.handleVisibleChange,
            showSearch: showSearch,
            searchValue: searchValue,
            onSearch: this.handleSearch,
            onKeyDown: this.handleKeyDown,
            popupContent: popupContent,
            popupStyle: popupStyle,
            popupClassName: popupClassName,
            popupContainer: popupContainer,
            popupProps: popupProps
        };

        if (showSearch) {
            props.popupProps = extends_default()({}, popupProps, {
                ref: this.getPopup,
                afterOpen: this.handleAfterOpen
            });
            props.autoWidth = showSearch && !!searchValue;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_select, extends_default()({}, props, others));
    };

    return CascaderSelect;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), cascader_select__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择框大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 选择框占位符
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有下拉箭头
     */
    hasArrow: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有边框
     */
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有清除按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义内联 label
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否只读，只读模式下可以展开弹层但不能选
     */
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 数据源，结构可参考下方说明
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.object),
    /**
     * （非受控）默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * （受控）当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * 选中值改变时触发的回调函数
     * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
     * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
     * @param {Object} extra 额外参数
     * @param {Array} extra.selectedPath 单选时选中的数据的路径
     * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中
     * @param {Object} extra.currentData 多选时当前操作的数据
     * @param {Array} extra.checkedData 多选时所有被选中的数据
     * @param {Array} extra.indeterminateData 多选时半选的数据
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置
     */
    defaultExpandedValue: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 展开触发的方式
     */
    expandTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    onExpand: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否开启虚拟滚动
     */
    useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否多选
     */
    multiple: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否选中即发生改变, 该属性仅在单选模式下有效
     */
    changeOnSelect: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效
     */
    canOnlyCheckLeaf: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 父子节点是否选中不关联
     */
    checkStrictly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 每列列表样式对象
     */
    listStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 每列列表类名
     */
    listClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择框单选时展示结果的自定义渲染函数
     * @param {Array} label 选中路径的文本数组
     * @return {ReactNode} 渲染在选择框中的内容
     * @default 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1]
     */
    displayRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 渲染 item 内容的方法
     * @param {Object} item 渲染节点的item
     * @return {ReactNode} item node
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否显示搜索框
     */
    showSearch: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义搜索函数
     * @param {String} searchValue 搜索的关键字
     * @param {Array} path 节点路径
     * @return {Boolean} 是否匹配
     * @default 根据路径所有节点的文本值模糊匹配
     */
    filter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 搜索结果自定义渲染函数
     * @param {String} searchValue 搜索的关键字
     * @param {Array} path 匹配到的节点路径
     * @return {ReactNode} 渲染的内容
     * @default 按照节点文本 a / b / c 的模式渲染
     */
    resultRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 搜索结果列表是否和选择框等宽
     */
    resultAutoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 无数据时显示内容
     */
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 异步加载数据函数
     * @param {Object} data 当前点击异步加载的数据
     */
    loadData: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义下拉框头部
     */
    header: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自定义下拉框底部
     */
    footer: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 初始下拉框是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前下拉框是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框显示或关闭时触发事件的回调函数
     * @param {Boolean} visible 是否显示
     * @param {String} type 触发显示关闭的操作类型
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 下拉框自定义样式对象
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 下拉框样式自定义类名
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 下拉框挂载的容器节点
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 透传到 Popup 的属性对象
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object
}, cascader_select__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    size: 'medium',
    disabled: false,
    hasArrow: true,
    hasBorder: true,
    hasClear: false,
    dataSource: [],
    defaultValue: null,
    expandTriggerType: 'click',
    onExpand: function onExpand() {},
    useVirtual: false,
    multiple: false,
    changeOnSelect: false,
    canOnlyCheckLeaf: false,
    checkStrictly: false,
    showSearch: false,
    filter: function filter(searchValue, path) {
        return path.some(function (item) {
            return item.label.indexOf(searchValue) > -1;
        });
    },
    resultRender: function resultRender(searchValue, path) {
        var parts = [];
        path.forEach(function (item, i) {
            var others = item.label.split(searchValue);
            others.forEach(function (other, j) {
                if (other) {
                    parts.push(other);
                }
                if (j < others.length - 1) {
                    parts.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'em',
                        { key: i + '-' + j },
                        searchValue
                    ));
                }
            });
            if (i < path.length - 1) {
                parts.push(' / ');
            }
        });
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            null,
            parts
        );
    },
    resultAutoWidth: true,
    notFoundContent: 'Not Found',
    defaultVisible: false,
    onVisibleChange: function onVisibleChange() {},
    popupProps: {}
}, cascader_select__temp);
cascader_select_CascaderSelect.displayName = 'CascaderSelect';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/cascader-select/index.js





/* harmony default export */ var cascader_select = (config_provider.config(cascader_select_CascaderSelect, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'hasBorder', 'CascaderSelect');

            var _props = props,
                shape = _props.shape,
                others = objectWithoutProperties_default()(_props, ['shape']);

            props = extends_default()({ hasBorder: shape !== 'arrow-only' }, others);
        }

        if ('container' in props) {
            deprecated('container', 'popupContainer', 'CascaderSelect');

            var _props2 = props,
                container = _props2.container,
                _others = objectWithoutProperties_default()(_props2, ['container']);

            props = extends_default()({ popupContainer: container }, _others);
        }

        if ('expandTrigger' in props) {
            deprecated('expandTrigger', 'expandTriggerType', 'CascaderSelect');

            var _props3 = props,
                expandTrigger = _props3.expandTrigger,
                _others2 = objectWithoutProperties_default()(_props3, ['expandTrigger']);

            props = extends_default()({ expandTriggerType: expandTrigger }, _others2);
        }

        if ('showItemCount' in props) {
            deprecated('showItemCount', 'listStyle | listClassName', 'CascaderSelect');
        }
        if ('labelWidth' in props) {
            deprecated('labelWidth', 'listStyle | listClassName', 'CascaderSelect');
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/collapse/panel.js






var panel__class, panel__temp2;








/** Collapse.Panel */
var panel_Panel = (panel__temp2 = panel__class = function (_React$Component) {
    inherits_default()(Panel, _React$Component);

    function Panel() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Panel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onKeyDown = function (e) {
            var keyCode = e.keyCode;

            if (keyCode === KEYCODE.SPACE) {
                var onClick = _this.props.onClick;

                e.preventDefault();
                onClick && onClick(e);
            }
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    } //

    Panel.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            title = _props.title,
            children = _props.children,
            className = _props.className,
            isExpanded = _props.isExpanded,
            disabled = _props.disabled,
            style = _props.style,
            prefix = _props.prefix,
            onClick = _props.onClick,
            id = _props.id,
            others = objectWithoutProperties_default()(_props, ['title', 'children', 'className', 'isExpanded', 'disabled', 'style', 'prefix', 'onClick', 'id']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'collapse-panel'] = true, _classNames[prefix + 'collapse-panel-expanded'] = isExpanded, _classNames[prefix + 'collapse-panel-disabled'] = disabled, _classNames[className] = className, _classNames));

        // 为了无障碍 需要添加两个id
        var headingId = id ? id + '-heading' : undefined;
        var regionId = id ? id + '-region' : undefined;
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({
                className: cls,
                style: style,
                id: id
            }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                {
                    id: headingId,
                    className: prefix + 'collapse-panel-title',
                    onClick: onClick,
                    onKeyDown: this.onKeyDown,
                    tabIndex: '0',
                    'aria-disabled': disabled,
                    'aria-expanded': isExpanded,
                    'aria-controls': regionId,
                    role: 'button' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-up', className: prefix + 'collapse-panel-icon', 'aria-hidden': 'true' }),
                title
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                {
                    className: prefix + 'collapse-panel-content',
                    role: 'region',
                    id: regionId },
                children
            )
        );
    };

    return Panel;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), panel__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 子组件接受行内样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    isExpanded: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁止用户操作
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 扩展class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    id: _prop_types_15_7_2_prop_types_default.a.string
}, panel__class.defaultProps = {
    prefix: 'next-',
    isExpanded: false,
    onClick: func.noop
}, panel__class.isNextPanel = true, panel__temp2);
panel_Panel.displayName = 'Panel';


/* harmony default export */ var collapse_panel = (config_provider.config(panel_Panel));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/collapse/collapse.js





var collapse__class, collapse__temp;








/** Collapse */
var collapse_Collapse = (collapse__temp = collapse__class = function (_React$Component) {
    inherits_default()(Collapse, _React$Component);

    function Collapse(props) {
        classCallCheck_default()(this, Collapse);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        var expandedKeys = void 0;
        if ('expandedKeys' in props) {
            expandedKeys = props.expandedKeys;
        } else {
            expandedKeys = props.defaultExpandedKeys;
        }

        _this.state = {
            expandedKeys: typeof expandedKeys === 'undefined' ? [] : expandedKeys
        };
        return _this;
    }

    Collapse.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('expandedKeys' in nextProps) {
            this.setState({
                expandedKeys: typeof nextProps.expandedKeys === 'undefined' ? [] : nextProps.expandedKeys
            });
        }
    };

    Collapse.prototype.onItemClick = function onItemClick(key) {
        var expandedKeys = this.state.expandedKeys;
        if (this.props.accordion) {
            expandedKeys = expandedKeys[0] === key ? [] : [key];
        } else {
            expandedKeys = [].concat(expandedKeys);
            var index = expandedKeys.indexOf(key);
            var isExpanded = index > -1;
            if (isExpanded) {
                expandedKeys.splice(index, 1);
            } else {
                expandedKeys.push(key);
            }
        }
        this.setExpandedKey(expandedKeys);
    };

    Collapse.prototype.genratePanelId = function genratePanelId(itemId, index) {
        var collapseId = this.props.id;

        var id = void 0;
        if (itemId) {
            // 优先用 item自带的id
            id = itemId;
        } else if (collapseId) {
            // 其次用 collapseId 和 index 生成id
            id = collapseId + '-panel-' + index;
        }
        return id;
    };

    Collapse.prototype.getProps = function getProps(item, index, key) {
        var _this2 = this;

        var expandedKeys = this.state.expandedKeys;
        var title = item.title;

        var disabled = this.props.disabled;

        if (!disabled) {
            disabled = item.disabled;
        }

        var isExpanded = false;

        if (this.props.accordion) {
            isExpanded = expandedKeys[0] === key;
        } else {
            isExpanded = expandedKeys.some(function (expandedKey) {
                if (expandedKey === null || expandedKey === undefined || key === null || key === undefined) {
                    return false;
                }

                if (expandedKey === key || expandedKey.toString() === key.toString()) {
                    return true;
                }
                return false;
            });
        }

        var id = this.genratePanelId(item.id, index);
        return {
            key: key,
            title: title,
            isExpanded: isExpanded,
            disabled: disabled,
            id: id,
            onClick: disabled ? null : function () {
                _this2.onItemClick(key);
                if ('onClick' in item) {
                    item.onClick(key);
                }
            }
        };
    };

    Collapse.prototype.getItemsByDataSource = function getItemsByDataSource() {
        var _this3 = this;

        var props = this.props;
        var dataSource = props.dataSource;
        // 是否有dataSource.item传入过key

        var hasKeys = dataSource.some(function (item) {
            return 'key' in item;
        });

        return dataSource.map(function (item, index) {
            // 传入过key就用item.key 没传入则统一使用index为key
            var key = hasKeys ? item.key : '' + index;
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                collapse_panel,
                extends_default()({}, _this3.getProps(item, index, key), { key: key }),
                item.content
            );
        });
    };

    Collapse.prototype.getItemsByChildren = function getItemsByChildren() {
        var _this4 = this;

        // 是否有child传入过key
        var allKeys = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.map(this.props.children, function (child) {
            return child.key;
        });
        var hasKeys = Boolean(allKeys.length);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.map(this.props.children, function (child, index) {
            if (child && typeof child.type === 'function' && child.type.isNextPanel) {
                // 传入过key就用child.key 没传入则统一使用index为key
                var key = hasKeys ? child.key : '' + index;
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, _this4.getProps(child.props, index, key));
            } else {
                return child;
            }
        });
    };

    Collapse.prototype.setExpandedKey = function setExpandedKey(expandedKeys) {
        if (!('expandedKeys' in this.props)) {
            this.setState({ expandedKeys: expandedKeys });
        }
        this.props.onExpand(this.props.accordion ? expandedKeys[0] : expandedKeys);
    };

    Collapse.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            style = _props.style,
            disabled = _props.disabled,
            dataSource = _props.dataSource,
            id = _props.id;

        var collapseClassName = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'collapse'] = true, _classNames[prefix + 'collapse-disabled'] = disabled, _classNames[className] = Boolean(className), _classNames));

        var others = util_obj.pickOthers(Collapse.propTypes, this.props);
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ id: id, className: collapseClassName, style: style }, others, { role: 'presentation' }),
            dataSource ? this.getItemsByDataSource() : this.getItemsByChildren()
        );
    };

    return Collapse;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), collapse__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 组件接受行内样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 使用数据模型构建
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 默认展开keys
     */
    defaultExpandedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 受控展开keys
     */
    expandedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 展开状态发升变化时候的回调
     */
    onExpand: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 所有禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 扩展class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 手风琴模式，一次只能打开一个
     */
    accordion: _prop_types_15_7_2_prop_types_default.a.bool,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    id: _prop_types_15_7_2_prop_types_default.a.string
}, collapse__class.defaultProps = {
    accordion: false,
    prefix: 'next-',
    onExpand: func.noop
}, collapse__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, collapse__temp);
collapse_Collapse.displayName = 'Collapse';


/* harmony default export */ var collapse = (config_provider.config(collapse_Collapse));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/collapse/index.js



collapse.Panel = collapse_panel;

/* harmony default export */ var es_collapse = (collapse);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/time-picker/module/time-menu.js




var time_menu__class, time_menu__temp2;





function scrollTo(element, to, duration) {
    var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
        return setTimeout(arguments.length <= 0 ? undefined : arguments[0], 10);
    };

    if (duration <= 0) {
        element.scrollTop = to;
        return;
    }

    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;

    requestAnimationFrame(function () {
        element.scrollTop = element.scrollTop + perTick;

        if (element.scrollTop === to) {
            return;
        }

        scrollTo(element, to, duration - 10);
    });
}

var time_menu_noop = function noop() {};

var time_menu_TimeMenu = (time_menu__temp2 = time_menu__class = function (_React$Component) {
    inherits_default()(TimeMenu, _React$Component);

    function TimeMenu() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, TimeMenu);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this._menuRefHandler = function (ref) {
            _this.menu = ref;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    TimeMenu.prototype.componentDidMount = function componentDidMount() {
        this.scrollToSelected(0);
    };

    TimeMenu.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.activeIndex !== this.props.activeIndex) {
            this.scrollToSelected(120);
        }
    };

    TimeMenu.prototype.scrollToSelected = function scrollToSelected() {
        var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var _props = this.props,
            activeIndex = _props.activeIndex,
            step = _props.step;

        var targetIndex = Math.floor((activeIndex || 0) / step);
        var firstItem = this.menu.children[targetIndex];
        var offsetTo = firstItem.offsetTop;
        scrollTo(this.menu, offsetTo, duration);
    };

    TimeMenu.prototype.render = function render() {
        var _props2 = this.props,
            prefix = _props2.prefix,
            title = _props2.title,
            mode = _props2.mode,
            activeIndex = _props2.activeIndex,
            step = _props2.step,
            disabled = _props2.disabled,
            disabledItems = _props2.disabledItems,
            onSelect = _props2.onSelect;

        var total = mode === 'hour' ? 24 : 60;
        var list = [];

        var _loop = function _loop(i) {
            if (i % step === 0) {
                var _classnames;

                var isDisabled = disabled || disabledItems(i);
                var itemCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'time-picker-menu-item'] = true, _classnames[prefix + 'disabled'] = isDisabled, _classnames[prefix + 'selected'] = i === activeIndex, _classnames));
                var onClick = isDisabled ? time_menu_noop : function () {
                    return onSelect(i, mode);
                };
                list.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'li',
                    { role: 'option',
                        tabIndex: '0',
                        'aria-selected': String(i === activeIndex),
                        key: i, title: i, className: itemCls, onClick: onClick },
                    i
                ));
            }
        };

        for (var i = 0; i < total; i++) {
            _loop(i);
        }

        var menuTitle = title ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'time-picker-menu-title' },
            title
        ) : null;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'time-picker-menu' },
            menuTitle,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'ul',
                { role: 'listbox', className: prefix + 'time-picker-menu-' + mode, ref: this._menuRefHandler },
                list
            )
        );
    };

    return TimeMenu;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), time_menu__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    title: _prop_types_15_7_2_prop_types_default.a.node,
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['hour', 'minute', 'second']),
    step: _prop_types_15_7_2_prop_types_default.a.number,
    activeIndex: _prop_types_15_7_2_prop_types_default.a.number,
    disabledItems: _prop_types_15_7_2_prop_types_default.a.func,
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool
}, time_menu__class.defaultProps = {
    step: 1,
    disabledItems: function disabledItems() {
        return false;
    },
    onSelect: function onSelect() {},
    disabled: false
}, time_menu__temp2);
time_menu_TimeMenu.displayName = 'TimeMenu';


/* harmony default export */ var time_menu = (time_menu_TimeMenu);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/time-picker/utils/index.js


// 检查传入值是否为 moment 对象
function utils_checkMomentObj(props, propName, componentName) {
    if (props[propName] && !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(props[propName])) {
        return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object');
    }
}

// 检查传入值是否为 moment 对象或时间字符串，字符串不检测是否为日期字符串
function checkDateValue(props, propName, componentName) {
    if (props[propName] && !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(props[propName]) && typeof props[propName] !== 'string') {
        return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object or format date string!');
    }
}

function utils_formatDateValue(value, format) {
    var val = typeof value === 'string' ? external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(value, format, true) : value;
    if (val && external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(val) && val.isValid()) {
        return val;
    }
    return null;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/time-picker/panel.js






var time_picker_panel__class, time_picker_panel__temp2;










var panel_noop = func.noop;
var panel_TimePickerPanel = (time_picker_panel__temp2 = time_picker_panel__class = function (_Component) {
    inherits_default()(TimePickerPanel, _Component);

    function TimePickerPanel() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, TimePickerPanel);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onSelectMenuItem = function (index, type) {
            var value = _this.props.value;

            var clonedValue = value ? value.clone() : external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()('00:00:00', 'HH:mm:ss', true);
            switch (type) {
                case 'hour':
                    clonedValue.hour(index);
                    break;
                case 'minute':
                    clonedValue.minute(index);
                    break;
                case 'second':
                    clonedValue.second(index);
                    break;
            }
            _this.props.onSelect(clonedValue);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    TimePickerPanel.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            value = _props.value,
            locale = _props.locale,
            className = _props.className,
            disabled = _props.disabled,
            showHour = _props.showHour,
            showSecond = _props.showSecond,
            hourStep = _props.hourStep,
            minuteStep = _props.minuteStep,
            secondStep = _props.secondStep,
            disabledHours = _props.disabledHours,
            disabledMinutes = _props.disabledMinutes,
            disabledSeconds = _props.disabledSeconds,
            others = objectWithoutProperties_default()(_props, ['prefix', 'value', 'locale', 'className', 'disabled', 'showHour', 'showSecond', 'hourStep', 'minuteStep', 'secondStep', 'disabledHours', 'disabledMinutes', 'disabledSeconds']);

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'time-picker-panel'] = true, _classnames[prefix + 'time-picker-panel-col-3'] = showHour && showSecond, _classnames[prefix + 'time-picker-panel-col-2'] = !showHour || !showSecond, _classnames), className);

        var commonProps = {
            prefix: prefix,
            disabled: disabled,
            onSelect: this.onSelectMenuItem
        };

        var activeHour = void 0;
        var activeMinute = void 0;
        var activeSecond = void 0;

        if (value && external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(value)) {
            activeHour = value.hour();
            activeMinute = value.minute();
            activeSecond = value.second();
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: classNames }),
            showHour ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_menu, extends_default()({}, commonProps, { activeIndex: activeHour, title: locale.hour, mode: 'hour', step: hourStep, disabledItems: disabledHours })) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_menu, extends_default()({}, commonProps, { activeIndex: activeMinute, title: locale.minute, mode: 'minute', step: minuteStep, disabledItems: disabledMinutes })),
            showSecond ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_menu, extends_default()({}, commonProps, { activeIndex: activeSecond, title: locale.second, step: secondStep, mode: 'second', disabledItems: disabledSeconds })) : null
        );
    };

    return TimePickerPanel;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), time_picker_panel__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 时间值（moment 对象）
     */
    value: utils_checkMomentObj,
    /**
     * 是否显示小时
     */
    showHour: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示秒
     */
    showSecond: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 小时选项步长
     */
    hourStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 分钟选项步长
     */
    minuteStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 秒钟选项步长
     */
    secondStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 禁用小时函数
     * @param {Number} index 时 0 - 23
     * @return {Boolean} 是否禁用
     */
    disabledHours: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 禁用分钟函数
     * @param {Number} index 分 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledMinutes: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 禁用秒函数
     * @param {Number} index 秒 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledSeconds: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选择某个日期值时的回调
     * @param {Object} 选中后的日期值
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, time_picker_panel__class.defaultProps = {
    prefix: 'next-',
    showHour: true,
    showSecond: true,
    disabledHours: panel_noop,
    disabledMinutes: panel_noop,
    disabledSeconds: panel_noop,
    onSelect: panel_noop,
    disabled: false,
    locale: zh_cn.TimePicker
}, time_picker_panel__temp2);
panel_TimePickerPanel.displayName = 'TimePickerPanel';


/* harmony default export */ var time_picker_panel = (panel_TimePickerPanel);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/util/index.js


var PANEL = {
    TIME: 'time-panel',
    DATE: 'date-panel'
};

var DEFAULT_TIME_FORMAT = 'HH:mm:ss';

function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}

/**
 * 将 source 的 time 替换为 target 的 time
 * @param {Object} source 输入值
 * @param {Object} target 目标值
 */
function resetValueTime(source, target) {
    if (!external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(source) || !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(target)) {
        return source;
    }
    return source.clone().hour(target.hour()).minute(target.minute()).second(target.second());
}

function util_formatDateValue(value, format) {
    var val = typeof value === 'string' ? external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(value, format, false) : value;
    if (val && external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(val) && val.isValid()) {
        return val;
    }

    return null;
}

function util_checkDateValue(props, propName, componentName) {
    // 支持传入 moment 对象或字符串，字符串不检测是否为日期字符串
    if (props[propName] && !external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default.a.isMoment(props[propName]) && typeof props[propName] !== 'string') {
        return new Error('Invalid prop ' + propName + ' supplied to ' + componentName + '. Required a moment object or format date string!');
    }
}

function getDateTimeFormat(format, showTime) {
    var timeFormat = showTime ? showTime.format || DEFAULT_TIME_FORMAT : '';
    var dateTimeFormat = timeFormat ? format + ' ' + timeFormat : format;
    return {
        format: format,
        timeFormat: timeFormat,
        dateTimeFormat: dateTimeFormat
    };
}

function extend(source, target) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            target[key] = source[key];
        }
    }
    return target;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/module/panel-footer.js





var panel_footer__class, panel_footer__temp2;






var panel_footer_PanelFooter = (panel_footer__temp2 = panel_footer__class = function (_React$PureComponent) {
    inherits_default()(PanelFooter, _React$PureComponent);

    function PanelFooter() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, PanelFooter);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.changePanel = function () {
            var _PANEL$DATE$PANEL$TIM;

            var targetPanel = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[PANEL.DATE] = PANEL.TIME, _PANEL$DATE$PANEL$TIM[PANEL.TIME] = PANEL.DATE, _PANEL$DATE$PANEL$TIM)[_this.props.panel];
            _this.props.onPanelChange(targetPanel);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    PanelFooter.prototype.render = function render() {
        var _PANEL$DATE$PANEL$TIM2;

        var _props = this.props,
            prefix = _props.prefix,
            locale = _props.locale,
            panel = _props.panel,
            value = _props.value,
            onPanelChange = _props.onPanelChange,
            onOk = _props.onOk;

        var panelBtnLabel = (_PANEL$DATE$PANEL$TIM2 = {}, _PANEL$DATE$PANEL$TIM2[PANEL.DATE] = locale.selectTime, _PANEL$DATE$PANEL$TIM2[PANEL.TIME] = locale.selectDate, _PANEL$DATE$PANEL$TIM2)[panel];

        var sharedBtnProps = {
            size: 'small',
            type: 'primary',
            disabled: !value
        };

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'date-picker-panel-footer' },
            onPanelChange ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, sharedBtnProps, { text: true, onClick: this.changePanel }),
                panelBtnLabel
            ) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, sharedBtnProps, { onClick: onOk }),
                locale.ok
            )
        );
    };

    return PanelFooter;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent), panel_footer__class.defaultProps = {
    // onPanelChange: func.noop,
    onOk: func.noop
}, panel_footer__temp2);


/* harmony default export */ var panel_footer = (panel_footer_PanelFooter);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/date-picker.js







var date_picker__class, date_picker__temp, date_picker__initialiseProps;














var date_picker_Popup = es_overlay.Popup;

/**
 * DatePicker
 */

var date_picker_DatePicker = (date_picker__temp = date_picker__class = function (_Component) {
    inherits_default()(DatePicker, _Component);

    function DatePicker(props, context) {
        classCallCheck_default()(this, DatePicker);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        date_picker__initialiseProps.call(_this);

        var dateTimeFormat = getDateTimeFormat(props.format, props.showTime);
        extend(dateTimeFormat, _this);

        var value = util_formatDateValue(props.value || props.defaultValue, _this.dateTimeFormat);
        _this.inputAsString = typeof (props.value || props.defaultValue) === 'string'; // 判断用户输入是否是字符串
        _this.state = {
            value: value,
            dateInputStr: '',
            timeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            visible: props.visible || props.defaultVisible,
            panel: PANEL.DATE
        };
        return _this;
    }

    DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('showTime' in nextProps) {
            var dateTimeFormat = getDateTimeFormat(nextProps.format || this.props.format, nextProps.showTime);
            extend(dateTimeFormat, this);
        }

        if ('value' in nextProps) {
            var value = util_formatDateValue(nextProps.value, this.dateTimeFormat);
            this.setState({
                value: value
            });
            this.inputAsString = typeof nextProps.value === 'string';
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    DatePicker.prototype.render = function render() {
        var _classnames, _classnames2, _classnames3, _classnames4, _PANEL$DATE$PANEL$TIM;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            locale = _props.locale,
            label = _props.label,
            state = _props.state,
            defaultVisibleMonth = _props.defaultVisibleMonth,
            onVisibleMonthChange = _props.onVisibleMonthChange,
            showTime = _props.showTime,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            placeholder = _props.placeholder,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            inputProps = _props.inputProps,
            dateCellRender = _props.dateCellRender,
            monthCellRender = _props.monthCellRender,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'locale', 'label', 'state', 'defaultVisibleMonth', 'onVisibleMonthChange', 'showTime', 'disabledDate', 'footerRender', 'placeholder', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'inputProps', 'dateCellRender', 'monthCellRender']);

        var _state = this.state,
            visible = _state.visible,
            value = _state.value,
            dateInputStr = _state.dateInputStr,
            timeInputStr = _state.timeInputStr,
            panel = _state.panel,
            inputing = _state.inputing;


        var datePickerCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'date-picker'] = true, _classnames), className);

        var triggerInputCls = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'date-picker-input'] = true, _classnames2[prefix + 'error'] = false, _classnames2));

        var panelBodyClassName = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'date-picker-body'] = true, _classnames3[prefix + 'date-picker-body-show-time'] = showTime, _classnames3));

        var panelDateInputCls = _classnames_2_2_6_classnames_default()((_classnames4 = {}, _classnames4[prefix + 'date-picker-panel-input'] = true, _classnames4[prefix + 'focus'] = panel === PANEL.DATE, _classnames4));

        if (rtl) {
            others.dir = 'rtl';
        }

        var sharedInputProps = extends_default()({}, inputProps, {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        });

        var dateInputValue = inputing === 'date' ? dateInputStr : value && value.format(this.format) || '';
        var triggerInputValue = dateInputValue;

        var dateInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
            value: dateInputValue,
            onFocus: this.onFoucsDateInput,
            placeholder: this.format,
            className: panelDateInputCls }));

        var datePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_calendar, {
            shape: 'panel',
            value: value,
            format: this.format,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            onSelect: this.onSelectCalendarPanel,
            defaultVisibleMonth: defaultVisibleMonth,
            onVisibleMonthChange: onVisibleMonthChange,
            disabledDate: disabledDate });

        var panelFooter = footerRender();

        var timeInput = null;
        var timePanel = null;

        if (showTime) {
            var _classnames5;

            var timeInputValue = inputing === 'time' ? timeInputStr : value && value.format(this.timeFormat) || '';
            triggerInputValue = value && value.format(this.dateTimeFormat) || '';

            var timePanelProps = (typeof showTime === 'undefined' ? 'undefined' : typeof_default()(showTime)) === 'object' ? showTime : {};

            var showSecond = this.timeFormat.indexOf('s') > -1;

            var panelTimeInputCls = _classnames_2_2_6_classnames_default()((_classnames5 = {}, _classnames5[prefix + 'date-picker-panel-input'] = true, _classnames5[prefix + 'focus'] = panel === PANEL.TIME, _classnames5));

            timeInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, {
                placeholder: this.timeFormat,
                value: timeInputValue,
                size: size,
                disabled: disabled || !value,
                onChange: this.onTimeInputChange,
                onFocus: this.onFoucsTimeInput,
                onBlur: this.onTimeInputBlur,
                onPressEnter: this.onTimeInputBlur,
                className: panelTimeInputCls });

            timePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_picker_panel, extends_default()({}, timePanelProps, {
                locale: locale,
                className: prefix + 'date-picker-panel-time',
                showSecond: showSecond,
                disabled: disabled,
                prefix: prefix,
                value: value,
                onSelect: this.onSelectTimePanel }));

            panelFooter = panelFooter || external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(panel_footer, {
                prefix: prefix,
                locale: locale,
                value: value,
                panel: panel,
                onPanelChange: this.changePanel,
                onOk: this.onOk });
        }

        var panelBody = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[PANEL.DATE] = datePanel, _PANEL$DATE$PANEL$TIM[PANEL.TIME] = timePanel, _PANEL$DATE$PANEL$TIM)[panel];

        var allowClear = value && hasClear;
        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'date-picker-trigger' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                label: label,
                state: state,
                value: triggerInputValue,
                placeholder: placeholder || (showTime ? locale.datetimePlaceholder : locale.placeholder),
                hint: 'calendar',
                hasClear: allowClear,
                className: triggerInputCls }))
        );
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(DatePicker.propTypes, others), { className: datePickerCls }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                date_picker_Popup,
                extends_default()({}, popupProps, {
                    disabled: disabled,
                    visible: visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { dir: others.dir, className: panelBodyClassName },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'date-picker-panel-header' },
                        dateInput,
                        timeInput
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return DatePicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), date_picker__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 输入框内置标签
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['success', 'loading', 'error']),
    /**
     * 输入提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 默认展现的月
     * @return {MomentObject} 返回包含指定月份的 moment 对象实例
     */
    defaultVisibleMonth: _prop_types_15_7_2_prop_types_default.a.func,
    onVisibleMonthChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期值（受控）moment 对象
     */
    value: util_checkDateValue,
    /**
     * 初始日期值，moment 对象
     */
    defaultValue: util_checkDateValue,
    /**
     * 日期值的格式（用于限定用户输入和展示）
     */
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }
     */
    showTime: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 每次选择日期时是否重置时间（仅在 showTime 开启时有效）
     */
    resetTime: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期值改变时的回调
     * @param {MomentObject|String} value 日期值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击确认按钮时的回调
     * @return {MomentObject|String} 日期值
     */
    onOk: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 输入框尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式,具体含义见 OverLay文档
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层其他属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 输入框其他属性
     */
    inputProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义日期渲染函数
     * @param {Object} value 日期值（moment对象）
     * @returns {ReactNode}
     */
    dateCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义月份渲染函数
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {ReactNode}
     */
    monthCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, date_picker__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    format: 'YYYY-MM-DD',
    size: 'medium',
    showTime: false,
    resetTime: false,
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: zh_cn.DatePicker,
    onChange: func.noop,
    onVisibleChange: func.noop,
    onOk: func.noop
}, date_picker__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onValueChange = function (newValue) {
        var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onChange';

        var ret = _this2.inputAsString && newValue ? newValue.format(_this2.dateTimeFormat) : newValue;
        _this2.props[handler](ret);
    };

    this.onSelectCalendarPanel = function (value) {
        var _props2 = _this2.props,
            showTime = _props2.showTime,
            resetTime = _props2.resetTime;


        var prevValue = _this2.state.value;
        var newValue = value;
        if (showTime) {
            if (!prevValue) {
                // 第一次选择日期值时，如果设置了默认时间，则使用该默认时间
                if (showTime.defaultValue) {
                    var defaultTimeValue = util_formatDateValue(showTime.defaultValue, _this2.timeFormat);
                    newValue = resetValueTime(value, defaultTimeValue);
                }
            } else if (!resetTime) {
                // 非第一选择日期，如果开启了 resetTime 属性，则记住之前选择的时间值
                newValue = resetValueTime(value, prevValue);
            }
        }

        _this2.handleChange(newValue, prevValue, { inputing: false });

        if (!showTime) {
            _this2.onVisibleChange(false, 'calendarSelect');
        }
    };

    this.onSelectTimePanel = function (value) {
        _this2.handleChange(value, _this2.state.value, { inputing: false });
    };

    this.clearValue = function () {
        _this2.setState({
            dateInputStr: '',
            timeInputStr: ''
        });

        _this2.handleChange(null, _this2.state.value, { inputing: false });
    };

    this.onDateInputChange = function (inputStr, e, eventType) {
        if (eventType === 'clear' || !inputStr) {
            e.stopPropagation();
            _this2.clearValue();
        } else {
            _this2.setState({
                dateInputStr: inputStr,
                inputing: 'date'
            });
        }
    };

    this.onTimeInputChange = function (inputStr) {
        _this2.setState({
            timeInputStr: inputStr,
            inputing: 'time'
        });
    };

    this.onDateInputBlur = function () {
        var dateInputStr = _this2.state.dateInputStr;

        if (dateInputStr) {
            var disabledDate = _this2.props.disabledDate;

            var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(dateInputStr, _this2.format, true);

            _this2.setState({
                dateInputStr: '',
                inputing: false
            });

            if (parsed.isValid() && !disabledDate(parsed)) {
                _this2.handleChange(parsed, _this2.state.value);
            }
        }
    };

    this.onTimeInputBlur = function () {
        var _state2 = _this2.state,
            value = _state2.value,
            timeInputStr = _state2.timeInputStr;

        if (timeInputStr) {
            var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(timeInputStr, _this2.timeFormat, true);

            _this2.setState({
                timeInputStr: '',
                inputing: false
            });

            if (parsed.isValid()) {
                var hour = parsed.hour();
                var minute = parsed.minute();
                var second = parsed.second();
                var newValue = value.clone().hour(hour).minute(minute).second(second);

                _this2.handleChange(newValue, _this2.state.value);
            }
        }
    };

    this.handleChange = function (newValue, prevValue) {
        var others = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (!('value' in _this2.props)) {
            _this2.setState(extends_default()({
                value: newValue
            }, others));
        }

        var newValueOf = newValue ? newValue.valueOf() : null;
        var preValueOf = prevValue ? prevValue.valueOf() : null;

        if (newValueOf !== preValueOf) {
            _this2.onValueChange(newValue);
        }
    };

    this.onFoucsDateInput = function () {
        if (_this2.state.panel !== PANEL.DATE) {
            _this2.setState({
                panel: PANEL.DATE
            });
        }
    };

    this.onFoucsTimeInput = function () {
        if (_this2.state.panel !== PANEL.TIME) {
            _this2.setState({
                panel: PANEL.TIME
            });
        }
    };

    this.onVisibleChange = function (visible, reason) {
        if (!('visible' in _this2.props)) {
            _this2.setState({
                visible: visible
            });
        }
        _this2.props.onVisibleChange(visible, reason);
    };

    this.changePanel = function (panel) {
        _this2.setState({
            panel: panel
        });
    };

    this.onOk = function () {
        _this2.onVisibleChange(false, 'okBtnClick');
        _this2.onValueChange(_this2.state.value, 'onOk');
    };
}, date_picker__temp);
date_picker_DatePicker.displayName = 'DatePicker';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/head/range-panel-header.js






var range_panel_header_RangePanelHeader = function (_React$PureComponent) {
    inherits_default()(RangePanelHeader, _React$PureComponent);

    function RangePanelHeader() {
        classCallCheck_default()(this, RangePanelHeader);

        return possibleConstructorReturn_default()(this, _React$PureComponent.apply(this, arguments));
    }

    RangePanelHeader.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            startVisibleMonth = _props.startVisibleMonth,
            endVisibleMonth = _props.endVisibleMonth,
            momentLocale = _props.momentLocale,
            locale = _props.locale,
            changeMode = _props.changeMode,
            goNextMonth = _props.goNextMonth,
            goNextYear = _props.goNextYear,
            goPrevMonth = _props.goPrevMonth,
            goPrevYear = _props.goPrevYear;


        var localedMonths = momentLocale.months();
        var startMonthLabel = localedMonths[startVisibleMonth.month()];
        var endMonthLabel = localedMonths[endVisibleMonth.month()];
        var startYearLable = startVisibleMonth.year();
        var endYearLabel = endVisibleMonth.year();
        var btnCls = prefix + 'calendar-btn';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'calendar-panel-header' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevYear,
                    className: btnCls + ' ' + btnCls + '-prev-year',
                    onClick: goPrevYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.prevMonth,
                    className: btnCls + ' ' + btnCls + '-prev-month',
                    onClick: goPrevMonth },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-panel-header-left' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: startMonthLabel, className: btnCls, onClick: function onClick() {
                            return changeMode('month', 'start');
                        } },
                    startMonthLabel
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: startYearLable, className: btnCls, onClick: function onClick() {
                            return changeMode('year', 'start');
                        } },
                    startYearLable
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-panel-header-right' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: endMonthLabel, className: btnCls, onClick: function onClick() {
                            return changeMode('month', 'end');
                        } },
                    endMonthLabel
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'button',
                    { role: 'button', title: endYearLabel, className: btnCls, onClick: function onClick() {
                            return changeMode('year', 'end');
                        } },
                    endYearLabel
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextMonth,
                    className: btnCls + ' ' + btnCls + '-next-month',
                    onClick: goNextMonth },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    role: 'button',
                    title: locale.nextYear,
                    className: btnCls + ' ' + btnCls + '-next-year',
                    onClick: goNextYear },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-double-right' })
            )
        );
    };

    return RangePanelHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent);

/* harmony default export */ var range_panel_header = (range_panel_header_RangePanelHeader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/calendar/range-calendar.js






var range_calendar__class, range_calendar__temp;
















var range_calendar_RangeCalendar = (range_calendar__temp = range_calendar__class = function (_React$Component) {
    inherits_default()(RangeCalendar, _React$Component);

    function RangeCalendar(props, context) {
        classCallCheck_default()(this, RangeCalendar);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.onSelectCell = function (date, nextMode) {
            _this.changeVisibleMonth(date, 'cellClick');

            if (_this.state.mode === CALENDAR_MODE_DATE) {
                _this.props.onSelect(date);
            }
            _this.changeMode(nextMode);
        };

        _this.changeMode = function (mode, activePanel) {
            if (typeof mode === 'string' && mode !== _this.state.mode) {
                _this.setState({ mode: mode });
            }
            if (activePanel && activePanel !== _this.state.activePanel) {
                _this.setState({ activePanel: activePanel });
            }
        };

        _this.changeVisibleMonth = function (date, reason) {
            if (!isSameYearMonth(date, _this.state.startVisibleMonth)) {
                _this.setState({ startVisibleMonth: date });
                _this.props.onVisibleMonthChange(date, reason);
            }
        };

        _this.changeVisibleMonthByOffset = function (offset, type) {
            var offsetDate = _this.state.startVisibleMonth.clone().add(offset, type);
            _this.changeVisibleMonth(offsetDate, 'buttonClick');
        };

        _this.goPrevDecade = function () {
            _this.changeVisibleMonthByOffset(-10, 'years');
        };

        _this.goNextDecade = function () {
            _this.changeVisibleMonthByOffset(10, 'years');
        };

        _this.goPrevYear = function () {
            _this.changeVisibleMonthByOffset(-1, 'years');
        };

        _this.goNextYear = function () {
            _this.changeVisibleMonthByOffset(1, 'years');
        };

        _this.goPrevMonth = function () {
            _this.changeVisibleMonthByOffset(-1, 'months');
        };

        _this.goNextMonth = function () {
            _this.changeVisibleMonthByOffset(1, 'months');
        };

        var startValue = formatDateValue(props.startValue || props.defaultStartValue);
        var endValue = formatDateValue(props.endValue || props.defaultEndValue);
        var visibleMonth = getVisibleMonth(props.defaultVisibleMonth, startValue);

        _this.state = {
            startValue: startValue,
            endValue: endValue,
            mode: props.mode,
            startVisibleMonth: visibleMonth,
            activePanel: undefined
        };
        _this.today = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()();
        return _this;
    }

    RangeCalendar.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('startValue' in nextProps) {
            var startValue = formatDateValue(nextProps.startValue);
            this.setState({
                startValue: startValue
            });

            if (startValue) {
                this.setState({
                    startVisibleMonth: startValue
                });
            }
        }

        if ('endValue' in nextProps) {
            var endValue = formatDateValue(nextProps.endValue);
            this.setState({
                endValue: endValue
            });
        }

        if ('mode' in nextProps) {
            this.setState({
                mode: nextProps.mode
            });
        }
    };

    /**
     * 根据日期偏移量设置当前展示的月份
     * @param {Number} offset 日期偏移量
     * @param {String} type 日期偏移类型 days, months, years
     */


    RangeCalendar.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            dateCellRender = _props.dateCellRender,
            className = _props.className,
            format = _props.format,
            locale = _props.locale,
            showOtherMonth = _props.showOtherMonth,
            disabledDate = _props.disabledDate,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'dateCellRender', 'className', 'format', 'locale', 'showOtherMonth', 'disabledDate']);

        var _state = this.state,
            startValue = _state.startValue,
            endValue = _state.endValue,
            mode = _state.mode,
            startVisibleMonth = _state.startVisibleMonth,
            activePanel = _state.activePanel;

        // reset moment locale

        if (locale.momentLocale) {
            startValue && startValue.locale(locale.momentLocale);
            endValue && endValue.locale(locale.momentLocale);
            startVisibleMonth.locale(locale.momentLocale);
        }

        if (rtl) {
            others.dir = 'rtl';
        }

        var localeData = startVisibleMonth.localeData();
        var endVisibleMonth = startVisibleMonth.clone().add(1, 'months');

        var headerProps = {
            prefix: prefix,
            rtl: rtl,
            mode: mode,
            locale: locale,
            momentLocale: localeData,
            startVisibleMonth: startVisibleMonth,
            endVisibleMonth: endVisibleMonth,
            changeMode: this.changeMode
        };

        var tableProps = {
            prefix: prefix,
            value: startValue,
            startValue: startValue,
            endValue: endValue,
            mode: mode,
            locale: locale,
            momentLocale: localeData,
            showOtherMonth: showOtherMonth,
            today: this.today,
            disabledDate: disabledDate,
            dateCellRender: dateCellRender,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth
        };

        var visibleMonths = {
            start: startVisibleMonth,
            end: endVisibleMonth
        };

        var visibleMonth = visibleMonths[activePanel];

        var header = void 0;
        var table = void 0;

        switch (mode) {
            case CALENDAR_MODE_DATE:
                {
                    table = [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'calendar-body-left', key: 'left-panel' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(date_table, extends_default()({ format: format }, tableProps, { visibleMonth: startVisibleMonth, onSelectDate: this.onSelectCell }))
                    ), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'calendar-body-right', key: 'right-panel' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(date_table, extends_default()({ format: format }, tableProps, { visibleMonth: endVisibleMonth, onSelectDate: this.onSelectCell }))
                    )];
                    header = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(range_panel_header, extends_default()({}, headerProps, {
                        goPrevYear: this.goPrevYear,
                        goPrevMonth: this.goPrevMonth,
                        goNextYear: this.goNextYear,
                        goNextMonth: this.goNextMonth }));
                    break;
                }
            case CALENDAR_MODE_MONTH:
                {
                    table = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(month_table, extends_default()({}, tableProps, { visibleMonth: visibleMonth, onSelectMonth: this.onSelectCell }));
                    header = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(month_panel_header, extends_default()({}, headerProps, { visibleMonth: visibleMonth, goPrevYear: this.goPrevYear, goNextYear: this.goNextYear }));
                    break;
                }
            case CALENDAR_MODE_YEAR:
                {
                    table = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(year_table, extends_default()({}, tableProps, {
                        rtl: rtl,
                        visibleMonth: visibleMonth,
                        onSelectYear: this.onSelectCell,
                        goPrevDecade: this.goPrevDecade,
                        goNextDecade: this.goNextDecade }));
                    header = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(year_panel_header, extends_default()({}, headerProps, {
                        visibleMonth: visibleMonth,
                        goPrevDecade: this.goPrevDecade,
                        goNextDecade: this.goNextDecade }));
                    break;
                }
        }

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'calendar'] = true, _classnames[prefix + 'calendar-range'] = true, _classnames), className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(RangeCalendar.propTypes, others), { className: classNames }),
            header,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'calendar-body' },
                table
            )
        );
    };

    return RangeCalendar;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), range_calendar__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 默认的开始日期
     */
    defaultStartValue: checkMomentObj,
    /**
     * 默认的结束日期
     */
    defaultEndValue: checkMomentObj,
    /**
     * 开始日期（moment 对象）
     */
    startValue: checkMomentObj,
    /**
     * 结束日期（moment 对象）
     */
    endValue: checkMomentObj,
    // 面板模式
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(CALENDAR_MODES),
    // 日期值的格式（用于日期title显示的格式）
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否显示非本月的日期
     */
    showOtherMonth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 模板展示的月份（起始月份）
     */
    defaultVisibleMonth: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 展现的月份变化时的回调
     * @param {Object} value 显示的月份 (moment 对象)
     * @param {String} reason 触发月份改变原因
     */
    onVisibleMonthChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 不可选择的日期
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {Boolean}
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选择日期单元格时的回调
     * @param {Object} value 对应的日期值 (moment 对象)
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义日期单元格渲染
     */
    dateCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, range_calendar__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    mode: CALENDAR_MODE_DATE,
    format: 'YYYY-MM-DD',
    dateCellRender: function dateCellRender(value) {
        return value.date();
    },
    onSelect: func.noop,
    onVisibleMonthChange: func.noop,
    locale: zh_cn.Calendar,
    showOtherMonth: false
}, range_calendar__temp);
range_calendar_RangeCalendar.displayName = 'RangeCalendar';


/* harmony default export */ var range_calendar = (config_provider.config(range_calendar_RangeCalendar, { componentName: 'Calendar' }));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/range-picker.js






var range_picker__class, range_picker__temp;














var range_picker_Popup = es_overlay.Popup;


function mapInputStateName(name) {
    return {
        startValue: 'startDateInputStr',
        endValue: 'endDateInputStr',
        startTime: 'startTimeInputStr',
        endTime: 'endTimeInputStr'
    }[name];
}

function mapTimeToValue(name) {
    return {
        startTime: 'startValue',
        endTime: 'endValue'
    }[name];
}

function getFormatValues(values, format) {
    if (!Array.isArray(values)) {
        return [null, null];
    }
    return [util_formatDateValue(values[0], format), util_formatDateValue(values[1], format)];
}

/**
 * DatePicker.RangePicker
*/
var range_picker_RangePicker = (range_picker__temp = range_picker__class = function (_Component) {
    inherits_default()(RangePicker, _Component);

    function RangePicker(props, context) {
        classCallCheck_default()(this, RangePicker);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this.onSelectCalendarPanel = function (value) {
            var _this$props = _this.props,
                showTime = _this$props.showTime,
                resetTime = _this$props.resetTime;
            var _this$state = _this.state,
                prevActiveDateInput = _this$state.activeDateInput,
                prevStartValue = _this$state.startValue,
                prevEndValue = _this$state.endValue;

            var newState = {
                activeDateInput: prevActiveDateInput,
                inputing: false
            };

            var newValue = value;
            switch (prevActiveDateInput) {
                case 'startValue':
                    {
                        if (!prevEndValue || value.valueOf() <= prevEndValue.valueOf()) {
                            newState.activeDateInput = 'endValue';
                        }

                        if (showTime) {
                            if (!prevStartValue) {
                                // 第一次选择，如果设置了时间默认值，则使用该默认时间
                                if (showTime.defaultValue) {
                                    var defaultTimeValue = util_formatDateValue(showTime.defaultValue, _this.timeFormat);
                                    newValue = resetValueTime(value, defaultTimeValue);
                                }
                            } else if (!resetTime) {
                                // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                                newValue = resetValueTime(value, prevStartValue);
                            }
                        }

                        newState.startValue = newValue;

                        if (prevEndValue && value.valueOf() > prevEndValue.valueOf()) {
                            newState.endValue = null;
                            newState.activeDateInput = 'endValue';
                        }
                        break;
                    }

                case 'endValue':
                    if (!prevStartValue) {
                        newState.activeDateInput = 'startValue';
                    }

                    if (showTime) {
                        if (!prevEndValue) {
                            // 第一次选择，如果设置了时间默认值，则使用该默认时间
                            if (showTime.defaultValue) {
                                var _defaultTimeValue = util_formatDateValue(showTime.defaultValue, _this.timeFormat);
                                newValue = resetValueTime(value, _defaultTimeValue);
                            }
                        } else if (!resetTime) {
                            // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                            newValue = resetValueTime(value, prevEndValue);
                        }
                    }

                    newState.endValue = newValue;

                    // 选择了一个比开始日期更小的结束日期，此时表示用户重新选择了
                    if (prevStartValue && value.valueOf() < prevStartValue.valueOf()) {
                        newState.startValue = value;
                        newState.endValue = null;
                    }
                    break;
            }

            var newStartValue = 'startValue' in newState ? newState.startValue : prevStartValue;
            var newEndValue = 'endValue' in newState ? newState.endValue : prevEndValue;

            // 受控状态选择不更新值
            if ('value' in _this.props) {
                delete newState.startValue;
                delete newState.endValue;
            }

            _this.setState(newState);

            _this.onValueChange([newStartValue, newEndValue]);
        };

        _this.clearRange = function () {

            _this.setState({
                startDateInputStr: '',
                endDateInputStr: '',
                startTimeInputStr: '',
                endTimeInputStr: ''
            });

            if (!('value' in _this.props)) {
                _this.setState({
                    startValue: null,
                    endValue: null
                });
            }

            _this.onValueChange([]);
        };

        _this.onDateInputChange = function (inputStr, e, eventType) {
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this.clearRange();
            } else {
                var _this$setState;

                var stateName = mapInputStateName(_this.state.activeDateInput);
                _this.setState((_this$setState = {}, _this$setState[stateName] = inputStr, _this$setState.inputing = _this.state.activeDateInput, _this$setState));
            }
        };

        _this.onDateInputBlur = function () {
            var stateName = mapInputStateName(_this.state.activeDateInput);
            var dateInputStr = _this.state[stateName];
            if (dateInputStr) {
                var _this$setState2;

                var _this$props2 = _this.props,
                    format = _this$props2.format,
                    disabledDate = _this$props2.disabledDate;

                var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(dateInputStr, format, true);

                _this.setState((_this$setState2 = {}, _this$setState2[stateName] = '', _this$setState2.inputing = false, _this$setState2));

                if (parsed.isValid() && !disabledDate(parsed)) {

                    var valueName = _this.state.activeDateInput;
                    var newValue = parsed;

                    _this.handleChange(valueName, newValue);
                }
            }
        };

        _this.onFocusDateInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }
            if (_this.state.panel !== PANEL.DATE) {
                _this.setState({
                    panel: PANEL.DATE
                });
            }
        };

        _this.onFocusTimeInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }

            if (_this.state.panel !== PANEL.TIME) {
                _this.setState({
                    panel: PANEL.TIME
                });
            }
        };

        _this.onSelectStartTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    startValue: value,
                    inputing: false,
                    activeDateInput: 'startTime'
                });
            }
            if (value.valueOf() !== _this.state.startValue.valueOf()) {
                _this.onValueChange([value, _this.state.endValue]);
            }
        };

        _this.onSelectEndTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    endValue: value,
                    inputing: false,
                    activeDateInput: 'endTime'
                });
            }
            if (value.valueOf() !== _this.state.endValue.valueOf()) {
                _this.onValueChange([_this.state.startValue, value]);
            }
        };

        _this.onTimeInputChange = function (inputStr) {
            var _this$setState3;

            var stateName = mapInputStateName(_this.state.activeDateInput);
            _this.setState((_this$setState3 = {}, _this$setState3[stateName] = inputStr, _this$setState3.inputing = _this.state.activeDateInput, _this$setState3));
        };

        _this.onTimeInputBlur = function () {
            var stateName = mapInputStateName(_this.state.activeDateInput);
            var timeInputStr = _this.state[stateName];
            if (timeInputStr) {
                var _this$setState4;

                var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(timeInputStr, _this.timeFormat, true);

                _this.setState((_this$setState4 = {}, _this$setState4[stateName] = '', _this$setState4.inputing = false, _this$setState4));

                if (parsed.isValid()) {
                    var hour = parsed.hour();
                    var minute = parsed.minute();
                    var second = parsed.second();
                    var valueName = mapTimeToValue(_this.state.activeDateInput);
                    var newValue = _this.state[valueName].clone().hour(hour).minute(minute).second(second);

                    _this.handleChange(valueName, newValue);
                }
            }
        };

        _this.handleChange = function (valueName, newValue) {
            if (!('value' in _this.props)) {
                var _this$setState5;

                _this.setState((_this$setState5 = {}, _this$setState5[valueName] = newValue, _this$setState5));
            }

            var startValue = valueName === 'startValue' ? newValue : _this.state.startValue;
            var endValue = valueName === 'endValue' ? newValue : _this.state.endValue;

            _this.onValueChange([startValue, endValue]);
        };

        _this.onVisibleChange = function (visible, reason) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, reason);
        };

        _this.changePanel = function (panel) {
            _this.setState({
                panel: panel,
                activeDateInput: panel === PANEL.DATE ? 'startValue' : 'startTime'
            });
        };

        _this.onOk = function () {
            _this.onVisibleChange(false, 'okBtnClick');
            _this.onValueChange([_this.state.startValue, _this.state.endValue], 'onOk');
        };

        _this.getDisabledTime = function (_ref) {
            var startValue = _ref.startValue,
                endValue = _ref.endValue;

            var _ref2 = _this.props.showTime || {},
                disabledHours = _ref2.disabledHours,
                disabledMinutes = _ref2.disabledMinutes,
                disabledSeconds = _ref2.disabledSeconds;

            var disabledTime = {};

            if (startValue && endValue) {
                var isSameDay = startValue.format('L') === endValue.format('L');
                var newDisabledHours = isFunction(disabledHours) ? disabledHours : function (index) {
                    if (isSameDay && index < startValue.hour()) {
                        return true;
                    }
                };

                var newDisabledMinutes = isFunction(disabledMinutes) ? disabledMinutes : function (index) {
                    if (isSameDay && startValue.hour() === endValue.hour() && index < startValue.minute()) {
                        return true;
                    }
                };

                var newDisabledSeconds = isFunction(disabledSeconds) ? disabledSeconds : function (index) {
                    if (isSameDay && startValue.hour() === endValue.hour() && startValue.minute() === endValue.minute() && index <= startValue.second()) {
                        return true;
                    }
                };
                disabledTime = {
                    disabledHours: newDisabledHours,
                    disabledMinutes: newDisabledMinutes,
                    disabledSeconds: newDisabledSeconds
                };
            }

            return disabledTime;
        };

        var dateTimeFormat = getDateTimeFormat(props.format, props.showTime);
        extend(dateTimeFormat, _this);

        var val = props.value || props.defaultValue;
        var values = getFormatValues(val, _this.dateTimeFormat);
        _this.inputAsString = val && (typeof val[0] === 'string' || typeof val[1] === 'string');
        _this.state = {
            visible: props.visible || props.defaultVisible,
            startValue: values[0],
            endValue: values[1],
            startDateInputStr: '',
            endDateInputStr: '',
            activeDateInput: 'startValue',
            startTimeInputStr: '',
            endTimeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            panel: PANEL.DATE
        };
        return _this;
    }

    RangePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('showTime' in nextProps) {
            var dateTimeFormat = getDateTimeFormat(nextProps.format || this.props.format, nextProps.showTime);
            extend(dateTimeFormat, this);
        }

        if ('value' in nextProps) {
            var values = getFormatValues(nextProps.value, this.dateTimeFormat);
            this.setState({
                startValue: values[0],
                endValue: values[1]
            });
            this.inputAsString = nextProps.value && (typeof nextProps.value[0] === 'string' || typeof nextProps.value[1] === 'string');
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    RangePicker.prototype.onValueChange = function onValueChange(values) {
        var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'onChange';

        var ret = void 0;
        if (!values.length || !this.inputAsString) {
            ret = values;
        } else {
            ret = [values[0] ? values[0].format(this.dateTimeFormat) : null, values[1] ? values[1].format(this.dateTimeFormat) : null];
        }
        this.props[handler](ret);
    };

    // 如果用户没有给定时间禁用逻辑，则给默认到禁用逻辑，即如果是同一天，则时间不能是同样的


    RangePicker.prototype.render = function render() {
        var _classnames,
            _classnames2,
            _classnames3,
            _classnames4,
            _classnames5,
            _this2 = this,
            _PANEL$DATE$PANEL$TIM;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            defaultVisibleMonth = _props.defaultVisibleMonth,
            onVisibleMonthChange = _props.onVisibleMonthChange,
            showTime = _props.showTime,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            label = _props.label,
            inputState = _props.state,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            locale = _props.locale,
            inputProps = _props.inputProps,
            dateCellRender = _props.dateCellRender,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'defaultVisibleMonth', 'onVisibleMonthChange', 'showTime', 'disabledDate', 'footerRender', 'label', 'state', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'locale', 'inputProps', 'dateCellRender']);

        var state = this.state;

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'range-picker'] = true, _classnames['' + prefix + size] = size, _classnames[prefix + 'disabled'] = disabled, _classnames), className);

        var panelBodyClassName = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'range-picker-body'] = true, _classnames2[prefix + 'range-picker-body-show-time'] = showTime, _classnames2));

        var triggerCls = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'range-picker-trigger'] = true, _classnames3[prefix + 'error'] = inputState === 'error', _classnames3));

        var startDateInputCls = _classnames_2_2_6_classnames_default()((_classnames4 = {}, _classnames4[prefix + 'range-picker-panel-input-start-date'] = true, _classnames4[prefix + 'focus'] = state.activeDateInput === 'startValue', _classnames4));

        var endDateInputCls = _classnames_2_2_6_classnames_default()((_classnames5 = {}, _classnames5[prefix + 'range-picker-panel-input-end-date'] = true, _classnames5[prefix + 'focus'] = state.activeDateInput === 'endValue', _classnames5));

        if (rtl) {
            others.dir = 'rtl';
        }

        var startDateInputValue = state.inputing === 'startValue' ? state.startDateInputStr : state.startValue && state.startValue.format(this.format) || '';
        var endDateInputValue = state.inputing === 'endValue' ? state.endDateInputStr : state.endValue && state.endValue.format(this.format) || '';

        var startTriggerValue = startDateInputValue;
        var endTriggerValue = endDateInputValue;

        var sharedInputProps = extends_default()({}, inputProps, {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        });

        var startDateInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
            placeholder: this.format,
            value: startDateInputValue,
            onFocus: function onFocus() {
                return _this2.onFocusDateInput('startValue');
            },
            className: startDateInputCls }));

        var endDateInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
            placeholder: this.format,
            value: endDateInputValue,
            onFocus: function onFocus() {
                return _this2.onFocusDateInput('endValue');
            },
            className: endDateInputCls }));

        var datePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(range_calendar, {
            showOtherMonth: true,
            dateCellRender: dateCellRender,
            format: this.format,
            defaultVisibleMonth: defaultVisibleMonth,
            onVisibleMonthChange: onVisibleMonthChange,
            disabledDate: disabledDate,
            onSelect: this.onSelectCalendarPanel,
            startValue: state.startValue,
            endValue: state.endValue });

        var startTimeInput = null;
        var endTimeInput = null;
        var timePanel = null;
        var panelFooter = footerRender();

        if (showTime) {
            var _classnames6, _classnames7;

            var startTimeInputValue = state.inputing === 'startTime' ? state.startTimeInputStr : state.startValue && state.startValue.format(this.timeFormat) || '';
            var endTimeInputValue = state.inputing === 'endTime' ? state.endTimeInputStr : state.endValue && state.endValue.format(this.timeFormat) || '';

            startTriggerValue = state.startValue && state.startValue.format(this.dateTimeFormat) || '';
            endTriggerValue = state.endValue && state.endValue.format(this.dateTimeFormat) || '';

            var sharedTimeInputProps = {
                size: size,
                placeholder: this.timeFormat,
                onFocus: this.onFocusTimeInput,
                onBlur: this.onTimeInputBlur,
                onPressEnter: this.onTimeInputBlur,
                onChange: this.onTimeInputChange
            };

            var startTimeInputCls = _classnames_2_2_6_classnames_default()((_classnames6 = {}, _classnames6[prefix + 'range-picker-panel-input-start-time'] = true, _classnames6[prefix + 'focus'] = state.activeDateInput === 'startTime', _classnames6));

            startTimeInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedTimeInputProps, {
                value: startTimeInputValue,
                disabled: disabled || !state.startValue || !state.endValue,
                onFocus: function onFocus() {
                    return _this2.onFocusTimeInput('startTime');
                },
                className: startTimeInputCls
            }));

            var endTimeInputCls = _classnames_2_2_6_classnames_default()((_classnames7 = {}, _classnames7[prefix + 'range-picker-panel-input-end-time'] = true, _classnames7[prefix + 'focus'] = state.activeDateInput === 'endTime', _classnames7));

            endTimeInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedTimeInputProps, {
                value: endTimeInputValue,
                disabled: disabled || !state.endValue || !state.startValue,
                onFocus: function onFocus() {
                    return _this2.onFocusTimeInput('endTime');
                },
                className: endTimeInputCls
            }));

            var showSecond = this.timeFormat.indexOf('s') > -1;

            var sharedTimePickerProps = extends_default()({}, showTime, {
                prefix: prefix,
                locale: locale,
                disabled: disabled,
                showSecond: showSecond
            });

            var disabledTime = this.getDisabledTime(state);

            timePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'range-picker-panel-time' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_picker_panel, extends_default()({}, sharedTimePickerProps, { className: prefix + 'range-picker-panel-time-start', value: state.startValue, onSelect: this.onSelectStartTime })),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_picker_panel, extends_default()({}, sharedTimePickerProps, disabledTime, { className: prefix + 'range-picker-panel-time-end', value: state.endValue, onSelect: this.onSelectEndTime }))
            );
        }

        panelFooter = panelFooter || external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(panel_footer, {
            prefix: prefix,
            value: state.startValue && state.endValue,
            locale: locale,
            panel: state.panel,
            onPanelChange: showTime ? this.changePanel : null,
            onOk: this.onOk
        });

        var panelBody = (_PANEL$DATE$PANEL$TIM = {}, _PANEL$DATE$PANEL$TIM[PANEL.DATE] = datePanel, _PANEL$DATE$PANEL$TIM[PANEL.TIME] = timePanel, _PANEL$DATE$PANEL$TIM)[state.panel];

        var allowClear = state.startValue && state.endValue && hasClear;
        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: triggerCls },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                label: label,
                placeholder: locale.startPlaceholder,
                value: startTriggerValue,
                hasBorder: false,
                className: prefix + 'range-picker-trigger-input',
                onFocus: function onFocus() {
                    return _this2.onFocusDateInput('startValue');
                } })),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'range-picker-trigger-separator' },
                '-'
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                placeholder: locale.endPlaceholder,
                value: endTriggerValue,
                hasBorder: false,
                className: prefix + 'range-picker-trigger-input',
                onFocus: function onFocus() {
                    return _this2.onFocusDateInput('endValue');
                },
                hasClear: allowClear,
                hint: 'calendar' }))
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(RangePicker.propTypes, others), { className: classNames }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                range_picker_Popup,
                extends_default()({}, popupProps, {
                    autoFoucs: true,
                    disabled: disabled,
                    visible: state.visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { dir: others.dir, className: panelBodyClassName },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'range-picker-panel-header' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                            'div',
                            { className: prefix + 'range-picker-panel-input' },
                            startDateInput,
                            startTimeInput,
                            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                                'span',
                                { className: prefix + 'range-picker-panel-input-separator' },
                                '-'
                            ),
                            endDateInput,
                            endTimeInput
                        )
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return RangePicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), range_picker__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 默认展示的起始月份
     * @return {MomentObject} 返回包含指定月份的 moment 对象实例
     */
    defaultVisibleMonth: _prop_types_15_7_2_prop_types_default.a.func,
    onVisibleMonthChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期范围值数组 [moment, moment]
     */
    value: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 初始的日期范围值数组 [moment, moment]
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 日期格式
     */
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否使用时间控件，支持传入 TimePicker 的属性
     */
    showTime: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 每次选择是否重置时间（仅在 showTime 开启时有效）
     */
    resetTime: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期范围值改变时的回调 [ MomentObject|String, MomentObject|String ]
     * @param {Array<MomentObject|String>} value 日期值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`
     * @return {Array} 日期范围
     */
    onOk: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 输入框内置标签
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'loading', 'success']),
    /**
     * 输入框尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式, 具体含义见 OverLay文档
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层其他属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 输入框其他属性
     */
    inputProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义日期单元格渲染
     */
    dateCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, range_picker__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    format: 'YYYY-MM-DD',
    size: 'medium',
    showTime: false,
    resetTime: false,
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: zh_cn.DatePicker,
    onChange: func.noop,
    onOk: func.noop,
    onVisibleChange: func.noop
}, range_picker__temp);
range_picker_RangePicker.displayName = 'RangePicker';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/month-picker.js






var month_picker__class, month_picker__temp, month_picker__initialiseProps;












var month_picker_Popup = es_overlay.Popup;

/**
 * DatePicker.MonthPicker
 */

var month_picker_MonthPicker = (month_picker__temp = month_picker__class = function (_Component) {
    inherits_default()(MonthPicker, _Component);

    function MonthPicker(props, context) {
        classCallCheck_default()(this, MonthPicker);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        month_picker__initialiseProps.call(_this);

        var value = util_formatDateValue(props.value || props.defaultValue, props.format);

        _this.inputAsString = typeof (props.value || props.defaultValue) === 'string'; // 判断用户输入是否是字符串
        _this.state = {
            value: value,
            dateInputStr: '',
            inputing: false,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }

    MonthPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = util_formatDateValue(nextProps.value, nextProps.format || this.props.format);
            this.setState({
                value: value
            });
            this.inputAsString = typeof nextProps.value === 'string';
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    MonthPicker.prototype.render = function render() {
        var _classnames, _classnames2, _classnames3;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            locale = _props.locale,
            label = _props.label,
            state = _props.state,
            format = _props.format,
            defaultVisibleYear = _props.defaultVisibleYear,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            placeholder = _props.placeholder,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            inputProps = _props.inputProps,
            monthCellRender = _props.monthCellRender,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'locale', 'label', 'state', 'format', 'defaultVisibleYear', 'disabledDate', 'footerRender', 'placeholder', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'inputProps', 'monthCellRender']);

        var _state = this.state,
            visible = _state.visible,
            value = _state.value,
            dateInputStr = _state.dateInputStr,
            inputing = _state.inputing;


        var monthPickerCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'month-picker'] = true, _classnames), className);

        var triggerInputCls = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'month-picker-input'] = true, _classnames2[prefix + 'error'] = false, _classnames2));

        var panelBodyClassName = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'month-picker-body'] = true, _classnames3));

        if (rtl) {
            others.dir = 'rtl';
        }

        var panelInputCls = prefix + 'month-picker-panel-input';

        var sharedInputProps = extends_default()({}, inputProps, {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        });

        var dateInputValue = inputing ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;

        var dateInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
            value: dateInputValue,
            onFocus: this.onFoucsDateInput,
            placeholder: format,
            className: panelInputCls }));

        var datePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_calendar, {
            shape: 'panel',
            modes: ['month', 'year'],
            monthCellRender: monthCellRender,
            value: value,
            onSelect: this.onSelectCalendarPanel,
            defaultVisibleMonth: defaultVisibleYear,
            disabledDate: disabledDate });

        var panelBody = datePanel;
        var panelFooter = footerRender();

        var allowClear = value && hasClear;
        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'month-picker-trigger' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                label: label,
                state: state,
                value: triggerInputValue,
                placeholder: placeholder || locale.monthPlaceholder,
                hint: 'calendar',
                hasClear: allowClear,
                className: triggerInputCls }))
        );
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(MonthPicker.propTypes, others), { className: monthPickerCls }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                month_picker_Popup,
                extends_default()({}, popupProps, {
                    autoFocus: true,
                    disabled: disabled,
                    visible: visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: panelBodyClassName, dir: others.dir },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'month-picker-panel-header' },
                        dateInput
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return MonthPicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), month_picker__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 输入框内置标签
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['success', 'loading', 'error']),
    /**
     * 输入提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 默认展现的年
     * @return {MomentObject} 返回包含指定年份的 moment 对象实例
     */
    defaultVisibleYear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期值（受控）moment 对象
     */
    value: util_checkDateValue,
    /**
     * 初始日期值，moment 对象
     */
    defaultValue: util_checkDateValue,
    /**
     * 日期值的格式（用于限定用户输入和展示）
     */
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期值改变时的回调
     * @param {MomentObject|String} value 日期值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 输入框尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式, 具体含义见 OverLay文档
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层其他属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 输入框其他属性
     */
    inputProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义月份渲染函数
     * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
     * @returns {ReactNode}
     */
    monthCellRender: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, month_picker__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    format: 'YYYY-MM',
    size: 'medium',
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: zh_cn.DatePicker,
    onChange: func.noop,
    onVisibleChange: func.noop
}, month_picker__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onValueChange = function (newValue) {
        var ret = _this2.inputAsString && newValue ? newValue.format(_this2.props.format) : newValue;
        _this2.props.onChange(ret);
    };

    this.onSelectCalendarPanel = function (value) {
        // const { format } = this.props;
        var prevSelectedMonth = _this2.state.value;
        var selectedMonth = value.clone().date(1).hour(0).minute(0).second(0);

        _this2.handleChange(selectedMonth, prevSelectedMonth, { inputing: false }, function () {
            _this2.onVisibleChange(false, 'calendarSelect');
        });
    };

    this.clearValue = function () {
        _this2.setState({
            dateInputStr: ''
        });

        _this2.handleChange(null, _this2.state.value);
    };

    this.onDateInputChange = function (inputStr, e, eventType) {
        if (eventType === 'clear' || !inputStr) {
            e.stopPropagation();
            _this2.clearValue();
        } else {
            _this2.setState({
                dateInputStr: inputStr,
                inputing: true
            });
        }
    };

    this.onDateInputBlur = function () {
        var dateInputStr = _this2.state.dateInputStr;

        if (dateInputStr) {
            var _props2 = _this2.props,
                disabledDate = _props2.disabledDate,
                format = _props2.format;

            var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(dateInputStr, format, true);

            _this2.setState({
                dateInputStr: '',
                inputing: false
            });

            if (parsed.isValid() && !disabledDate(parsed)) {
                _this2.handleChange(parsed, _this2.state.value);
            }
        }
    };

    this.handleChange = function (newValue, prevValue) {
        var others = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        if (!('value' in _this2.props)) {
            _this2.setState(extends_default()({
                value: newValue
            }, others));
        }

        var format = _this2.props.format;


        var newValueOf = newValue ? newValue.format(format) : null;
        var preValueOf = prevValue ? prevValue.format(format) : null;

        if (newValueOf !== preValueOf) {
            _this2.onValueChange(newValue);
            if (typeof callback === 'function') {
                return callback();
            }
        }
    };

    this.onVisibleChange = function (visible, reason) {
        if (!('visible' in _this2.props)) {
            _this2.setState({
                visible: visible
            });
        }
        _this2.props.onVisibleChange(visible, reason);
    };
}, month_picker__temp);
month_picker_MonthPicker.displayName = 'MonthPicker';


/* harmony default export */ var month_picker = (month_picker_MonthPicker);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/year-picker.js






var year_picker__class, year_picker__temp, year_picker__initialiseProps;












var year_picker_Popup = es_overlay.Popup;

/**
 * DatePicker.YearPicker
 */

var year_picker_YearPicker = (year_picker__temp = year_picker__class = function (_Component) {
    inherits_default()(YearPicker, _Component);

    function YearPicker(props, context) {
        classCallCheck_default()(this, YearPicker);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        year_picker__initialiseProps.call(_this);

        var value = util_formatDateValue(props.value || props.defaultValue, props.format);

        _this.inputAsString = typeof (props.value || props.defaultValue) === 'string'; // 判断用户输入是否是字符串
        _this.state = {
            value: value,
            dateInputStr: '',
            inputing: false,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }

    YearPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = util_formatDateValue(nextProps.value, nextProps.format || this.props.format);
            this.setState({
                value: value
            });
            this.inputAsString = typeof nextProps.value === 'string';
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    YearPicker.prototype.render = function render() {
        var _classnames, _classnames2, _classnames3;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            locale = _props.locale,
            label = _props.label,
            state = _props.state,
            format = _props.format,
            disabledDate = _props.disabledDate,
            footerRender = _props.footerRender,
            placeholder = _props.placeholder,
            size = _props.size,
            disabled = _props.disabled,
            hasClear = _props.hasClear,
            popupTriggerType = _props.popupTriggerType,
            popupAlign = _props.popupAlign,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            className = _props.className,
            inputProps = _props.inputProps,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'locale', 'label', 'state', 'format', 'disabledDate', 'footerRender', 'placeholder', 'size', 'disabled', 'hasClear', 'popupTriggerType', 'popupAlign', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'className', 'inputProps']);

        var _state = this.state,
            visible = _state.visible,
            value = _state.value,
            dateInputStr = _state.dateInputStr,
            inputing = _state.inputing;


        var yearPickerCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'year-picker'] = true, _classnames), className);

        var triggerInputCls = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'year-picker-input'] = true, _classnames2[prefix + 'error'] = false, _classnames2));

        var panelBodyClassName = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'year-picker-body'] = true, _classnames3));

        if (rtl) {
            others.dir = 'rtl';
        }

        var panelInputCls = prefix + 'year-picker-panel-input';

        var sharedInputProps = extends_default()({}, inputProps, {
            size: size,
            disabled: disabled,
            onChange: this.onDateInputChange,
            onBlur: this.onDateInputBlur,
            onPressEnter: this.onDateInputBlur
        });

        var dateInputValue = inputing ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;

        var dateInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
            value: dateInputValue,
            onFocus: this.onFoucsDateInput,
            placeholder: format,
            className: panelInputCls }));

        var datePanel = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_calendar, {
            shape: 'panel',
            modes: ['year'],
            value: value,
            onSelect: this.onSelectCalendarPanel,
            disabledDate: disabledDate });

        var panelBody = datePanel;
        var panelFooter = footerRender();

        var allowClear = value && hasClear;
        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'year-picker-trigger' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                label: label,
                state: state,
                value: triggerInputValue,
                placeholder: placeholder || locale.yearPlaceholder,
                hint: 'calendar',
                hasClear: allowClear,
                className: triggerInputCls }))
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(YearPicker.propTypes, others), { className: yearPickerCls }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                year_picker_Popup,
                extends_default()({}, popupProps, {
                    autoFocus: true,
                    disabled: disabled,
                    visible: visible,
                    onVisibleChange: this.onVisibleChange,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    container: popupContainer,
                    style: popupStyle,
                    className: popupClassName,
                    trigger: trigger }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { dir: others.dir, className: panelBodyClassName },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'year-picker-panel-header' },
                        dateInput
                    ),
                    panelBody,
                    panelFooter
                )
            )
        );
    };

    return YearPicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), year_picker__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 输入框内置标签
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['success', 'loading', 'error']),
    /**
     * 输入提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 日期值（受控）moment 对象
     */
    value: util_checkDateValue,
    /**
     * 初始日期值，moment 对象
     */
    defaultValue: util_checkDateValue,
    /**
     * 日期值的格式（用于限定用户输入和展示）
     */
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 禁用日期函数
     * @param {MomentObject} 日期值
     * @return {Boolean} 是否禁用
     */
    disabledDate: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义面板页脚
     * @return {Node} 自定义的面板页脚组件
     */
    footerRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 日期值改变时的回调
     * @param {MomentObject|String} value 日期值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 输入框尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示清空按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式, 具体含义见 OverLay文档
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层容器
     * @param {Element} target 目标元素
     * @return {Element} 弹层的容器元素
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层其他属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 输入框其他属性
     */
    inputProps: _prop_types_15_7_2_prop_types_default.a.object,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, year_picker__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    format: 'YYYY',
    size: 'medium',
    disabledDate: function disabledDate() {
        return false;
    },
    footerRender: function footerRender() {
        return null;
    },
    hasClear: true,
    popupTriggerType: 'click',
    popupAlign: 'tl tl',
    locale: zh_cn.DatePicker,
    onChange: func.noop,
    onVisibleChange: func.noop
}, year_picker__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onValueChange = function (newValue) {
        var ret = _this2.inputAsString && newValue ? newValue.format(_this2.props.format) : newValue;
        _this2.props.onChange(ret);
    };

    this.onSelectCalendarPanel = function (value) {
        // const { format } = this.props;
        var prevSelectedMonth = _this2.state.value;
        var selectedMonth = value.clone().month(0).date(1).hour(0).minute(0).second(0);

        _this2.handleChange(selectedMonth, prevSelectedMonth, { inputing: false }, function () {
            _this2.onVisibleChange(false, 'calendarSelect');
        });
    };

    this.clearValue = function () {
        _this2.setState({
            dateInputStr: ''
        });

        _this2.handleChange(null, _this2.state.value);
    };

    this.onDateInputChange = function (inputStr, e, eventType) {
        if (eventType === 'clear' || !inputStr) {
            e.stopPropagation();
            _this2.clearValue();
        } else {
            _this2.setState({
                dateInputStr: inputStr,
                inputing: true
            });
        }
    };

    this.onDateInputBlur = function () {
        var dateInputStr = _this2.state.dateInputStr;

        if (dateInputStr) {
            var _props2 = _this2.props,
                disabledDate = _props2.disabledDate,
                format = _props2.format;

            var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(dateInputStr, format, true);

            _this2.setState({
                dateInputStr: '',
                inputing: false
            });

            if (parsed.isValid() && !disabledDate(parsed)) {
                _this2.handleChange(parsed, _this2.state.value);
            }
        }
    };

    this.handleChange = function (newValue, prevValue) {
        var others = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = arguments[3];

        if (!('value' in _this2.props)) {
            _this2.setState(extends_default()({
                value: newValue
            }, others));
        }

        var format = _this2.props.format;


        var newValueOf = newValue ? newValue.format(format) : null;
        var preValueOf = prevValue ? prevValue.format(format) : null;

        if (newValueOf !== preValueOf) {
            _this2.onValueChange(newValue);
            if (typeof callback === 'function') {
                return callback();
            }
        }
    };

    this.onVisibleChange = function (visible, reason) {
        if (!('visible' in _this2.props)) {
            _this2.setState({
                visible: visible
            });
        }
        _this2.props.onVisibleChange(visible, reason);
    };
}, year_picker__temp);
year_picker_YearPicker.displayName = 'YearPicker';


/* harmony default export */ var year_picker = (year_picker_YearPicker);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/date-picker/index.js







/* istanbul ignore next */
var date_picker_transform = function transform(props, deprecated) {
    var open = props.open,
        defaultOpen = props.defaultOpen,
        onOpenChange = props.onOpenChange,
        others = objectWithoutProperties_default()(props, ['open', 'defaultOpen', 'onOpenChange']);

    var newProps = others;

    delete newProps.formater;

    if ('open' in props) {
        deprecated('open', 'visible', 'DatePicker');

        newProps.visible = open;

        if ('visible' in props) {
            newProps.visible = props.visible;
        }
    }

    if ('defaultOpen' in props) {
        deprecated('defaultOpen', 'defaultVisible', 'DatePicker');

        newProps.defaultVisible = defaultOpen;

        if ('defaultVisible' in props) {
            newProps.defaultVisible = props.defaultVisible;
        }
    }

    if ('onOpenChange' in props && typeof onOpenChange === 'function') {
        deprecated('onOpenChange', 'onVisibleChange', 'DatePicker');

        newProps.onVisibleChange = onOpenChange;

        if ('onVisibleChange' in props) {
            newProps.onVisibleChange = props.onVisibleChange;
        }
    }

    if ('formater' in props) {
        deprecated('formater', 'format showTime.format', 'DatePicker');
    }

    if ('format' in props && typeof props.format !== 'string') {
        deprecated('format', 'format: PropTypes.string,', 'DatePicker');
    }

    return newProps;
};

date_picker_DatePicker.RangePicker = config_provider.config(range_picker_RangePicker, {
    componentName: 'DatePicker',
    transform: date_picker_transform
});
date_picker_DatePicker.MonthPicker = config_provider.config(month_picker, {
    componentName: 'DatePicker',
    transform: date_picker_transform
});
date_picker_DatePicker.YearPicker = config_provider.config(year_picker, {
    componentName: 'DatePicker',
    transform: date_picker_transform
});

/* harmony default export */ var date_picker = (config_provider.config(date_picker_DatePicker, {
    transform: date_picker_transform
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/dialog/inner.js





var dialog_inner__class, dialog_inner__temp;









var inner_makeChain = func.makeChain;
var inner_pickOthers = util_obj.pickOthers;

var dialog_inner_noop = function noop() {};

var inner_Inner = (dialog_inner__temp = dialog_inner__class = function (_Component) {
    inherits_default()(Inner, _Component);

    function Inner() {
        classCallCheck_default()(this, Inner);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Inner.prototype.getNode = function getNode(name, ref) {
        this[name] = ref;
    };

    Inner.prototype.renderHeader = function renderHeader() {
        var _props = this.props,
            prefix = _props.prefix,
            title = _props.title;

        if (title) {
            this.titleId = util_guid('dialog-title-');
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'dialog-header', id: this.titleId, ref: this.getNode.bind(this, 'headerNode'), role: 'heading', 'aria-level': '1' },
                title
            );
        }
        return null;
    };

    Inner.prototype.renderBody = function renderBody() {
        var _props2 = this.props,
            prefix = _props2.prefix,
            children = _props2.children;

        if (children) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'dialog-body', ref: this.getNode.bind(this, 'bodyNode') },
                children
            );
        }
        return null;
    };

    Inner.prototype.renderFooter = function renderFooter() {
        var _cx,
            _this2 = this;

        var _props3 = this.props,
            prefix = _props3.prefix,
            footer = _props3.footer,
            footerAlign = _props3.footerAlign,
            footerActions = _props3.footerActions,
            locale = _props3.locale;


        if (footer === false) {
            return null;
        }

        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'dialog-footer'] = true, _cx[prefix + 'align-' + footerAlign] = true, _cx));
        var footerContent = footer === true || !footer ? footerActions.map(function (action) {
            var btnProps = _this2.props[action + 'Props'];
            var newBtnProps = extends_default()({}, btnProps, {
                prefix: prefix,
                className: _classnames_2_2_6_classnames_default()(prefix + 'dialog-btn', btnProps.className),
                onClick: inner_makeChain(_this2.props['on' + (action[0].toUpperCase() + action.slice(1))], btnProps.onClick),
                children: btnProps.children || locale[action]
            });
            if (action === 'ok') {
                newBtnProps.type = 'primary';
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_button, extends_default()({ key: action }, newBtnProps));
        }) : footer;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: newClassName, ref: this.getNode.bind(this, 'footerNode') },
            footerContent
        );
    };

    Inner.prototype.renderCloseLink = function renderCloseLink() {
        var _props4 = this.props,
            prefix = _props4.prefix,
            closeable = _props4.closeable,
            onClose = _props4.onClose,
            locale = _props4.locale;


        if (closeable) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                { role: 'button', 'aria-label': locale.close, href: 'javascript:;', className: prefix + 'dialog-close',
                    onClick: onClose },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'dialog-close-icon', type: 'close' })
            );
        }

        return null;
    };

    Inner.prototype.render = function render() {
        var _cx2;

        var _props5 = this.props,
            prefix = _props5.prefix,
            className = _props5.className,
            closeable = _props5.closeable,
            title = _props5.title,
            role = _props5.role,
            rtl = _props5.rtl;

        var others = inner_pickOthers(Object.keys(Inner.propTypes), this.props);
        var newClassName = _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'dialog'] = true, _cx2[prefix + 'closeable'] = closeable, _cx2[className] = !!className, _cx2));

        var header = this.renderHeader();
        var body = this.renderBody();
        var footer = this.renderFooter();
        var closeLink = this.renderCloseLink();

        var ariaProps = {
            role: role,
            'aria-modal': 'true'
        };
        if (title) {
            ariaProps['aria-labelledby'] = this.titleId;
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, ariaProps, { className: newClassName }, others, { dir: rtl ? 'rtl' : undefined }),
            header,
            body,
            footer,
            closeLink
        );
    };

    return Inner;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), dialog_inner__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    title: _prop_types_15_7_2_prop_types_default.a.node,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    footer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.node]),
    footerAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'center', 'right']),
    footerActions: _prop_types_15_7_2_prop_types_default.a.array,
    onOk: _prop_types_15_7_2_prop_types_default.a.func,
    onCancel: _prop_types_15_7_2_prop_types_default.a.func,
    okProps: _prop_types_15_7_2_prop_types_default.a.object,
    cancelProps: _prop_types_15_7_2_prop_types_default.a.object,
    closeable: _prop_types_15_7_2_prop_types_default.a.bool,
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    role: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, dialog_inner__class.defaultProps = {
    prefix: 'next-',
    footerAlign: 'right',
    footerActions: ['ok', 'cancel'],
    onOk: dialog_inner_noop,
    onCancel: dialog_inner_noop,
    okProps: {},
    cancelProps: {},
    closeable: true,
    onClose: dialog_inner_noop,
    locale: zh_cn.Dialog,
    role: 'dialog'
}, dialog_inner__temp);
inner_Inner.displayName = 'Inner';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/dialog/dialog.js






var dialog__class, dialog__temp;








var dialog_noop = function noop() {};
var dialog_limitTabRange = util_focus.limitTabRange;
var dialog_bindCtx = func.bindCtx;
var dialog_pickOthers = util_obj.pickOthers;
var dialog_getStyle = dom.getStyle,
    dialog_setStyle = dom.setStyle;

/**
 * Dialog
 */

var dialog_Dialog = (dialog__temp = dialog__class = function (_Component) {
    inherits_default()(Dialog, _Component);

    function Dialog(props, context) {
        classCallCheck_default()(this, Dialog);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        dialog_bindCtx(_this, ['onKeyDown', 'beforePosition', 'adjustPosition', 'getOverlayRef']);
        return _this;
    }

    Dialog.prototype.componentDidMount = function componentDidMount() {
        util_events.on(document, 'keydown', this.onKeyDown);
        if (!this.useCSSToPosition()) {
            this.adjustPosition();
        }
    };

    Dialog.prototype.componentWillUnmount = function componentWillUnmount() {
        util_events.off(document, 'keydown', this.onKeyDown);
    };

    Dialog.prototype.useCSSToPosition = function useCSSToPosition() {
        var _props = this.props,
            align = _props.align,
            isFullScreen = _props.isFullScreen;

        return align === 'cc cc' && isFullScreen;
    };

    Dialog.prototype.onKeyDown = function onKeyDown(e) {
        var node = this.getInnerNode();
        if (node) {
            dialog_limitTabRange(node, e);
        }
    };

    Dialog.prototype.beforePosition = function beforePosition() {
        if (this.props.visible && this.overlay) {
            var inner = this.getInner();
            if (inner) {
                var node = this.getInnerNode();
                if (this._lastDialogHeight !== dialog_getStyle(node, 'height')) {
                    this.revertSize(inner.bodyNode);
                }
            }
        }
    };

    Dialog.prototype.adjustPosition = function adjustPosition() {
        if (this.props.visible && this.overlay) {
            var inner = this.getInner();
            if (inner) {
                var node = this.getInnerNode();

                var top = dialog_getStyle(node, 'top');
                var minMargin = this.props.minMargin;
                if (top < minMargin) {
                    top = minMargin;
                    dialog_setStyle(node, 'top', minMargin + 'px');
                }

                var height = dialog_getStyle(node, 'height');
                var viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                if (viewportHeight < height + top * 2) {
                    var expectHeight = viewportHeight - top * 2;
                    this.adjustSize(inner, node, expectHeight);
                } else {
                    this.revertSize(inner.bodyNode);
                }

                this._lastDialogHeight = height;
            }
        }
    };

    Dialog.prototype.adjustSize = function adjustSize(inner, node, expectHeight) {
        var headerNode = inner.headerNode,
            bodyNode = inner.bodyNode,
            footerNode = inner.footerNode;


        var headerHeight = headerNode ? dialog_getStyle(headerNode, 'height') : 0;
        var footerHeight = footerNode ? dialog_getStyle(footerNode, 'height') : 0;
        var padding = dialog_getStyle(node, 'padding-top') + dialog_getStyle(node, 'padding-bottom');
        var maxBodyHeight = expectHeight - headerHeight - footerHeight - padding;
        if (maxBodyHeight < 0) {
            maxBodyHeight = 1;
        }

        this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;
        this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;

        dialog_setStyle(bodyNode, {
            'max-height': maxBodyHeight + 'px',
            'overflow-y': 'auto'
        });
    };

    Dialog.prototype.revertSize = function revertSize(bodyNode) {
        dialog_setStyle(bodyNode, {
            'max-height': this.dialogBodyStyleMaxHeight,
            'overflow-y': this.dialogBodyStyleOverflowY
        });
    };

    Dialog.prototype.mapcloseableToConfig = function mapcloseableToConfig(closeable) {
        return ['esc', 'close', 'mask'].reduce(function (ret, option) {
            var key = option.charAt(0).toUpperCase() + option.substr(1);
            var value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;

            if (option === 'esc' || option === 'mask') {
                ret['canCloseBy' + key] = value;
            } else {
                ret['canCloseBy' + key + 'Click'] = value;
            }

            return ret;
        }, {});
    };

    Dialog.prototype.getOverlayRef = function getOverlayRef(ref) {
        this.overlay = ref;
    };

    Dialog.prototype.getInner = function getInner() {
        return this.overlay.getInstance().getContent();
    };

    Dialog.prototype.getInnerNode = function getInnerNode() {
        return this.overlay.getInstance().getContentNode();
    };

    Dialog.prototype.renderInner = function renderInner(closeable) {
        var _props2 = this.props,
            prefix = _props2.prefix,
            className = _props2.className,
            title = _props2.title,
            children = _props2.children,
            footer = _props2.footer,
            footerAlign = _props2.footerAlign,
            footerActions = _props2.footerActions,
            onOk = _props2.onOk,
            onCancel = _props2.onCancel,
            okProps = _props2.okProps,
            cancelProps = _props2.cancelProps,
            onClose = _props2.onClose,
            locale = _props2.locale,
            visible = _props2.visible,
            rtl = _props2.rtl;

        var others = dialog_pickOthers(Object.keys(Dialog.propTypes), this.props);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            inner_Inner,
            extends_default()({ prefix: prefix,
                className: className,
                title: title,
                footer: footer,
                footerAlign: footerAlign,
                footerActions: footerActions,
                onOk: visible ? onOk : dialog_noop,
                onCancel: visible ? onCancel : dialog_noop,
                okProps: okProps,
                cancelProps: cancelProps,
                locale: locale,
                closeable: closeable,
                rtl: rtl,
                onClose: onClose.bind(this, 'closeClick')
            }, others),
            children
        );
    };

    Dialog.prototype.render = function render() {
        var _props3 = this.props,
            prefix = _props3.prefix,
            visible = _props3.visible,
            hasMask = _props3.hasMask,
            animation = _props3.animation,
            autoFocus = _props3.autoFocus,
            closeable = _props3.closeable,
            onClose = _props3.onClose,
            afterClose = _props3.afterClose,
            shouldUpdatePosition = _props3.shouldUpdatePosition,
            align = _props3.align,
            overlayProps = _props3.overlayProps,
            rtl = _props3.rtl;


        var useCSS = this.useCSSToPosition();

        var _mapcloseableToConfig = this.mapcloseableToConfig(closeable),
            canCloseByCloseClick = _mapcloseableToConfig.canCloseByCloseClick,
            closeConfig = objectWithoutProperties_default()(_mapcloseableToConfig, ['canCloseByCloseClick']);

        var newOverlayProps = extends_default()({}, overlayProps, {
            prefix: prefix,
            visible: visible,
            animation: animation,
            hasMask: hasMask,
            autoFocus: autoFocus,
            afterClose: afterClose
        }, closeConfig, {
            canCloseByOutSideClick: false,
            align: useCSS ? false : align,
            onRequestClose: onClose,
            needAdjust: false,
            disableScroll: true,
            ref: this.getOverlayRef,
            rtl: rtl
        });
        if (!useCSS) {
            newOverlayProps.beforePosition = this.beforePosition;
            newOverlayProps.onPosition = this.adjustPosition;
            newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;
        }

        var inner = this.renderInner(canCloseByCloseClick);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_overlay,
            newOverlayProps,
            useCSS ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'dialog-container', dir: rtl ? 'rtl' : undefined },
                inner
            ) : inner
        );
    };

    return Dialog;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), dialog__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 底部内容，设置为 false，则不进行显示
     * @default [<Button type="primary">确定</Button>, <Button>取消</Button>]
     */
    footer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.node]),
    /**
     * 底部按钮的对齐方式
     */
    footerAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'center', 'right']),
    /**
     * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：
     * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）
     * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）
     * ['ok']（只存在确认按钮）
     * ['cancel']（只存在取消按钮）
     */
    footerActions: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 在点击确定按钮时触发的回调函数
     * @param {Object} event 点击事件对象
     */
    onOk: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 在点击取消按钮时触发的回调函数
     * @param {Object} event 点击事件对象
     */
    onCancel: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 应用于确定按钮的属性对象
     */
    okProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 应用于取消按钮的属性对象
     */
    cancelProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：
     * **close** 表示点击关闭按钮可以关闭对话框
     * **mask** 表示点击遮罩区域可以关闭对话框
     * **esc** 表示按下 esc 键可以关闭对话框
     * 如 'close' 或 'close,esc,mask'
     * 如果设置为 true，则以上关闭方式全部生效
     * 如果设置为 false，则以上关闭方式全部失效
     */
    closeable: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 对话框关闭时触发的回调函数
     * @param {String} trigger 关闭触发行为的描述字符串
     * @param {Object} event 关闭时事件对象
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发
     */
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否显示遮罩
     */
    hasMask: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 显示隐藏时动画的播放方式
     * @property {String} in 进场动画
     * @property {String} out 出场动画
     */
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 对话框弹出时是否自动获得焦点
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 对话框对齐方式, 具体见Overlay文档
     */
    align: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
    /**
     * 当对话框高度超过浏览器视口高度时，是否显示所有内容而不是出现滚动条以保证对话框完整显示在浏览器视口内，该属性仅在对话框垂直水平居中时生效，即 align 被设置为 'cc cc' 时
     */
    isFullScreen: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式
     */
    shouldUpdatePosition: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效
     */
    minMargin: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 透传到弹层组件的属性对象
     */
    overlayProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义国际化文案对象
     * @property {String} ok 确认按钮文案
     * @property {String} cancel 取消按钮文案
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, dialog__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    visible: false,
    footerAlign: 'right',
    footerActions: ['ok', 'cancel'],
    onOk: dialog_noop,
    onCancel: dialog_noop,
    okProps: {},
    cancelProps: {},
    closeable: 'esc,close',
    onClose: dialog_noop,
    afterClose: dialog_noop,
    hasMask: true,
    animation: {
        in: 'fadeInDown',
        out: 'fadeOutUp'
    },
    autoFocus: false,
    align: 'cc cc',
    isFullScreen: false,
    shouldUpdatePosition: false,
    minMargin: 40,
    overlayProps: {},
    locale: zh_cn.Dialog
}, dialog__temp);
dialog_Dialog.displayName = 'Dialog';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/message/message.js






var message__class, message__temp2;








var TYPE_MAPS = {
    success: 'success',
    warning: 'warning',
    error: 'error',
    notice: 'prompt',
    help: 'help',
    loading: 'loading'
};

var message_noop = function noop() {};

/**
 * Message
 */
var message_Message = (message__temp2 = message__class = function (_Component) {
    inherits_default()(Message, _Component);

    function Message() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Message);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
            visible: typeof _this.props.visible === 'undefined' ? _this.props.defaultVisible : _this.props.visible
        }, _this.onClose = function () {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: false
                });
            }
            _this.props.onClose(false);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Message.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    Message.prototype.render = function render() {
        var _classNames;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            pure = _props.pure,
            className = _props.className,
            type = _props.type,
            shape = _props.shape,
            size = _props.size,
            title = _props.title,
            children = _props.children,
            defaultVisible = _props.defaultVisible,
            propsVisible = _props.visible,
            icon = _props.iconType,
            closeable = _props.closeable,
            onClose = _props.onClose,
            afterClose = _props.afterClose,
            animation = _props.animation,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'pure', 'className', 'type', 'shape', 'size', 'title', 'children', 'defaultVisible', 'visible', 'iconType', 'closeable', 'onClose', 'afterClose', 'animation', 'rtl']);
        /* eslint-enable */


        var visible = this.state.visible;

        var messagePrefix = prefix + 'message';
        var iconType = icon || TYPE_MAPS[type];
        var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[messagePrefix] = true, _classNames[prefix + 'message-' + type] = type, _classNames['' + prefix + shape] = shape, _classNames['' + prefix + size] = size, _classNames[prefix + 'title-content'] = !!title, _classNames[prefix + 'only-content'] = !title && !!children, _classNames[className] = className, _classNames));

        var newChildren = visible ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ role: 'alert' }, others, { className: classes, dir: rtl ? 'rtl' : undefined }),
            closeable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                { role: 'button', href: 'javascript:;', className: messagePrefix + '-close', onClick: this.onClose },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close' })
            ) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: messagePrefix + '-symbol', type: iconType }),
            title ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: messagePrefix + '-title' },
                title
            ) : null,
            children ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: messagePrefix + '-content' },
                children
            ) : null
        ) : null;

        if (animation) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_animate.Expand,
                { animationAppear: false, afterLeave: afterClose },
                newChildren
            );
        }

        return newChildren;
    };

    return Message;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), message__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 反馈类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['success', 'warning', 'error', 'notice', 'help', 'loading']),
    /**
     * 反馈外观
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'addon', 'toast']),
    /**
     * 反馈大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['medium', 'large']),
    /**
     * 标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 显示的图标类型，会覆盖内部设置的IconType
     */
    iconType: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 显示关闭按钮
     */
    closeable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 关闭按钮的回调
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 关闭之后调用的函数
     */
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否开启展开收起动画
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, message__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    type: 'success',
    shape: 'inline',
    size: 'medium',
    defaultVisible: true,
    closeable: false,
    onClose: message_noop,
    afterClose: message_noop,
    animation: true
}, message__temp2);
message_Message.displayName = 'Message';


/* harmony default export */ var message_message = (config_provider.config(message_Message));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/message/toast.js






var toast__class, toast__temp2;









var toast_config = config_provider.config;


var toast_instance = void 0;
var timeouts = {};

var toast_Mask = (toast__temp2 = toast__class = function (_React$Component) {
    inherits_default()(Mask, _React$Component);

    function Mask() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Mask);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            visible: true
        }, _this.handleClose = function () {
            var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            _this.setState({
                visible: false
            });

            if (!silent) {
                _this.props.onClose && _this.props.onClose();
            }
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Mask.prototype.componentWillUnmount = function componentWillUnmount() {
        var timeoutId = this.props.timeoutId;


        if (timeoutId in timeouts) {
            var timeout = timeouts[timeoutId];
            clearTimeout(timeout);
            delete timeouts[timeoutId];
        }
    };

    Mask.prototype.render = function render() {
        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            type = _props.type,
            title = _props.title,
            content = _props.content,
            align = _props.align,
            offset = _props.offset,
            hasMask = _props.hasMask,
            afterClose = _props.afterClose,
            animation = _props.animation,
            overlayProps = _props.overlayProps,
            timeoutId = _props.timeoutId,
            others = objectWithoutProperties_default()(_props, ['prefix', 'type', 'title', 'content', 'align', 'offset', 'hasMask', 'afterClose', 'animation', 'overlayProps', 'timeoutId']);
        /* eslint-enable */


        var visible = this.state.visible;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_overlay,
            extends_default()({}, overlayProps, { prefix: prefix, animation: animation, visible: visible, align: align, offset: offset, hasMask: hasMask, afterClose: afterClose }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                message_message,
                extends_default()({}, others, { prefix: prefix, visible: true, type: type, shape: 'toast', title: title, className: prefix + 'message-wrapper', onClose: this.handleClose }),
                content
            )
        );
    };

    return Mask;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), toast__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, toast__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    type: _prop_types_15_7_2_prop_types_default.a.string,
    title: _prop_types_15_7_2_prop_types_default.a.node,
    content: _prop_types_15_7_2_prop_types_default.a.node,
    align: _prop_types_15_7_2_prop_types_default.a.string,
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    hasMask: _prop_types_15_7_2_prop_types_default.a.bool,
    afterClose: _prop_types_15_7_2_prop_types_default.a.func,
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool]),
    overlayProps: _prop_types_15_7_2_prop_types_default.a.object,
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    timeoutId: _prop_types_15_7_2_prop_types_default.a.string
}, toast__class.defaultProps = {
    prefix: 'next-',
    align: 'tc tc',
    offset: [0, 30],
    hasMask: false,
    animation: {
        in: 'pulse',
        out: 'zoomOut'
    }
}, toast__temp2);
toast_Mask.displayName = 'Mask';


var NewMask = toast_config(toast_Mask);

var toast_create = function create(props) {
    /* eslint-disable no-unused-vars */
    var duration = props.duration,
        afterClose = props.afterClose,
        others = objectWithoutProperties_default()(props, ['duration', 'afterClose']);
    /* eslint-enable no-unused-vars */

    var div = document.createElement('div');
    document.body.appendChild(div);
    var closeChain = function closeChain() {
        external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.unmountComponentAtNode(div);
        document.body.removeChild(div);
        afterClose && afterClose();
    };

    var newContext = config_provider.getContext();

    var mask = void 0,
        myRef = void 0,
        destroyed = false;
    var destroy = function destroy() {
        var inc = mask && mask.getInstance();
        inc && inc.handleClose(true);
        destroyed = true;
    };

    external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.render(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        config_provider,
        newContext,
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(NewMask, extends_default()({ afterClose: closeChain }, others, { ref: function ref(_ref) {
                myRef = _ref;
            } }))
    ), div, function () {
        mask = myRef;
        if (mask && destroyed) {
            destroy();
        }
    });

    return {
        component: mask,
        destroy: destroy
    };
};

function handleConfig(config, type) {
    var newConfig = {};

    if (typeof config === 'string' || external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(config)) {
        newConfig.title = config;
    } else if (isObject(config)) {
        newConfig = extends_default()({}, config);
    }
    if (typeof newConfig.duration !== 'number') {
        newConfig.duration = 3000;
    }
    if (type) {
        newConfig.type = type;
    }

    return newConfig;
}

function isObject(obj) {
    return {}.toString.call(obj) === '[object Object]';
}

function toast_open(config, type) {
    toast_close();
    config = handleConfig(config, type);
    var timeoutId = util_guid();
    toast_instance = toast_create(extends_default()({}, config, { timeoutId: timeoutId }));

    if (config.duration > 0) {
        var timeout = setTimeout(toast_close, config.duration);
        timeouts[timeoutId] = timeout;
    }
}

function toast_close() {
    if (toast_instance) {
        toast_instance.destroy();
        toast_instance = null;
    }
}

/**
 * 创建提示弹层
 * @exportName show
 * @param {Object} props 属性对象
 */
function toast_show(config) {
    toast_open(config);
}

/**
 * 关闭提示弹层
 * @exportName hide
 */
function toast_hide() {
    toast_close();
}

/**
 * 创建成功提示弹层
 * @exportName success
 * @param {Object} props 属性对象
 */
function toast_success(config) {
    toast_open(config, 'success');
}

/**
 * 创建警告提示弹层
 * @exportName warning
 * @param {Object} props 属性对象
 */
function toast_warning(config) {
    toast_open(config, 'warning');
}

/**
 * 创建错误提示弹层
 * @exportName error
 * @param {Object} props 属性对象
 */
function error(config) {
    toast_open(config, 'error');
}

/**
 * 创建帮助提示弹层
 * @exportName help
 * @param {Object} props 属性对象
 */
function toast_help(config) {
    toast_open(config, 'help');
}

/**
 * 创建加载中提示弹层
 * @exportName loading
 * @param {Object} props 属性对象
 */
function toast_loading(config) {
    toast_open(config, 'loading');
}

/**
 * 创建通知提示弹层
 * @exportName notice
 * @param {Object} props 属性对象
 */
function notice(config) {
    toast_open(config, 'notice');
}

/* harmony default export */ var toast = ({
    show: toast_show,
    hide: toast_hide,
    success: toast_success,
    warning: toast_warning,
    error: error,
    help: toast_help,
    loading: toast_loading,
    notice: notice
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/message/index.js




message_message.show = toast.show;
message_message.success = toast.success;
message_message.warning = toast.warning;
message_message.error = toast.error;
message_message.notice = toast.notice;
message_message.help = toast.help;
message_message.loading = toast.loading;
message_message.hide = toast.hide;

/* harmony default export */ var es_message = (config_provider.config(message_message, {
    componentName: 'Message'
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/dialog/show.js






var show__class, show__temp2;










var show_Dialog = config_provider.config(dialog_Dialog);

var show_noop = function noop() {};
var MESSAGE_TYPE = {
    alert: 'warning',
    confirm: 'help'
};

var show_Modal = (show__temp2 = show__class = function (_Component) {
    inherits_default()(Modal, _Component);

    function Modal() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Modal);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
            visible: true,
            loading: false
        }, _this.close = function () {
            _this.setState({
                visible: false
            });
        }, _this.loading = function (loading) {
            _this.setState({
                loading: loading
            });
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Modal.prototype.wrapper = function wrapper(fn, callback) {
        var _this2 = this;

        return function () {
            var res = fn();
            if (res && res.then) {
                _this2.loading(true);

                res.then(function (result) {
                    _this2.loading(false);

                    if (result !== false) {
                        return callback();
                    }
                }).catch(function (e) {
                    _this2.loading(false);
                    throw e;
                });
            } else if (res !== false) {
                return callback();
            }
        };
    };

    Modal.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            type = _props.type,
            title = _props.title,
            content = _props.content,
            messageProps = _props.messageProps,
            footerActions = _props.footerActions,
            onOk = _props.onOk,
            onCancel = _props.onCancel,
            onClose = _props.onClose,
            okProps = _props.okProps,
            needWrapper = _props.needWrapper,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'type', 'title', 'content', 'messageProps', 'footerActions', 'onOk', 'onCancel', 'onClose', 'okProps', 'needWrapper', 'rtl']);

        var newTitle = needWrapper && type ? null : title;

        var newContent = needWrapper && type ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_message,
            extends_default()({
                size: 'large',
                shape: 'addon',
                type: MESSAGE_TYPE[type]
            }, messageProps, {
                title: title,
                rtl: rtl,
                className: _classnames_2_2_6_classnames_default()(prefix + 'dialog-message', messageProps.className) }),
            content
        ) : content;

        var newFooterActions = footerActions || (type === 'alert' ? ['ok'] : type === 'confirm' ? ['ok', 'cancel'] : undefined);
        var newOnOk = this.wrapper(onOk, this.close);
        var newOnCancel = this.wrapper(onCancel, this.close);
        var newOnClose = this.wrapper(onClose, this.close);

        var _state = this.state,
            visible = _state.visible,
            loading = _state.loading;

        okProps.loading = loading;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            show_Dialog,
            extends_default()({
                role: 'alertdialog'
            }, others, {
                visible: visible,
                title: newTitle,
                rtl: rtl,
                footerActions: newFooterActions,
                onOk: this.state.loading ? show_noop : newOnOk,
                onCancel: newOnCancel,
                onClose: newOnClose,
                okProps: okProps }),
            newContent
        );
    };

    return Modal;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), show__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    type: _prop_types_15_7_2_prop_types_default.a.string,
    title: _prop_types_15_7_2_prop_types_default.a.node,
    content: _prop_types_15_7_2_prop_types_default.a.node,
    messageProps: _prop_types_15_7_2_prop_types_default.a.object,
    footerActions: _prop_types_15_7_2_prop_types_default.a.array,
    onOk: _prop_types_15_7_2_prop_types_default.a.func,
    onCancel: _prop_types_15_7_2_prop_types_default.a.func,
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    okProps: _prop_types_15_7_2_prop_types_default.a.object,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    needWrapper: _prop_types_15_7_2_prop_types_default.a.bool
}, show__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    messageProps: {},
    onOk: show_noop,
    onCancel: show_noop,
    onClose: show_noop,
    okProps: {},
    locale: zh_cn.Dialog,
    needWrapper: true
}, show__temp2);
show_Modal.displayName = 'Modal';


var ConfigModal = config_provider.config(show_Modal, { componentName: 'Dialog' });

/**
 * 创建对话框
 * @exportName show
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
var show_show = function show() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var container = document.createElement('div');
    var unmount = function unmount() {
        if (config.afterClose) {
            config.afterClose();
        }
        external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.unmountComponentAtNode(container);
        container.parentNode.removeChild(container);
    };

    document.body.appendChild(container);
    var newContext = config_provider.getContext();

    var instance = void 0,
        myRef = void 0;

    external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.render(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        config_provider,
        newContext,
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(ConfigModal, extends_default()({}, config, { afterClose: unmount, ref: function ref(_ref) {
                myRef = _ref;
            } }))
    ), container, function () {
        instance = myRef;
    });
    return {
        hide: function hide() {
            var inc = instance && instance.getInstance();
            inc && inc.close();
        }
    };
};

var methodFactory = function methodFactory(type) {
    return function () {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        config.type = type;
        return show_show(config);
    };
};

/**
 * 创建警示对话框
 * @exportName alert
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
var show_alert = methodFactory('alert');

/**
 * 创建确认对话框
 * @exportName confirm
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
var show_confirm = methodFactory('confirm');
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/dialog/index.js








dialog_Dialog.Inner = inner_Inner;
dialog_Dialog.show = function (config) {
    var _ConfigProvider$getCo = config_provider.getContextProps(config, 'Dialog'),
        warning = _ConfigProvider$getCo.warning;

    if (warning !== false) {
        config = processProps(config, log.deprecated);
    }
    return show_show(config);
};
dialog_Dialog.alert = function (config) {
    var _ConfigProvider$getCo2 = config_provider.getContextProps(config, 'Dialog'),
        warning = _ConfigProvider$getCo2.warning;

    if (warning !== false) {
        config = processProps(config, log.deprecated);
    }
    return show_alert(config);
};
dialog_Dialog.confirm = function (config) {
    var _ConfigProvider$getCo3 = config_provider.getContextProps(config, 'Dialog'),
        warning = _ConfigProvider$getCo3.warning;

    if (warning !== false) {
        config = processProps(config, log.deprecated);
    }
    return show_confirm(config);
};

/* istanbul ignore next */
function processProps(props, deprecated) {
    if ('closable' in props) {
        deprecated('closable', 'closeable', 'Dialog');

        var _props = props,
            closable = _props.closable,
            others = objectWithoutProperties_default()(_props, ['closable']);

        props = extends_default()({ closeable: closable }, others);
    }

    var overlayPropNames = ['target', 'offset', 'beforeOpen', 'onOpen', 'afterOpen', 'beforePosition', 'onPosition', 'cache', 'safeNode', 'wrapperClassName', 'container'];
    overlayPropNames.forEach(function (name) {
        if (name in props) {
            var _extends2;

            deprecated(name, 'overlayProps.' + name, 'Dialog');

            var _props2 = props,
                overlayProps = _props2.overlayProps,
                _others = objectWithoutProperties_default()(_props2, ['overlayProps']);

            var newOverlayProps = extends_default()((_extends2 = {}, _extends2[name] = props[name], _extends2), overlayProps || {});
            delete _others[name];
            props = extends_default()({ overlayProps: newOverlayProps }, _others);
        }
    });

    return props;
}

/* harmony default export */ var dialog = (config_provider.config(dialog_Dialog, {
    transform: function transform(props, deprecated) {
        return processProps(props, deprecated);
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/dropdown/index.js





var dropdown__class, dropdown__temp;







var dropdown_noop = func.noop,
    dropdown_makeChain = func.makeChain,
    dropdown_bindCtx = func.bindCtx;

var dropdown_Popup = es_overlay.Popup;

/**
 * Dropdown
 * @description 继承 Popup 的 API，除非特别说明
 */
var dropdown_Dropdown = (dropdown__temp = dropdown__class = function (_Component) {
    inherits_default()(Dropdown, _Component);

    function Dropdown(props) {
        classCallCheck_default()(this, Dropdown);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            visible: 'visible' in props ? props.visible : props.defaultVisible || false,
            autoFocus: 'autoFocus' in props ? props.autoFocus : false
        };

        dropdown_bindCtx(_this, ['onTriggerKeyDown', 'onMenuClick', 'onVisibleChange']);
        return _this;
    }

    Dropdown.prototype.getVisible = function getVisible() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

        return 'visible' in props ? props.visible : this.state.visible;
    };

    Dropdown.prototype.onMenuClick = function onMenuClick() {
        this.onVisibleChange(false, 'fromContent');
    };

    Dropdown.prototype.onVisibleChange = function onVisibleChange(visible, from) {
        this.setState({ visible: visible });

        this.props.onVisibleChange(visible, from);
    };

    Dropdown.prototype.onTriggerKeyDown = function onTriggerKeyDown() {
        var autoFocus = true;

        if ('autoFocus' in this.props) {
            autoFocus = this.props.autoFocus;
        }

        this.setState({
            autoFocus: autoFocus
        });
    };

    Dropdown.prototype.render = function render() {
        var child = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].only(this.props.children);
        if (typeof child.type === 'function' && child.type.isNextMenu) {
            child = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                onItemClick: dropdown_makeChain(this.onMenuClick, child.props.onItemClick)
            });
        }

        var trigger = this.props.trigger;

        var newTrigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(trigger, {
            onKeyDown: dropdown_makeChain(this.onTriggerKeyDown, trigger.props.onKeyDown)
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            dropdown_Popup,
            extends_default()({}, this.props, {
                autoFocus: this.state.autoFocus,
                trigger: newTrigger,
                visible: this.getVisible(),
                onVisibleChange: this.onVisibleChange,
                canCloseByOutSideClick: true }),
            child
        );
    };

    return Dropdown;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), dropdown__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 弹层当前是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示或隐藏时触发的回调函数
     * @param {Boolean} visible 弹层是否显示
     * @param {String} type 触发弹层显示或隐藏的来源
     * @param {Object} e DOM事件
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 触发弹层显示或者隐藏的元素
     */
    trigger: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 触发弹层显示或隐藏的操作类型
     */
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['hover', 'click', 'focus']),
    /**
     * 设置此属性，弹层无法显示或隐藏
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层相对于触发元素的定位, 详见 Overlay 的定位部分
     */
    align: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层相对于触发元素定位的微调
     */
    offset: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效
     */
    delay: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 弹层打开时是否让其中的元素自动获取焦点
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示遮罩
     */
    hasMask: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 隐藏时是否保留子节点
     */
    cache: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画
     * @default { in: 'expandInDown', out: 'expandOutUp' }
     */
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.bool])
}, dropdown__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    defaultVisible: false,
    onVisibleChange: dropdown_noop,
    triggerType: 'hover',
    disabled: false,
    align: 'tl bl',
    offset: [0, 0],
    delay: 200,
    hasMask: false,
    cache: false,
    onPosition: dropdown_noop
}, dropdown__temp);
dropdown_Dropdown.displayName = 'Dropdown';


/* harmony default export */ var dropdown = (config_provider.config(dropdown_Dropdown));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/util.js
var formatRegExp = /%[sdj%]/g;

function util_format() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var i = 1;
    var f = args[0];
    var len = args.length;
    if (typeof f === 'function') {
        return f(args.slice(1));
    }
    if (typeof f === 'string') {
        var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') {
                return '%';
            }
            if (i >= len) {
                return x;
            }
            switch (x) {
                case '%s':
                    return String(args[i++]);
                case '%d':
                    return Number(args[i++]);
                case '%j':
                    try {
                        return JSON.stringify(args[i++]);
                    } catch (_) {
                        return '[Circular]';
                    }
                default:
                    return x;
            }
        });

        return str;
    }
    return f;
}

function asyncSerialArray(arr, func, callback) {
    var index = 0;
    var arrLength = arr.length;

    function next(errors) {
        if (errors && errors.length) {
            callback(errors);
            return;
        }
        var original = index;
        index = index + 1;
        if (original < arrLength) {
            func(arr[original], next);
        } else {
            return callback([]);
        }
    }

    next([]);
}

/**
 * 平铺规则
 * @param  {object} objArr [description]
 * @return {Array}        [description]
 */
function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function (k) {
        Object.keys(objArr[k]).forEach(function (r) {
            ret.push(objArr[k][r]);
        });
    });
    return ret;
}

/**
 * 异步调用
 * @param  {map}   objArr   校验规则对象列表
 * @param  {object}   option   配置项
 * @param  {Function} func     每个校验规则
 * @param  {Function} callback 全部完成后的执行
 */
function asyncMap(objArr, option, func, callback) {
    // 发现第一个错误即返回
    if (option.first) {
        var flattenArr = flattenObjArr(objArr);
        return asyncSerialArray(flattenArr, func, callback);
    }

    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var next = function next(errors) {
        results.push(errors);
        total++;
        if (total === objArrLength) {
            return callback(results);
        }
    };
    objArrKeys.forEach(function (key) {
        var arr = objArr[key];
        asyncSerialArray(arr, func, next);
    });
}

function complementError(rule) {
    return function (oe) {
        if (oe && oe.message) {
            oe.field = rule.field;
            return oe;
        }
        return {
            message: oe,
            field: rule.field
        };
    };
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/required.js


/**
 *  Rule for validating required fields.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function required_required(rule, value, errors, options) {
    if (value === undefined || value === null || value === '' || value.length === 0) {
        errors.push(util_format(options.messages.required, rule.field));
    }
}

/* harmony default export */ var rules_required = (required_required);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/format.js


var pattern = {
    email: /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/,
    url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$', 'i'),
    number: /\d*/,
    tel: /^(1\d{10})$|(((400)-(\d{3})-(\d{4}))|^((\d{7,8})|(\d{3,4})-(\d{7,8})|(\d{7,8})-(\d{1,4}))$)$|^([ ]?)$/
};

var format_types = {
    number: function number(value) {
        if (isNaN(value)) {
            return false;
        }
        return typeof value === 'number' || typeof value === 'string' && !!value.match(pattern.number);
    },
    email: function email(value) {
        return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
    },
    url: function url(value) {
        return typeof value === 'string' && !!value.match(pattern.url);
    },
    tel: function tel(value) {
        return typeof value === 'string' && !!value.match(pattern.tel);
    }
};

/**
 *  Rule for validating the type of a value.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function format_format(rule, value, errors, options) {
    var custom = ['email', 'number', 'url', 'tel'];
    var ruleType = rule.format;
    if (custom.indexOf(ruleType) > -1 && !format_types[ruleType](value)) {
        errors.push(util_format(options.messages.format[ruleType], rule.field, rule.format));
    }
}

/* harmony default export */ var rules_format = (format_format);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/size.js


/**
 *  Rule for validating minimum and maximum allowed values.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function size_size(rule, value, errors, options) {

    var key = null;
    var isNum = typeof value === 'number';
    var isStr = typeof value === 'string';

    if (isNum) {
        key = 'number';
    } else if (isStr) {
        key = 'string';
    }

    if (!key) {
        return false;
    }

    var val = value;
    var max = Number(rule.max);
    var min = Number(rule.min);

    if (min || max) {
        if (isStr) {
            val = Number(val);
        }
        if (val < min) {
            errors.push(util_format(options.messages[key].min, rule.field, rule.min));
        } else if (val > max) {
            errors.push(util_format(options.messages[key].max, rule.field, rule.max));
        }
    }
}

/* harmony default export */ var rules_size = (size_size);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/length.js


/**
 *  Rule for validating minimum and maximum allowed values.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function length_length(rule, value, errors, options) {

    var key = null;
    var isNum = typeof value === 'number';
    var isStr = typeof value === 'string';
    var isArr = Array.isArray(value);

    if (isNum) {
        key = 'number';
    } else if (isStr) {
        key = 'string';
    } else if (isArr) {
        key = 'array';
    }

    if (!key) {
        return false;
    }

    var val = value;
    var length = Number(rule.length);
    var maxLength = Number(rule.maxLength);
    var minLength = Number(rule.minLength);

    if (minLength || maxLength || length) {
        if (isNum) {
            val = '' + val;
        }
        val = val.length;
        if (length && val !== rule.length) {
            errors.push(util_format(options.messages[key].length, rule.field, rule.length));
        } else if (val < minLength) {
            errors.push(util_format(options.messages[key].minLength, rule.field, rule.minLength));
        } else if (val > maxLength) {
            errors.push(util_format(options.messages[key].maxLength, rule.field, rule.maxLength));
        }
    }
}

/* harmony default export */ var rules_length = (length_length);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/pattern.js


/**
 *  Rule for validating a regular expression pattern.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function pattern_pattern(rule, value, errors, options) {
    if (rule.pattern) {
        if (rule.pattern instanceof RegExp) {
            if (!rule.pattern.test(value)) {
                errors.push(util_format(options.messages.pattern, rule.field, value, rule.pattern));
            }
        } else if (typeof rule.pattern === 'string') {
            var _pattern = new RegExp(rule.pattern);
            if (!_pattern.test(value)) {
                errors.push(util_format(options.messages.pattern, rule.field, value, rule.pattern));
            }
        }
    }
}

/* harmony default export */ var rules_pattern = (pattern_pattern);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/rules/index.js






/* harmony default export */ var validate_rules = ({
    required: rules_required,
    format: rules_format,
    min: rules_size,
    max: rules_size,
    minLength: rules_length,
    maxLength: rules_length,
    length: rules_length,
    pattern: rules_pattern
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/validator.js
/* eslint-disable callback-return */


/**
 * {required, format} => format; {required} => required
 * @param  {function} validator [description]
 * @param  {string} ruleType  [description]
 * @return {function}           [description]
 */
function validateFunc(validator, ruleType) {
    return function (rule, value, cb, options) {
        var errors = [];

        // 如果是非required校验
        if (ruleType !== 'required') {
            var _errors = [];
            validate_rules.required(rule, value, _errors, options);
            if (_errors.length > 0) {
                if ('required' in rule) {
                    cb(_errors);
                } else {
                    cb([]); //忽略空数据的判断
                }
                return;
            }
        }

        validator(rule, value, errors, options);
        cb(errors);
    };
}

/**
 * {required, format} => format; {required} => required
 * @param  {object} rule [description]
 * @return {function}      [description]
 */
function getValidationMethod(rule) {
    if (typeof rule.validator === 'function') {
        return rule.validator;
    }

    var keys = Object.keys(rule);

    //required和其他校验规则共存
    //{required, format} {required, unknown}
    for (var i = 0; i < keys.length; i++) {
        var ruleType = keys[i];

        if (ruleType === 'required') {
            continue;
        }
        if (ruleType in validate_rules) {
            return validateFunc(validate_rules[ruleType], ruleType);
        }
    }

    // 有其他位置参数
    if ('required' in rule) {
        return validateFunc(validate_rules.required, 'required');
    }

    return null;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/messages.js
/* harmony default export */ var validate_messages = ({
    default: '%s 校验失败',
    required: '%s 是必填字段',
    format: {
        number: '%s 不是合法的数字',
        email: '%s 不是合法的 email 地址',
        url: '%s 不是合法的 URL 地址',
        tel: '%s 不是合法的电话号码'
    },
    number: {
        length: '%s 长度必须是 %s',
        min: '%s 字段数值不得小于 %s',
        max: '%s 字段数值不得大于 %s',
        minLength: '%s 字段字符长度不得少于 %s',
        maxLength: '%s 字段字符长度不得超过 %s'
    },
    string: {
        length: '%s 长度必须是 %s',
        min: '%s 字段数值不得小于 %s',
        max: '%s 字段数值不得大于 %s',
        minLength: '%s 字段字符长度不得少于 %s',
        maxLength: '%s 字段字符长度不得超过 %s'
    },
    array: {
        length: '%s 个数必须是 %s',
        minLength: '%s 个数不得少于 %s',
        maxLength: '%s 个数不得超过 %s'
    },
    pattern: '%s 字段数值 %s 不匹配正则 %s'
});
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/validate/index.js


/* eslint-disable callback-return */




function validate_noop() {}

var validate_Schema = function () {
    function Schema(rules) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        classCallCheck_default()(this, Schema);

        this._rules = rules;
        this._options = extends_default()({}, options, {
            messages: extends_default()({}, validate_messages, options.messages)
        });
        this.complete = [];
    }

    Schema.prototype.abort = function abort() {
        for (var i = 0; i < this.complete.length; i++) {
            this.complete[i] = validate_noop;
        }
    };

    Schema.prototype.messages = function messages(_messages) {
        this._options.messages = extends_default()({}, this._options.messages, _messages);
    };

    Schema.prototype.validate = function validate(source, callback) {
        var _this = this;

        if (!this._rules || Object.keys(this._rules).length === 0) {
            if (callback) {
                callback(null);
            }
            return;
        }

        // serialize rules
        var arr = void 0;
        var value = void 0;
        var series = {};
        var names = Object.keys(this._rules);
        names.forEach(function (name) {
            arr = _this._rules[name];
            value = source[name];

            if (!Array.isArray(arr)) {
                arr = [arr];
            }

            arr.forEach(function (rule) {
                rule.validator = getValidationMethod(rule);
                rule.field = name;
                if (!rule.validator) {
                    return;
                }
                series[name] = series[name] || [];
                series[name].push({ rule: rule, value: value, source: source, field: name });
            });
        });

        if (Object.keys(series).length === 0) {
            callback(null);
        }

        // callback function for all rules return
        function complete(results) {
            var i = void 0;
            var field = void 0;
            var errors = [];
            var fields = {};

            function add(e) {
                if (Array.isArray(e)) {
                    errors = errors.concat(e);
                } else {
                    errors.push(e);
                }
            }

            for (i = 0; i < results.length; i++) {
                add(results[i]);
            }
            if (!errors.length) {
                errors = null;
                fields = null;
            } else {
                for (i = 0; i < errors.length; i++) {
                    field = errors[i].field;
                    fields[field] = fields[field] || [];
                    fields[field].push(errors[i]);
                }
            }
            callback(errors, fields);
        }

        this.complete.push(complete);
        var idx = this.complete.length;

        // async validate
        asyncMap(series, this._options, function (data, doIt) {
            var rule = data.rule;
            rule.field = data.field;

            function cb() {
                var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

                var errors = e;
                if (!Array.isArray(errors)) {
                    errors = [errors];
                }

                // 自定义错误
                if (errors.length && rule.message) {
                    errors = [].concat(rule.message);
                }

                errors = errors.map(complementError(rule));

                doIt(errors);
            }

            var res = rule.validator(rule, data.value, cb, _this._options);
            if (res && res.then) {
                res.then(function () {
                    return cb();
                }, function (e) {
                    return cb(e);
                });
            }
        }, function (results) {
            _this.complete[idx - 1](results);
        });
    };

    return Schema;
}();

/* harmony default export */ var es_validate = (validate_Schema);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/field/utils.js



/**
 * 从组件事件中获取数据
 * @param e Event或者value
 * @returns value
 */
function utils_getValueFromEvent(e) {
    // support custom element
    if (!e || !e.target) {
        return e;
    }
    var target = e.target;


    if (target.type === 'checkbox') {
        return target.checked;
    } else if (target.type === 'radio') {
        //兼容原生radioGroup
        if (target.value) {
            return target.value;
        } else {
            return target.checked;
        }
    }
    return target.value;
}

function getErrorStrs(errors) {
    if (errors) {
        return errors.map(function (e) {
            if ('message' in e) {
                var message = e.message;
                // add key for jsx to ignore key warning
                if (message && Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["isValidElement"])(message) && !message.props.key) {
                    return Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(message, { key: 'error' });
                }
                return message;
            }
            return e;
        });
    }
    return errors;
}

function getParams(ns, cb) {
    var names = typeof ns === 'string' ? [ns] : ns;
    var callback = cb;
    if (cb === undefined && typeof names === 'function') {
        callback = names;
        names = undefined;
    }
    return {
        names: names,
        callback: callback
    };
}

var utils_setInWithPath = function setInWithPath(state, value, path, pathIndex) {
    var _extends2;

    if (pathIndex >= path.length) {
        return value;
    }

    var first = path[pathIndex];
    var next = setInWithPath(state && state[first], value, path, pathIndex + 1);

    if (!state) {
        var initialized = isNaN(first) ? {} : [];
        initialized[first] = next;
        return initialized;
    }

    if (Array.isArray(state)) {
        var copy = [].concat(state);
        copy[first] = next;
        return copy;
    }

    return extends_default()({}, state, (_extends2 = {}, _extends2[first] = next, _extends2));
};

function setIn(state, name, value) {
    return utils_setInWithPath(state, value, name.replace(/\[/, '.').replace(/\]/, '').split('.'), 0);
}

function getIn(state, name) {
    if (!state) {
        return state;
    }

    var path = name.replace(/\[/, '.').replace(/\]/, '').split('.');
    var length = path.length;
    if (!length) {
        return undefined;
    }

    var result = state;
    for (var i = 0; i < length && !!result; ++i) {
        result = result[path[i]];
    }

    return result;
}

function validateMap(rulesMap, rule, defaultTrigger) {
    var nrule = extends_default()({}, rule);

    if (!nrule.trigger) {
        nrule.trigger = [defaultTrigger];
    }

    if (typeof nrule.trigger === 'string') {
        nrule.trigger = [nrule.trigger];
    }

    for (var i = 0; i < nrule.trigger.length; i++) {
        var trigger = nrule.trigger[i];

        if (trigger in rulesMap) {
            rulesMap[trigger].push(nrule);
        } else {
            rulesMap[trigger] = [nrule];
        }
    }

    delete nrule.trigger;
}

/**
 * 提取rule里面的trigger并且做映射
 * @param  {Array} rules   规则
 * @param  {String} defaultTrigger 默认触发
 * @return {Object} {onChange:rule1, onBlur: rule2}
 */
function mapValidateRules(rules, defaultTrigger) {
    var rulesMap = {};

    rules.forEach(function (rule) {
        validateMap(rulesMap, rule, defaultTrigger);
    });

    return rulesMap;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/field/index.js








var initMeta = {
    state: '',
    valueName: 'value',
    trigger: 'onChange'
};

var field_Field = function () {
    function Field(com) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        classCallCheck_default()(this, Field);

        if (!com) {
            log.warning('`this` is missing in `Field`, you should use like `new Field(this)`');
        }

        this.com = com;
        this.fieldsMeta = {};
        this.cachedBind = {};
        this.instance = {};

        this.options = extends_default()({
            parseName: false,
            forceUpdate: false,
            scrollToFirstError: true,
            first: false,
            onChange: func.noop,
            autoUnmount: true
        }, options);

        ['init', 'getValue', 'getValues', 'setValue', 'setValues', 'getError', 'setError', 'setErrors', 'validate', 'getState', 'reset', 'resetToDefault', 'remove'].forEach(function (m) {
            _this[m] = _this[m].bind(_this);
        });

        if (options.values) {
            this.setValues(options.values, false);
        }
    }

    Field.prototype.setOptions = function setOptions(options) {
        extends_default()(this.options, options);
    };

    /**
     * Control Component
     * @param {String} name
     * @param {Object} fieldOption
     * @returns {Object} {value, onChange}
     */


    Field.prototype.init = function init(name) {
        var _inputProps,
            _this2 = this;

        var fieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var rprops = arguments[2];
        var initValue = fieldOption.initValue,
            _fieldOption$valueNam = fieldOption.valueName,
            valueName = _fieldOption$valueNam === undefined ? 'value' : _fieldOption$valueNam,
            _fieldOption$trigger = fieldOption.trigger,
            trigger = _fieldOption$trigger === undefined ? 'onChange' : _fieldOption$trigger,
            _fieldOption$rules = fieldOption.rules,
            rules = _fieldOption$rules === undefined ? [] : _fieldOption$rules,
            _fieldOption$props = fieldOption.props,
            props = _fieldOption$props === undefined ? {} : _fieldOption$props,
            _fieldOption$getValue = fieldOption.getValueFromEvent,
            getValueFromEvent = _fieldOption$getValue === undefined ? null : _fieldOption$getValue;

        var originalProps = extends_default()({}, props, rprops);
        var defaultValueName = 'default' + valueName[0].toUpperCase() + valueName.slice(1);

        var field = this._getInitMeta(name);
        var defaultValue = typeof initValue !== 'undefined' ? initValue : originalProps[defaultValueName];

        extends_default()(field, {
            valueName: valueName,
            initValue: defaultValue,
            disabled: 'disabled' in originalProps ? originalProps.disabled : false,
            getValueFromEvent: getValueFromEvent,
            rules: Array.isArray(rules) ? rules : [rules],
            ref: originalProps.ref
        });

        // Control Component
        if (valueName in originalProps) {
            field.value = originalProps[valueName];
        }

        if (!('value' in field)) {
            field.value = defaultValue;
        }

        // Component props
        var inputProps = (_inputProps = {
            'data-meta': 'Field',
            id: name,
            ref: this._getCacheBind(name, name + '__ref', this._saveRef)
        }, _inputProps[valueName] = field.value, _inputProps);

        // trigger map
        var rulesMap = mapValidateRules(field.rules, trigger);

        // validate hook

        var _loop = function _loop(action) {
            if (action === trigger) {
                return 'continue';
            }

            var actionRule = rulesMap[action];
            inputProps[action] = function () {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                _this2._validate(name, actionRule, action);
                _this2._callPropsEvent.apply(_this2, [action, originalProps].concat(args));
                _this2._reRender();
            };
        };

        for (var action in rulesMap) {
            var _ret = _loop(action);

            if (_ret === 'continue') continue;
        }

        // onChange hack
        inputProps[trigger] = function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            _this2._callOnChange.apply(_this2, [name, rulesMap[trigger], trigger].concat(args));
            _this2._callPropsEvent.apply(_this2, [trigger, originalProps].concat(args));
            _this2.options.onChange(name, field.value);
            _this2._reRender();
        };

        delete originalProps[defaultValueName];

        return extends_default()({}, originalProps, inputProps);
    };

    /**
     * event on props
     * props.onChange props.onBlur
     */


    Field.prototype._callPropsEvent = function _callPropsEvent(action, props) {
        for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            args[_key3 - 2] = arguments[_key3];
        }

        action in props && typeof props[action] === 'function' && props[action].apply(props, args);
    };

    Field.prototype._getInitMeta = function _getInitMeta(name) {
        if (!(name in this.fieldsMeta)) {
            this.fieldsMeta[name] = extends_default()({}, initMeta);
        }

        return this.fieldsMeta[name];
    };

    Field.prototype._callOnChange = function _callOnChange(name, rule, trigger) {
        for (var _len4 = arguments.length, others = Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
            others[_key4 - 3] = arguments[_key4];
        }

        var e = others[0];
        var field = this._get(name);

        if (!field) {
            return;
        }

        field.value = field.getValueFromEvent ? field.getValueFromEvent.apply(this, others) : utils_getValueFromEvent(e);

        this._resetError(name);
        rule && this._validate(name, rule, trigger);
    };

    /**
     * ref must always be the same function, or if not it will be triggerd every time.
     * @param {String} name name of component
     * @param {String} action key to find ref
     * @param {Function} fn saveRef
     */


    Field.prototype._getCacheBind = function _getCacheBind(name, action, fn) {
        var cache = this.cachedBind[name] = this.cachedBind[name] || {};
        if (!cache[action]) {
            cache[action] = fn.bind(this, name);
        }
        return cache[action];
    };

    Field.prototype._setCache = function _setCache(name, action, hander) {
        var cache = this.cachedBind[name] = this.cachedBind[name] || {};
        cache[action] = hander;
    };

    Field.prototype._getCache = function _getCache(name, action) {
        var cache = this.cachedBind[name] || {};
        return cache[action];
    };

    /**
     * saveRef is async function. it will be called after render
     * @param {String} name name of component
     * @param {Function} component ref
     */


    Field.prototype._saveRef = function _saveRef(name, component) {
        var key = name + '_field';
        var autoUnmount = this.options.autoUnmount;
        if (!component && autoUnmount) {
            // component with same name(eg: type? <A name="n"/>:<B name="n"/>)
            // while type change to true B will render before A unmount.
            var cache = this.fieldsMeta[name];
            this._setCache(name, key, cache);
            // after destroy, delete data
            delete this.fieldsMeta[name];
            delete this.instance[name];
            return;
        }

        // after _saveRef(name, null) and before rerender. (eg: same name but different compoent may be here)
        if (autoUnmount && !this.fieldsMeta[name]) {
            this.fieldsMeta[name] = this._getCache(name, key);
        }

        // only one time here
        var field = this._get(name);
        if (field) {
            var ref = field.ref;
            if (ref) {
                if (typeof ref === 'string') {
                    throw new Error('can not set string ref for ' + name);
                }
                ref(component);
            }

            this.instance[name] = component;
        }
    };

    /**
     * validate one Component
     * @param {String} name name of Component
     * @param {Array} rule
     * @param {String} trigger onChange/onBlur/onItemClick/...
     */


    Field.prototype._validate = function _validate(name, rule, trigger) {
        var _ref,
            _validate$validate,
            _this3 = this;

        var field = this._get(name);
        var value = field.value;

        field.state = 'loading';

        var validate = this._getCache(name, trigger);
        validate && validate.abort();

        validate = new es_validate((_ref = {}, _ref[name] = rule, _ref));
        this._setCache(name, trigger, validate);

        validate.validate((_validate$validate = {}, _validate$validate[name] = value, _validate$validate), function (errors) {

            if (errors && errors.length) {
                field.errors = getErrorStrs(errors);
                field.state = 'error';
            } else {
                field.errors = [];
                field.state = 'success';
            }

            _this3._reRender();
        });
    };

    Field.prototype.getValue = function getValue(name) {
        var field = this._get(name);

        if (field && 'value' in field) {
            return field.value;
        }

        return undefined;
    };

    /**
     * 1. get values by names.
     * 2. ignore disabled value.
     * @param {Array} names
     */


    Field.prototype.getValues = function getValues(names) {
        var _this4 = this;

        var fields = names || this.getNames();
        var allValues = {};

        fields.forEach(function (f) {
            if (f.disabled) {
                return;
            }
            if (!_this4.options.parseName) {
                allValues[f] = _this4.getValue(f);
            } else {
                allValues = setIn(allValues, f, _this4.getValue(f));
            }
        });
        return allValues;
    };

    Field.prototype.setValue = function setValue(name, value) {
        var reRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        if (name in this.fieldsMeta) {
            this.fieldsMeta[name].value = value;
        } else {
            // if not exist, then new one
            this.fieldsMeta[name] = {
                value: value
            };
        }
        reRender && this._reRender();
    };

    Field.prototype.setValues = function setValues() {
        var _this5 = this;

        var fieldsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var reRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (!this.options.parseName) {
            Object.keys(fieldsValue).forEach(function (name) {
                _this5.setValue(name, fieldsValue[name], false);
            });
        } else {
            var fields = this.getNames();
            fields.forEach(function (name) {
                var value = getIn(fieldsValue, name);
                if (value !== undefined) {
                    _this5.setValue(name, value, false);
                }
            });
        }
        reRender && this._reRender();
    };

    Field.prototype.setError = function setError(name, errors) {
        var err = Array.isArray(errors) ? errors : errors ? [errors] : [];
        if (name in this.fieldsMeta) {
            this.fieldsMeta[name].errors = err;
        } else {
            this.fieldsMeta[name] = {
                errors: err
            };
        }

        if (this.fieldsMeta[name].errors && this.fieldsMeta[name].errors.length > 0) {
            this.fieldsMeta[name].state = 'error';
        } else {
            this.fieldsMeta[name].state = '';
        }

        this._reRender();
    };

    Field.prototype.setErrors = function setErrors() {
        var _this6 = this;

        var fieldsErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        Object.keys(fieldsErrors).forEach(function (name) {
            _this6.setError(name, fieldsErrors[name]);
        });
    };

    Field.prototype.getError = function getError(name) {
        var field = this._get(name);
        if (field && field.errors && field.errors.length) {
            return field.errors;
        }

        return null;
    };

    Field.prototype.getErrors = function getErrors(names) {
        var _this7 = this;

        var fields = names || this.getNames();
        var allErrors = {};
        fields.forEach(function (f) {
            allErrors[f] = _this7.getError(f);
        });
        return allErrors;
    };

    Field.prototype.getState = function getState(name) {
        var field = this._get(name);

        if (field && field.state) {
            return field.state;
        }

        return '';
    };

    /**
     * validate by trigger
     * @param {Array} ns names
     * @param {Function} cb callback after validate
     */


    Field.prototype.validate = function validate(ns, cb) {
        var _this8 = this;

        var _getParams = getParams(ns, cb),
            names = _getParams.names,
            callback = _getParams.callback;

        var fieldNames = names || this.getNames();

        var descriptor = {};
        var values = {};

        var hasRule = false;
        for (var i = 0; i < fieldNames.length; i++) {
            var name = fieldNames[i];
            var field = this._get(name);

            if (!field) {
                continue;
            }

            if (field.rules && field.rules.length) {
                descriptor[name] = field.rules;
                values[name] = this.getValue(name);
                hasRule = true;

                // clear error
                field.errors = [];
                field.state = '';
            }
        }

        if (!hasRule) {
            callback && callback(null, this.getValues(fieldNames));
            return;
        }

        var validate = new es_validate(descriptor, { first: this.options.first });

        validate.validate(values, function (errors) {
            var errorsGroup = null;
            if (errors && errors.length) {
                errorsGroup = {};
                errors.forEach(function (e) {
                    var fieldName = e.field;
                    if (!errorsGroup[fieldName]) {
                        errorsGroup[fieldName] = {
                            errors: []
                        };
                    }
                    var fieldErrors = errorsGroup[fieldName].errors;
                    fieldErrors.push(e.message);
                });
            }
            if (errorsGroup) {
                // update error in every Field
                Object.keys(errorsGroup).forEach(function (i) {
                    var field = _this8._get(i);
                    field.errors = errorsGroup[i].errors;
                    field.state = 'error';
                });
            }

            // update to success which has no error
            for (var _i = 0; _i < fieldNames.length; _i++) {
                var _name = fieldNames[_i];
                var _field = _this8._get(_name);
                if (_field.rules && !(errorsGroup && _name in errorsGroup)) {
                    _field.state = 'success';
                }
            }

            // eslint-disable-next-line callback-return
            callback && callback(errorsGroup, _this8.getValues(fieldNames));
            _this8._reRender();

            if (errorsGroup && _this8.options.scrollToFirstError) {
                var firstNode = void 0;
                var firstTop = void 0;
                for (var _i2 in errorsGroup) {
                    if (errorsGroup.hasOwnProperty(_i2)) {
                        var instance = _this8.instance[_i2];
                        var node = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(instance);
                        if (!node) {
                            return;
                        }
                        var top = node.offsetTop;
                        if (firstTop === undefined || firstTop > top) {
                            firstTop = top;
                            firstNode = node;
                        }
                    }
                }

                if (firstNode) {
                    if (typeof _this8.options.scrollToFirstError === 'number' && window && typeof window.scrollTo === 'function') {
                        var offsetLeft = document && document.body && document.body.offsetLeft ? document.body.offsetLeft : 0;
                        window.scrollTo(offsetLeft, firstTop + _this8.options.scrollToFirstError);
                    } else if (firstNode.scrollIntoViewIfNeeded) {
                        firstNode.scrollIntoViewIfNeeded(true);
                    }
                }
            }
        });
    };

    Field.prototype._reset = function _reset(ns, backToDefault) {
        var _this9 = this;

        if (typeof ns === 'string') {
            ns = [ns];
        }
        var changed = false;

        var names = ns || Object.keys(this.fieldsMeta);
        names.forEach(function (name) {
            var field = _this9._get(name);
            _this9.getValue(name);
            if (field) {
                changed = true;

                field.value = backToDefault ? field.initValue : undefined;
                field.state = '';

                delete field.errors;
                delete field.rules;
                delete field.rulesMap;
            }
        });

        if (changed) {
            this._reRender();
        }
    };

    Field.prototype.reset = function reset(ns) {
        var backToDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (ns === true) {
            log.deprecated('reset(true)', 'resetToDefault()', 'Field');
            this.resetToDefault();
        } else if (backToDefault === true) {
            log.deprecated('reset(ns,true)', 'resetToDefault(ns)', 'Field');
            this.resetToDefault(ns);
        } else {
            this._reset(ns, false);
        }
    };

    Field.prototype.resetToDefault = function resetToDefault(ns) {
        this._reset(ns, true);
    };

    // deprecated. TODO: remove in 2.0 version


    Field.prototype.isValidating = function isValidating(name) {
        log.deprecated('isValidating', 'getState', 'Field');
        return this.getState(name) === 'loading';
    };

    Field.prototype.getNames = function getNames() {
        var fieldsMeta = this.fieldsMeta;
        return fieldsMeta ? Object.keys(fieldsMeta).filter(function () {
            return true;
        }) : [];
    };

    Field.prototype.remove = function remove(ns) {
        var _this10 = this;

        if (typeof ns === 'string') {
            ns = [ns];
        }
        var names = ns || Object.keys(this.fieldsMeta);
        names.forEach(function (name) {
            if (name in _this10.fieldsMeta) {
                delete _this10.fieldsMeta[name];
            }
        });
    };

    Field.prototype._resetError = function _resetError(name) {
        var field = this._get(name);
        delete field.errors; //清空错误
        field.state = '';
    };

    //trigger rerender


    Field.prototype._reRender = function _reRender() {
        if (this.com) {
            if (!this.options.forceUpdate && this.com.setState) {
                this.com.setState({});
            } else if (this.com.forceUpdate) {
                this.com.forceUpdate(); //forceUpdate 对性能有较大的影响，成指数上升
            }
        }
    };

    Field.prototype._get = function _get(name) {
        return name in this.fieldsMeta ? this.fieldsMeta[name] : null;
    };

    return Field;
}();

/* harmony default export */ var es_field = (field_Field);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/form.js





var form__class, form__temp;







function pickerDefined(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (i) {
        if (typeof obj[i] !== 'undefined') {
            newObj[i] = obj[i];
        }
    });
    return newObj;
}

function form_preventDefault(e) {
    e.preventDefault();
}

/** Form */
var form_Form = (form__temp = form__class = function (_React$Component) {
    inherits_default()(Form, _React$Component);

    function Form(props) {
        classCallCheck_default()(this, Form);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        _this.onChange = function (name, value) {
            _this.props.onChange(_this._formField.getValues(), { name: name, value: value, field: _this._formField });
        };

        var options = extends_default()({}, props.fieldOptions, {
            onChange: _this.onChange
        });

        if (props.field) {
            _this._formField = props.field;
            var onChange = _this._formField.options.onChange;
            options.onChange = func.makeChain(onChange, _this.onChange);
            _this._formField.setOptions && _this._formField.setOptions(options);
        } else {
            if ('value' in props) {
                options.values = props.value;
            }
            _this._formField = new es_field(_this, options);
        }

        props.saveField(_this._formField);
        return _this;
    }

    Form.prototype.getChildContext = function getChildContext() {
        return {
            _formField: this.props.field ? this.props.field : this._formField,
            _formSize: this.props.size
        };
    };

    Form.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this._formField.setValues(nextProps.value);
        }
        if ('error' in nextProps) {
            this._formField.setErrors(nextProps.error);
        }
    };

    Form.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            className = _props.className,
            inline = _props.inline,
            size = _props.size,
            labelAlign = _props.labelAlign,
            labelTextAlign = _props.labelTextAlign,
            onSubmit = _props.onSubmit,
            children = _props.children,
            labelCol = _props.labelCol,
            wrapperCol = _props.wrapperCol,
            style = _props.style,
            prefix = _props.prefix,
            Tag = _props.component;


        var formClassName = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'form'] = true, _classNames[prefix + 'inline'] = inline, _classNames['' + prefix + size] = size, _classNames[className] = !!className, _classNames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({ role: 'grid' }, util_obj.pickOthers(Form.propTypes, this.props), {
                className: formClassName,
                style: style,
                onSubmit: onSubmit }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.map(children, function (child) {
                if (child && typeof child.type === 'function' && child.type._typeMark === 'form_item') {
                    var childrenProps = {
                        labelCol: child.props.labelCol ? child.props.labelCol : labelCol,
                        wrapperCol: child.props.wrapperCol ? child.props.wrapperCol : wrapperCol,
                        labelAlign: child.props.labelAlign ? child.props.labelAlign : labelAlign,
                        labelTextAlign: child.props.labelTextAlign ? child.props.labelTextAlign : labelTextAlign,
                        size: child.props.size ? child.props.size : size
                    };
                    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, pickerDefined(childrenProps));
                }
                return child;
            })
        );
    };

    return Form;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), form__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 内联表单
     */
    inline: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。
     * @enumdesc 大, 中, 小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'medium', 'small']),
    /**
     * 标签的位置
     * @enumdesc 上, 左, 内
     */
    labelAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['top', 'left', 'inset']),
    /**
     * 标签的左右对齐方式
     * @enumdesc 左, 右
     */
    labelTextAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
    /**
     * 经 `new Field(this)` 初始化后，直接传给 Form 即可 用到表单校验则不可忽略此项
     */
    field: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 保存 Form 自动生成的 field 对象
     */
    saveField: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 控制第一级 Item 的 labelCol
     */
    labelCol: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 控制第一级 Item 的 wrapperCol
     */
    wrapperCol: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * form内有 `htmlType="submit"` 的元素的时候会触发
     */
    onSubmit: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 子元素
     */
    children: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 扩展class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 表单数值
     */
    value: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 表单变化回调
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置标签类型
     */
    component: _prop_types_15_7_2_prop_types_default.a.string,
    fieldOptions: _prop_types_15_7_2_prop_types_default.a.object
}, form__class.defaultProps = {
    prefix: 'next-',
    onSubmit: form_preventDefault,
    size: 'medium',
    labelAlign: 'left',
    onChange: func.noop,
    component: 'form',
    saveField: func.noop
}, form__class.childContextTypes = {
    _formField: _prop_types_15_7_2_prop_types_default.a.object,
    _formSize: _prop_types_15_7_2_prop_types_default.a.string
}, form__temp);
form_Form.displayName = 'Form';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/grid/row.js






var row__class, row__temp;





/**
 * Grid.Row
 * @order 1
 */
var row_Row = (row__temp = row__class = function (_Component) {
    inherits_default()(Row, _Component);

    function Row() {
        classCallCheck_default()(this, Row);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Row.prototype.render = function render() {
        var _extends2, _extends3;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            pure = _props.pure,
            wrap = _props.wrap,
            fixed = _props.fixed,
            gutter = _props.gutter,
            fixedWidth = _props.fixedWidth,
            align = _props.align,
            justify = _props.justify,
            hidden = _props.hidden,
            className = _props.className,
            Tag = _props.component,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['prefix', 'pure', 'wrap', 'fixed', 'gutter', 'fixedWidth', 'align', 'justify', 'hidden', 'className', 'component', 'children']);
        /* eslint-enable no-unused-vars */

        var hiddenClassObj = void 0;
        if (hidden === true) {
            var _hiddenClassObj;

            hiddenClassObj = (_hiddenClassObj = {}, _hiddenClassObj[prefix + 'row-hidden'] = true, _hiddenClassObj);
        } else if (typeof hidden === 'string') {
            var _hiddenClassObj2;

            hiddenClassObj = (_hiddenClassObj2 = {}, _hiddenClassObj2[prefix + 'row-' + hidden + '-hidden'] = !!hidden, _hiddenClassObj2);
        } else if (Array.isArray(hidden)) {
            hiddenClassObj = hidden.reduce(function (ret, point) {
                ret[prefix + 'row-' + point + '-hidden'] = !!point;
                return ret;
            }, {});
        }

        var newClassName = _classnames_2_2_6_classnames_default()(extends_default()((_extends2 = {}, _extends2[prefix + 'row'] = true, _extends2[prefix + 'row-wrap'] = wrap, _extends2[prefix + 'row-fixed'] = fixed, _extends2[prefix + 'row-fixed-' + fixedWidth] = !!fixedWidth, _extends2[prefix + 'row-justify-' + justify] = !!justify, _extends2[prefix + 'row-align-' + align] = !!align, _extends2), hiddenClassObj, (_extends3 = {}, _extends3[className] = !!className, _extends3)));

        var newChildren = children;
        var gutterNumber = parseInt(gutter, 10);
        if (gutterNumber !== 0) {
            var halfGutterString = gutterNumber / 2 + 'px';
            others.style = extends_default()({
                marginLeft: '-' + halfGutterString,
                marginRight: '-' + halfGutterString
            }, others.style || {});
            newChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child) {
                if (child && child.type && typeof child.type === 'function' && child.type.isNextCol) {
                    var newChild = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, {
                        style: extends_default()({
                            paddingLeft: halfGutterString,
                            paddingRight: halfGutterString
                        }, child.style || {})
                    });
                    return newChild;
                }

                return child;
            });
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({
                role: 'row',
                className: newClassName
            }, others),
            newChildren
        );
    };

    return Row;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), row__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 行内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 列间隔
     */
    gutter: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 列在行中宽度溢出后是否换行
     */
    wrap: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 行在某一断点下宽度是否保持不变（默认行宽度随视口变化而变化）
     */
    fixed: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 固定行的宽度为某一断点的宽度，不受视口影响而变动
     * @enumdesc 320px, 480px, 720px, 990px, 1200px, 1500px
     */
    fixedWidth: _prop_types_15_7_2_prop_types_default.a.oneOf(['xxs', 'xs', 's', 'm', 'l', 'xl']),
    /**
     * （不支持IE9浏览器）多列垂直方向对齐方式
     * @enumdesc 顶部对齐, 居中对齐, 底部对齐, 按第一行文字基线对齐, 未设置高度或设为 auto，将占满整个容器的高度
     */
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
    /**
     * （不支持IE9浏览器）行内具有多余空间时的布局方式
     * @enumdesc 左对齐, 居中对齐, 右对齐, 两端对齐，列之间间距相等, 每列具有相同的左右间距，行两端间距是列间距的二分之一
     */
    justify: _prop_types_15_7_2_prop_types_default.a.oneOf(['start', 'center', 'end', 'space-between', 'space-around']),
    /**
     * 行在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）
     */
    hidden: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 指定以何种元素渲染该节点
     * - 默认为 'div'
     */
    component: _prop_types_15_7_2_prop_types_default.a.string
}, row__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    fixed: false,
    gutter: 0,
    wrap: false,
    component: 'div'
}, row__temp);
row_Row.displayName = 'Row';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/grid/col.js







var col__class, col__temp;





var breakPoints = ['xxs', 'xs', 's', 'm', 'l', 'xl'];

/**
 * Grid.Col
 * @order 2
 */
var col_Col = (col__temp = col__class = function (_Component) {
    inherits_default()(Col, _Component);

    function Col() {
        classCallCheck_default()(this, Col);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Col.prototype.render = function render() {
        var _this2 = this,
            _extends2,
            _extends3;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            pure = _props.pure,
            span = _props.span,
            offset = _props.offset,
            fixedSpan = _props.fixedSpan,
            fixedOffset = _props.fixedOffset,
            hidden = _props.hidden,
            align = _props.align,
            xxs = _props.xxs,
            xs = _props.xs,
            s = _props.s,
            m = _props.m,
            l = _props.l,
            xl = _props.xl,
            Tag = _props.component,
            className = _props.className,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['prefix', 'pure', 'span', 'offset', 'fixedSpan', 'fixedOffset', 'hidden', 'align', 'xxs', 'xs', 's', 'm', 'l', 'xl', 'component', 'className', 'children']);
        /* eslint-enable no-unused-vars */

        var pointClassObj = breakPoints.reduce(function (ret, point) {
            var pointProps = {};
            if (typeof_default()(_this2.props[point]) === 'object') {
                pointProps = _this2.props[point];
            } else {
                pointProps.span = _this2.props[point];
            }

            ret[prefix + 'col-' + point + '-' + pointProps.span] = !!pointProps.span;
            ret[prefix + 'col-' + point + '-offset-' + pointProps.offset] = !!pointProps.offset;

            return ret;
        }, {});

        var hiddenClassObj = void 0;
        if (hidden === true) {
            var _hiddenClassObj;

            hiddenClassObj = (_hiddenClassObj = {}, _hiddenClassObj[prefix + 'col-hidden'] = true, _hiddenClassObj);
        } else if (typeof hidden === 'string') {
            var _hiddenClassObj2;

            hiddenClassObj = (_hiddenClassObj2 = {}, _hiddenClassObj2[prefix + 'col-' + hidden + '-hidden'] = !!hidden, _hiddenClassObj2);
        } else if (Array.isArray(hidden)) {
            hiddenClassObj = hidden.reduce(function (ret, point) {
                ret[prefix + 'col-' + point + '-hidden'] = !!point;
                return ret;
            }, {});
        }

        var classes = _classnames_2_2_6_classnames_default()(extends_default()((_extends2 = {}, _extends2[prefix + 'col'] = true, _extends2[prefix + 'col-' + span] = !!span, _extends2[prefix + 'col-fixed-' + fixedSpan] = !!fixedSpan, _extends2[prefix + 'col-offset-' + offset] = !!offset, _extends2[prefix + 'col-offset-fixed-' + fixedOffset] = !!fixedOffset, _extends2[prefix + 'col-' + align] = !!align, _extends2), pointClassObj, hiddenClassObj, (_extends3 = {}, _extends3[className] = className, _extends3)));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({
                role: 'gridcell',
                className: classes
            }, others),
            children
        );
    };

    return Col;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), col__class.isNextCol = true, col__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 列内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24
     */
    span: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30
     */
    fixedSpan: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * （不支持IE9浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24
     */
    offset: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * （不支持IE9浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30
     */
    fixedOffset: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * （不支持IE9浏览器）多列垂直方向对齐方式，可覆盖Row的align属性
     */
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
    /**
     * 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）
     */
    hidden: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xxs: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xs: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    s: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    m: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    l: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xl: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * 指定以何种元素渲染该节点，默认为 'div'
     */
    component: _prop_types_15_7_2_prop_types_default.a.string
}, col__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    component: 'div'
}, col__temp);
col_Col.displayName = 'Col';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/grid/index.js






var Grid = {
    Row: config_provider.config(row_Row, {
        transform: /* istanbul ignore next */function transform(props, deprecated) {
            if ('type' in props) {
                deprecated('type', 'fixed | wrap | gutter', 'Row');

                var _props = props,
                    type = _props.type,
                    others = objectWithoutProperties_default()(_props, ['type']);

                var types = Array.isArray(type) ? type : [type];
                var fixed = void 0;
                if (types.indexOf('fixed') > -1) {
                    fixed = true;
                }
                var wrap = void 0;
                if (types.indexOf('wrap') > -1) {
                    wrap = true;
                }
                props = extends_default()({ fixed: fixed, wrap: wrap }, others);
            }

            return props;
        }
    }),
    Col: config_provider.config(col_Col)
};

/* harmony default export */ var grid = (Grid);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/error.js






var error__class, error__temp2;






/**
 * Form.Error
 * @description 自定义错误展示
 * @order 4
 */
var error_Error = (error__temp2 = error__class = function (_React$Component) {
    inherits_default()(Error, _React$Component);

    function Error() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Error);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.itemRender = function (errors) {
            return errors.length ? errors : null;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Error.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            children = _props.children,
            name = _props.name,
            prefix = _props.prefix,
            style = _props.style,
            className = _props.className,
            _field = _props.field,
            others = objectWithoutProperties_default()(_props, ['children', 'name', 'prefix', 'style', 'className', 'field']);

        if (children && typeof children !== 'function') {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'form-item-help' },
                children
            );
        }

        var field = this.context._formField || _field;

        if (!field || !name) {
            return null;
        }

        var isSingle = typeof name === 'string';

        var names = isSingle ? [name] : name;
        var errorArr = [];

        if (names.length) {
            var errors = field.getErrors(names);
            Object.keys(errors).forEach(function (key) {
                if (errors[key]) {
                    errorArr.push(errors[key]);
                }
            });
        }

        var result = null;
        if (typeof children === 'function') {
            result = children(errorArr, isSingle ? field.getState(name) : undefined);
        } else {
            result = this.itemRender(errorArr);
        }

        if (!result) {
            return null;
        }

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'form-item-help'] = true, _classNames[className] = className, _classNames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: cls, style: style }),
            result
        );
    };

    return Error;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), error__class.propTypes = {
    /**
     * 表单名
     */
    name: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 自定义 field (在 Form 内不需要设置)
     */
    field: _prop_types_15_7_2_prop_types_default.a.object,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义错误渲染, 可以是 node 或者 function(errors, state)
     */
    children: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, error__class.defaultProps = {
    prefix: 'next-'
}, error__class.contextTypes = {
    _formField: _prop_types_15_7_2_prop_types_default.a.object
}, error__class._typeMark = 'form_error', error__temp2);
error_Error.displayName = 'Error';


/* harmony default export */ var form_error = (config_provider.config(error_Error));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/enhance.js
function getCfgFromProps(props, type) {
    if (type in props) {
        return props[type];
    }

    return undefined;
}

function getRule(ruleName, props) {
    var _ref;

    return _ref = {}, _ref[ruleName] = props[ruleName], _ref.message = getCfgFromProps(props, ruleName + 'Message'), _ref.trigger = getCfgFromProps(props, ruleName + 'Trigger'), _ref;
}

function getValueName(props, displayName) {
    if (props.valueName) {
        return props.valueName;
    }

    if (typeof displayName === 'string') {
        // Next Components are all wrappered by configProvider
        var componentName = displayName.replace(/Config\(/, '').replace(')', '');
        if (['Switch', 'Checkbox', 'Radio'].indexOf(componentName) !== -1) {
            return 'checked';
        }
    }

    return 'value';
}

function getRules(props) {
    var result = [];

    // required
    if (props.required) {
        result.push(getRule('required', props));
    }

    var maxLength = Number(props.maxLength);
    var minLength = Number(props.minLength);
    if (minLength || maxLength) {
        result.push({
            minLength: minLength,
            maxLength: maxLength,
            // minLengthMessage maxLengthMessage had been deprected, please use minmaxLength. TODO: removed in 2.0
            message: getCfgFromProps(props, 'minmaxLengthMessage') || getCfgFromProps(props, 'minLengthMessage') || getCfgFromProps(props, 'maxLengthMessage'),
            trigger: getCfgFromProps(props, 'minmaxLengthTrigger') || getCfgFromProps(props, 'minLengthTrigger') || getCfgFromProps(props, 'maxLengthTrigger')
        });
    }

    // length
    if (props.length) {
        result.push(getRule('length', props));
    }

    // pattern
    if (props.pattern) {
        result.push(getRule('pattern', props));
    }

    // format
    if (['number', 'tel', 'url', 'email'].indexOf(props.format) > -1) {
        result.push(getRule('format', props));
    }

    var max = Number(props.max);
    var min = Number(props.min);
    // max min
    if (max || min) {
        result.push({
            min: min,
            max: max,
            // minMessage maxMessage had been deprected, please use minmaxLength. TODO: removed in 2.0
            message: getCfgFromProps(props, 'minmaxMessage') || getCfgFromProps(props, 'minMessage') || getCfgFromProps(props, 'maxMessage'),
            trigger: getCfgFromProps(props, 'minmaxTrigger') || getCfgFromProps(props, 'minTrigger') || getCfgFromProps(props, 'maxTrigger')
        });
    }

    if (props.validator && typeof props.validator === 'function') {
        result.push({
            validator: props.validator,
            trigger: getCfgFromProps(props, 'validatorTrigger')
        });
    }

    return result;
}

function getFieldInitCfg(props, displayName) {
    return {
        valueName: getValueName(props, displayName),
        trigger: props.trigger ? props.trigger : 'onChange',
        rules: getRules(props)
    };
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/item.js





var form_item__class, form_item__temp;









var item_Row = grid.Row,
    item_Col = grid.Col;

/** Form.Item
 *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid
 *  @order 1
 */

var form_item_Item = (form_item__temp = form_item__class = function (_React$Component) {
  inherits_default()(Item, _React$Component);

  function Item() {
    classCallCheck_default()(this, Item);

    return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
  }

  /**
   * 从子元素里面提取表单组件
   */
  Item.prototype.getNames = function getNames() {
    var children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.toArray(this.props.children);
    return children.filter(function (c) {
      return c.props && ('name' in c.props || 'data-meta' in c.props);
    }).map(function (c) {
      return c.props.name || c.props.id;
    });
  };

  Item.prototype.getHelper = function getHelper() {
    var help = this.props.help;
    var _formField = this.context._formField;

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      form_error,
      { name: help === undefined ? this.getNames() : undefined, field: _formField },
      help
    );
  };

  Item.prototype.getState = function getState() {
    var validateState = this.props.validateState;

    if (validateState) {
      return validateState;
    }

    if (this.context._formField) {
      var getState = this.context._formField.getState;

      var names = this.getNames();
      if (!names.length) {
        return '';
      }

      // get first name
      return getState(names[0]);
    }

    return undefined;
  };

  Item.prototype.getSize = function getSize() {
    return this.props.size || this.context._formSize;
  };

  Item.prototype.getItemLabel = function getItemLabel() {
    var _classNames;

    var _props = this.props,
        id = _props.id,
        required = _props.required,
        _props$asterisk = _props.asterisk,
        asterisk = _props$asterisk === undefined ? required : _props$asterisk,
        label = _props.label,
        labelCol = _props.labelCol,
        wrapperCol = _props.wrapperCol,
        prefix = _props.prefix,
        labelAlign = _props.labelAlign,
        labelTextAlign = _props.labelTextAlign;


    if (!label) {
      return null;
    }

    var ele = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      'label',
      { htmlFor: id || this.getNames()[0], required: asterisk, key: 'label' },
      label
    );

    var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'form-item-label'] = true, _classNames[prefix + 'left'] = labelTextAlign === 'left', _classNames));

    if ((wrapperCol || labelCol) && labelAlign !== 'top') {
      return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        item_Col,
        extends_default()({}, labelCol, { className: cls }),
        ele
      );
    }

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      'div',
      { className: cls },
      ele
    );
  };

  Item.prototype.getItemWrapper = function getItemWrapper() {
    var _this2 = this;

    var _props2 = this.props,
        hasFeedback = _props2.hasFeedback,
        labelCol = _props2.labelCol,
        wrapperCol = _props2.wrapperCol,
        children = _props2.children,
        extra = _props2.extra,
        labelAlign = _props2.labelAlign,
        prefix = _props2.prefix;


    var state = this.getState();

    var childrenProps = { size: this.getSize() };
    if (state && (state === 'error' || hasFeedback)) {
      childrenProps.state = state;
    }

    if (labelAlign === 'inset') {
      childrenProps.label = this.getItemLabel();
    }

    var childrenNode = children;
    if (typeof children === 'function' && this.context._formField) {
      childrenNode = children(this.context._formField.getValues());
    }

    var ele = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.map(childrenNode, function (child) {
      if (child && typeof child.type === 'function' && child.type._typeMark !== 'form_item' && child.type._typeMark !== 'form_error') {
        var extraProps = childrenProps;
        if (_this2.context._formField && 'name' in child.props && !('data-meta' in child.props)) {
          extraProps = _this2.context._formField.init(child.props.name, extends_default()({}, getFieldInitCfg(_this2.props, child.type.displayName), {
            props: child.props
          }), childrenProps);
        } else {
          extraProps = extends_default()({}, child.props, extraProps);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, extraProps);
      }

      return child;
    });

    var help = this.getHelper();

    if ((wrapperCol || labelCol) && labelAlign !== 'top') {
      return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        item_Col,
        extends_default()({}, wrapperCol, { className: prefix + 'form-item-control', key: 'item' }),
        ele,
        ' ',
        help,
        ' ',
        extra
      );
    }

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      'div',
      { className: prefix + 'form-item-control' },
      ele,
      ' ',
      help,
      ' ',
      extra
    );
  };

  Item.prototype.render = function render() {
    var _classNames2;

    var _props3 = this.props,
        className = _props3.className,
        labelAlign = _props3.labelAlign,
        style = _props3.style,
        prefix = _props3.prefix,
        wrapperCol = _props3.wrapperCol,
        labelCol = _props3.labelCol;

    var state = this.getState();
    var size = this.getSize();

    var itemClassName = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'form-item'] = true, _classNames2['' + prefix + labelAlign] = labelAlign, _classNames2['has-' + state] = !!state, _classNames2['' + prefix + size] = !!size, _classNames2['' + className] = !!className, _classNames2));

    // 垂直模式并且左对齐才用到
    var Tag = (wrapperCol || labelCol) && labelAlign !== 'top' ? item_Row : 'div';
    var label = labelAlign === 'inset' ? null : this.getItemLabel();

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      Tag,
      extends_default()({}, util_obj.pickOthers(Item.propTypes, this.props), { className: itemClassName, style: style }),
      label,
      this.getItemWrapper()
    );
  };

  return Item;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), form_item__class.propTypes = {
  /**
   * 样式前缀
   */
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * label 标签的文本
   */
  label: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效
   */
  labelCol: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol
   */
  wrapperCol: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * 自定义提示信息，如不设置，则会根据校验规则自动生成.
   */
  help: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面
   */
  extra: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 校验状态，如不设置，则会根据校验规则自动生成
   * @enumdesc 成功, 失败, 校验中
   */
  validateState: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'success', 'loading']),
  /**
   * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持
   */
  hasFeedback: _prop_types_15_7_2_prop_types_default.a.bool, //TODO: hasFeedback => validateStatus=[error,success,loading]
  /**
   * 自定义内联样式
   */
  style: _prop_types_15_7_2_prop_types_default.a.object,
  id: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * node 或者 function(values)
   */
  children: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
  /**
   * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。
   */
  size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'small', 'medium']),
  /**
   * 标签的位置
   * @enumdesc 上, 左, 内
   */
  labelAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['top', 'left', 'inset']),
  /**
   * 标签的左右对齐方式
   * @enumdesc 左, 右
   */
  labelTextAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
  /**
   * 扩展class
   */
  className: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * [表单校验] 不能为空
   */
  required: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * required 的星号是否显示
   */
  asterisk: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * required 自定义错误信息
   */
  requiredMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * required 自定义触发方式
   */
  requiredTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * [表单校验] 最小值
   */
  min: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * [表单校验] 最大值
   */
  max: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * min/max 自定义错误信息
   */
  minmaxMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * min/max 自定义触发方式
   */
  minmaxTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * [表单校验] 字符串最小长度 / 数组最小个数
   */
  minLength: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * [表单校验] 字符串最大长度 / 数组最大个数
   */
  maxLength: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * minLength/maxLength 自定义错误信息
   */
  minmaxLengthMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * minLength/maxLength 自定义触发方式
   */
  minmaxLengthTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * [表单校验] 字符串精确长度 / 数组精确个数
   */
  length: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * length 自定义错误信息
   */
  lengthMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * length 自定义触发方式
   */
  lengthTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * 正则校验
   */
  pattern: _prop_types_15_7_2_prop_types_default.a.any,
  /**
   * pattern 自定义错误信息
   */
  patternMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * pattern 自定义触发方式
   */
  patternTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * [表单校验] 四种常用的 pattern
   */
  format: _prop_types_15_7_2_prop_types_default.a.oneOf(['number', 'email', 'url', 'tel']),
  /**
   * format 自定义错误信息
   */
  formatMessage: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * format 自定义触发方式
   */
  formatTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * [表单校验] 自定义校验函数
   */
  validator: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * validator 自定义触发方式
   */
  validatorTrigger: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array])
}, form_item__class.defaultProps = {
  prefix: 'next-',
  hasFeedback: false
}, form_item__class.contextTypes = {
  _formField: _prop_types_15_7_2_prop_types_default.a.object,
  _formSize: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'small', 'medium'])
}, form_item__class._typeMark = 'form_item', form_item__temp);
form_item_Item.displayName = 'Item';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/submit.js





var submit__class, submit__temp2;






/**
 * Form.Submit
 * @description 继承 Button API
 * @order 2
 */
var submit_Submit = (submit__temp2 = submit__class = function (_React$Component) {
    inherits_default()(Submit, _React$Component);

    function Submit() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Submit);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function () {
            var _this$props = _this.props,
                onClick = _this$props.onClick,
                validate = _this$props.validate;

            var field = _this.context._formField || _this.props.field;

            if (!field) {
                log.warning('Form.Submit should be used in `Form`');
                onClick();
                return;
            }

            if (validate === true) {
                field.validate(function (errors) {
                    onClick(field.getValues(), errors, field);
                });
            } else if (Array.isArray(validate)) {
                field.validate(validate, function (errors) {
                    onClick(field.getValues(), errors, field);
                });
            } else {
                onClick(field.getValues(), null, field);
            }
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Submit.prototype.render = function render() {
        var children = this.props.children;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({}, util_obj.pickOthers(Submit.propTypes, this.props), { onClick: this.handleClick }),
            children
        );
    };

    return Submit;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), submit__class.propTypes = {
    /**
     * 点击提交后触发
     * @param {Object} value 数据
     * @param {Object} errors 错误数据
     * @param {class} field 实例
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否校验/需要校验的 name 数组
     */
    validate: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.array]),
    /**
     * 自定义 field (在 Form 内不需要设置)
     */
    field: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, submit__class.defaultProps = {
    onClick: func.noop
}, submit__class.contextTypes = {
    _formField: _prop_types_15_7_2_prop_types_default.a.object
}, submit__temp2);
submit_Submit.displayName = 'Submit';


/* harmony default export */ var form_submit = (submit_Submit);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/reset.js





var reset__class, reset__temp2;






/**
 * Form.Reset
 * @description 继承 Button API
 * @order 3
 */
var reset_Reset = (reset__temp2 = reset__class = function (_React$Component) {
    inherits_default()(Reset, _React$Component);

    function Reset() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Reset);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function () {
            var _this$props = _this.props,
                names = _this$props.names,
                toDefault = _this$props.toDefault,
                onClick = _this$props.onClick;

            var field = _this.context._formField || _this.props.field;

            if (!field) {
                log.warning('Form.Reset should be used in `Form`');
                onClick();
                return;
            }

            if (toDefault) {
                field.resetToDefault(names);
            } else {
                field.reset(names);
            }

            onClick();
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Reset.prototype.render = function render() {
        var children = this.props.children;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({}, util_obj.pickOthers(Reset.propTypes, this.props), { onClick: this.handleClick }),
            children
        );
    };

    return Reset;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), reset__class.propTypes = {
    /**
     * 自定义重置的字段
     */
    names: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 点击提交后触发
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 返回默认值
     */
    toDefault: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义 field (在 Form 内不需要设置)
     */
    field: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, reset__class.defaultProps = {
    onClick: func.noop
}, reset__class.contextTypes = {
    _formField: _prop_types_15_7_2_prop_types_default.a.object
}, reset__temp2);
reset_Reset.displayName = 'Reset';


/* harmony default export */ var form_reset = (reset_Reset);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/form/index.js









form_Form.Item = config_provider.config(form_item_Item, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('validateStatus' in props) {
            deprecated('validateStatus', 'validateState', 'Form.Item');

            var _props = props,
                validateStatus = _props.validateStatus,
                others = objectWithoutProperties_default()(_props, ['validateStatus']);

            props = extends_default()({ validateState: validateStatus }, others);
        }

        return props;
    }
});
form_Form.Submit = form_submit;
form_Form.Reset = form_reset;
form_Form.Error = form_error;

/* harmony default export */ var es_form = (config_provider.config(form_Form, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('direction' in props) {
            deprecated('direction', 'inline', 'Form');

            var _props2 = props,
                direction = _props2.direction,
                others = objectWithoutProperties_default()(_props2, ['direction']);

            if (direction === 'hoz') {
                props = extends_default()({ inline: true }, others);
            }
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/loading/index.js





var loading__class, loading__temp;








/** Loading */
var loading_Loading = (loading__temp = loading__class = function (_React$Component) {
    inherits_default()(Loading, _React$Component);

    function Loading() {
        classCallCheck_default()(this, Loading);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Loading.prototype.render = function render() {
        var _classNames2, _classNames3, _classNames4;

        var _props = this.props,
            tip = _props.tip,
            visible = _props.visible,
            children = _props.children,
            className = _props.className,
            style = _props.style,
            indicator = _props.indicator,
            color = _props.color,
            prefix = _props.prefix,
            fullScreen = _props.fullScreen,
            onVisibleChange = _props.onVisibleChange,
            tipAlign = _props.tipAlign,
            size = _props.size,
            inline = _props.inline;


        var indicatorDom = null;
        var dotCls = prefix + 'loading-dot';

        if (indicator) {
            indicatorDom = indicator;
        } else {
            var _classNames;

            var backgroundColor = color;
            var fusionReactorCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'loading-fusion-reactor'] = true, _classNames[prefix + 'loading-medium-fusion-reactor'] = size === 'medium', _classNames));
            indicatorDom = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: fusionReactorCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: dotCls, style: { backgroundColor: backgroundColor } }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: dotCls, style: { backgroundColor: backgroundColor } }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: dotCls, style: { backgroundColor: backgroundColor } }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: dotCls, style: { backgroundColor: backgroundColor } })
            );
        }

        var loadingCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'loading'] = true, _classNames2[prefix + 'open'] = visible, _classNames2[prefix + 'loading-inline'] = inline, _classNames2[className] = className, _classNames2));

        var tipCls = _classnames_2_2_6_classnames_default()((_classNames3 = {}, _classNames3[prefix + 'loading-tip'] = true, _classNames3[prefix + 'loading-right-tip'] = tipAlign === 'right', _classNames3));

        var others = util_obj.pickOthers(Loading.propTypes, this.props);

        var contentCls = _classnames_2_2_6_classnames_default()((_classNames4 = {}, _classNames4[prefix + 'loading-component'] = visible, _classNames4[prefix + 'loading-wrap'] = true, _classNames4));

        return fullScreen ? [children, external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_overlay,
            extends_default()({ key: 'overlay', hasMask: true, align: 'cc cc' }, others, {
                className: className,
                style: style,
                visible: visible,
                onRequestClose: onVisibleChange }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: tipCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-indicator' },
                    indicatorDom
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-tip-content' },
                    tip
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-tip-placeholder' },
                    tip
                )
            )
        )] : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ className: loadingCls, style: style }, others),
            visible ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: tipCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-indicator' },
                    indicatorDom
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-tip-content' },
                    tip
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'loading-tip-placeholder' },
                    tip
                )
            ) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: contentCls },
                visible ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'loading-masker' }) : null,
                children
            )
        );
    };

    return Loading;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), loading__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内容
     */
    tip: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 自定义内容位置
     * @enumdesc 出现在动画右边, 出现在动画下面
     */
    tipAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['right', 'bottom']),
    /**
     * loading 状态, 默认 true
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 设置动画尺寸
     * @description 仅仅对默认动画效果起作用
     * @enumdesc 大号, 中号
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'medium']),
    /**
     * 自定义动画
     */
    indicator: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 动画颜色
     */
    color: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 全屏展示
     */
    fullScreen: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 子元素
     */
    children: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * should loader be displayed inline
     */
    inline: _prop_types_15_7_2_prop_types_default.a.bool
}, loading__class.defaultProps = {
    prefix: 'next-',
    visible: true,
    onVisibleChange: func.noop,
    animate: null,
    tipAlign: 'bottom',
    size: 'large',
    inline: true
}, loading__temp);
loading_Loading.displayName = 'Loading';


/* harmony default export */ var es_loading = (config_provider.config(loading_Loading));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/menu-button/index.js






var menu_button__class, menu_button__temp;











var menu_button_Popup = es_overlay.Popup;

/**
 * MenuButton
 */

var menu_button_MenuButton = (menu_button__temp = menu_button__class = function (_React$Component) {
    inherits_default()(MenuButton, _React$Component);

    function MenuButton(props, context) {
        classCallCheck_default()(this, MenuButton);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.clickMenuItem = function (key) {
            var _this$props;

            for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                others[_key - 1] = arguments[_key];
            }

            (_this$props = _this.props).onItemClick.apply(_this$props, [key].concat(others));
            _this.onPopupVisibleChange(false, 'menuSelect');
        };

        _this.selectMenu = function (keys) {
            var _this$props2;

            for (var _len2 = arguments.length, others = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                others[_key2 - 1] = arguments[_key2];
            }

            if (!('selectedKeys' in _this.props)) {
                _this.setState({
                    selectedKeys: keys
                });
            }
            (_this$props2 = _this.props).onSelect.apply(_this$props2, [keys].concat(others));
        };

        _this.onPopupOpen = function () {
            var button = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(_this);
            if (_this.props.autoWidth && button && _this.menu) {
                _this.menu.style.width = button.offsetWidth + 'px';
            }
        };

        _this.onPopupVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };

        _this._menuRefHandler = function (ref) {
            _this.menu = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);

            var refFn = _this.props.menuProps.ref;
            if (typeof refFn === 'function') {
                refFn(ref);
            }
        };

        _this.state = {
            selectedKeys: props.selectedKeys || props.defaultSelectedKeys,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }

    MenuButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }

        if ('selectedKeys' in nextProps) {
            this.setState({
                selectedKeys: nextProps.selectedKeys
            });
        }
    };

    MenuButton.prototype.render = function render() {
        var _classnames, _classnames2;

        var _props = this.props,
            prefix = _props.prefix,
            style = _props.style,
            className = _props.className,
            label = _props.label,
            popupTriggerType = _props.popupTriggerType,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            selectMode = _props.selectMode,
            menuProps = _props.menuProps,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['prefix', 'style', 'className', 'label', 'popupTriggerType', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'selectMode', 'menuProps', 'children']);

        var state = this.state;

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'menu-btn'] = true, _classnames[prefix + 'expand'] = state.visible, _classnames.opened = state.visible, _classnames), className);

        var popupClassNames = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'menu-btn-popup'] = true, _classnames2), popupClassName);

        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({ style: style, className: classNames }, util_obj.pickOthers(MenuButton.propTypes, others)),
            label,
            ' ',
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-down', className: prefix + 'menu-btn-arrow' })
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            menu_button_Popup,
            extends_default()({}, popupProps, {
                visible: state.visible,
                onVisibleChange: this.onPopupVisibleChange,
                trigger: trigger,
                triggerType: popupTriggerType,
                container: popupContainer,
                onOpen: this.onPopupOpen,
                style: popupStyle,
                className: popupClassNames
            }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu,
                extends_default()({}, menuProps, {
                    ref: this._menuRefHandler,
                    selectedKeys: state.selectedKeys,
                    selectMode: selectMode,
                    onSelect: this.selectMenu,
                    onItemClick: this.clickMenuItem }),
                children
            )
        );
    };

    return MenuButton;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), menu_button__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 按钮上的文本内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 弹层是否与按钮宽度相同
     */
    autoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层容器
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层展开状态
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否展开
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层在显示和隐藏触发的事件
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层属性透传
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 默认激活的菜单项（用法同 Menu 非受控）
     */
    defaultSelectedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 激活的菜单项（用法同 Menu 受控）
     */
    selectedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 菜单的选择模式，同 Menu
     */
    selectMode: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 点击菜单项后的回调，同 Menu
     */
    onItemClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选择菜单后的回调，同 Menu
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 菜单属性透传
     */
    menuProps: _prop_types_15_7_2_prop_types_default.a.object,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, menu_button__class.defaultProps = {
    prefix: 'next-',
    autoWidth: true,
    popupTriggerType: 'click',
    onVisibleChange: func.noop,
    onItemClick: func.noop,
    onSelect: func.noop,
    defaultSelectedKeys: [],
    menuProps: {}
}, menu_button__temp);
menu_button_MenuButton.displayName = 'MenuButton';


menu_button_MenuButton.Item = es_menu.Item;
menu_button_MenuButton.Group = es_menu.Group;
menu_button_MenuButton.Divider = es_menu.Divider;

/* harmony default export */ var menu_button = (menu_button_MenuButton);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/nav.js






var nav__class, nav__temp;







/**
 * Nav
 * @description 继承自 `Menu` 的能力请查看 `Menu` 文档
 */
var nav_Nav = (nav__temp = nav__class = function (_Component) {
  inherits_default()(Nav, _Component);

  function Nav(props) {
    classCallCheck_default()(this, Nav);

    var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

    _this.getMenuRef = _this.getMenuRef.bind(_this);
    return _this;
  }

  Nav.prototype.getChildContext = function getChildContext() {
    var _props = this.props,
        prefix = _props.prefix,
        direction = _props.direction,
        mode = _props.mode,
        iconOnly = _props.iconOnly,
        hasTooltip = _props.hasTooltip,
        hasArrow = _props.hasArrow;


    return {
      prefix: prefix,
      mode: direction === 'hoz' ? 'popup' : mode,
      iconOnly: iconOnly,
      hasTooltip: hasTooltip,
      hasArrow: hasArrow
    };
  };

  Nav.prototype.getMenuRef = function getMenuRef(ref) {
    this.menu = ref;
  };

  Nav.prototype.render = function render() {
    var _classNames, _classNames2;

    // eslint-disable-next-line
    var _props2 = this.props,
        prefix = _props2.prefix,
        className = _props2.className,
        style = _props2.style,
        children = _props2.children,
        type = _props2.type,
        direction = _props2.direction,
        activeDirection = _props2.activeDirection,
        mode = _props2.mode,
        triggerType = _props2.triggerType,
        inlineIndent = _props2.inlineIndent,
        openMode = _props2.openMode,
        popupAlign = _props2.popupAlign,
        popupClassName = _props2.popupClassName,
        iconOnly = _props2.iconOnly,
        hasArrow = _props2.hasArrow,
        hasTooltip = _props2.hasTooltip,
        _popupProps = _props2.popupProps,
        rtl = _props2.rtl,
        others = objectWithoutProperties_default()(_props2, ['prefix', 'className', 'style', 'children', 'type', 'direction', 'activeDirection', 'mode', 'triggerType', 'inlineIndent', 'openMode', 'popupAlign', 'popupClassName', 'iconOnly', 'hasArrow', 'hasTooltip', 'popupProps', 'rtl']);

    var realActiveDirection = activeDirection;
    if (realActiveDirection && (direction === 'hoz' && (realActiveDirection === 'left' || realActiveDirection === 'right') || direction === 'ver' && (realActiveDirection === 'top' || realActiveDirection === 'bottom'))) {
      realActiveDirection = null;
    }

    if (!iconOnly && realActiveDirection === undefined) {
      realActiveDirection = direction === 'hoz' ? 'bottom' : type === 'line' ? 'right' : 'left';
    }

    var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'nav'] = true, _classNames['' + prefix + type] = type, _classNames[prefix + 'active'] = realActiveDirection, _classNames['' + prefix + realActiveDirection] = realActiveDirection, _classNames[prefix + 'icon-only'] = iconOnly, _classNames[prefix + 'no-arrow'] = !hasArrow, _classNames[className] = !!className, _classNames));
    var newStyle = iconOnly ? extends_default()({}, style, { width: '60px' }) : style;

    var props = {
      prefix: prefix,
      direction: direction,
      openMode: openMode,
      triggerType: triggerType,
      mode: direction === 'hoz' ? 'popup' : mode,
      popupAlign: direction === 'hoz' ? 'follow' : popupAlign,
      inlineIndent: iconOnly ? 0 : inlineIndent,
      hasSelectedIcon: false,
      popupAutoWidth: true,
      selectMode: 'single',
      itemClassName: prefix + 'nav-item',
      popupClassName: _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[cls.replace(prefix + 'icon-only', '')] = mode === 'popup', _classNames2[prefix + 'icon-only'] = iconOnly && mode === 'inline', _classNames2[popupClassName] = !!popupClassName, _classNames2)),
      popupProps: function popupProps(popupItemProps) {
        return extends_default()({
          offset: direction === 'hoz' && popupItemProps.level === 1 ? [0, 2] : [-2, 0]
        }, _popupProps);
      }
    };

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      es_menu,
      extends_default()({ className: cls, style: newStyle }, props, others, { ref: this.getMenuRef }),
      children
    );
  };

  return Nav;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), nav__class.propTypes = {
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  pure: _prop_types_15_7_2_prop_types_default.a.bool,
  rtl: _prop_types_15_7_2_prop_types_default.a.bool,
  className: _prop_types_15_7_2_prop_types_default.a.string,
  style: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * 导航项和子导航
   */
  children: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 导航类型
   * @enumdesc 普通, 主要, 次要, 线形
   */
  type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'primary', 'secondary', 'line']),
  /**
   * 导航布局
   * @enumdesc 水平, 垂直
   */
  direction: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
  /**
   * 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效
   */
  hozAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
  /**
   * 设置组件选中状态的 active 边方向
   * @enumdesc 无, 上, 下, 左, 右
   * @default 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left'
   */
  activeDirection: _prop_types_15_7_2_prop_types_default.a.oneOf([null, 'top', 'bottom', 'left', 'right']),
  /**
   * 子导航打开的模式（水平导航只支持弹出）
   * @eumdesc 行内, 弹出
   */
  mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup']),
  /**
   * 子导航打开的触发方式
   */
  triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
  /**
   * 内联子导航缩进距离
   */
  inlineIndent: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 初始展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效
   */
  defaultOpenAll: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效
   * @eumdesc 一个, 多个
   */
  openMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
  /**
   * 当前选中导航项的 key 值
   */
  selectedKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * 初始选中导航项的 key 值
   */
  defaultSelectedKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.array]),
  /**
   * 选中或取消选中导航项触发的回调函数
   * @param {Array} selectedKeys 选中的所有导航项的 key
   * @param {Object} item 选中或取消选中的导航项
   * @param {Object} extra 额外参数
   * @param {Boolean} extra.select 是否是选中
   * @param {Array} extra.key 导航项的 key
   * @param {Object} extra.label 导航项的文本
   * @param {Array} extra.keyPath 导航项 key 的路径
   */
  onSelect: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * 弹出子导航的对齐方式（水平导航只支持 follow ）
   * @eumdesc Item 顶端对齐, Nav 顶端对齐
   */
  popupAlign: _prop_types_15_7_2_prop_types_default.a.oneOf(['follow', 'outside']),
  /**
   * 弹出子导航的自定义类名
   */
  popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 是否只显示图标
   */
  iconOnly: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否显示右侧的箭头（仅在 iconOnly=true 时生效）
   */
  hasArrow: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否有 ToolTips （仅在 iconOnly=true 时生效）
   */
  hasTooltip: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 自定义导航头部
   */
  header: _prop_types_15_7_2_prop_types_default.a.node,
  /**
   * 自定义导航尾部
   */
  footer: _prop_types_15_7_2_prop_types_default.a.node,
  popupProps: _prop_types_15_7_2_prop_types_default.a.object
}, nav__class.defaultProps = {
  prefix: 'next-',
  pure: false,
  type: 'normal',
  direction: 'ver',
  hozAlign: 'left',
  mode: 'inline',
  triggerType: 'click',
  inlineIndent: 20,
  defaultOpenAll: false,
  openMode: 'multiple',
  defaultSelectedKeys: [],
  popupAlign: 'follow',
  hasTooltip: false,
  hasArrow: true,
  popupProps: {}
}, nav__class.childContextTypes = {
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  mode: _prop_types_15_7_2_prop_types_default.a.string,
  iconOnly: _prop_types_15_7_2_prop_types_default.a.bool,
  hasTooltip: _prop_types_15_7_2_prop_types_default.a.bool,
  hasArrow: _prop_types_15_7_2_prop_types_default.a.bool
}, nav__temp);
nav_Nav.displayName = 'Nav';


/* harmony default export */ var nav = (config_provider.config(nav_Nav));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/item.js





var nav_item__class, nav_item__temp;







var item_Tooltip = balloon.Tooltip;

/**
 * Nav.Item
 * @description 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档
 */

var nav_item_Item = (nav_item__temp = nav_item__class = function (_Component) {
    inherits_default()(Item, _Component);

    function Item() {
        classCallCheck_default()(this, Item);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Item.prototype.render = function render() {
        var _context = this.context,
            prefix = _context.prefix,
            iconOnly = _context.iconOnly,
            hasTooltip = _context.hasTooltip;

        var _props = this.props,
            icon = _props.icon,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['icon', 'children']);

        var iconEl = typeof icon === 'string' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'nav-icon', type: icon }) : icon;
        if (iconOnly && !iconEl) {
            iconEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: prefix + 'nav-icon-placeholder' });
        }

        var item = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu.Item,
            others,
            iconEl,
            children
        );

        if (iconOnly && hasTooltip && others.parentMode !== 'popup') {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                item_Tooltip,
                { align: 'r', trigger: item },
                children
            );
        }

        return item;
    };

    return Item;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), nav_item__class.menuChildType = 'item', nav_item__class.propTypes = {
    /**
     * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type="icon type" />`
     */
    icon: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.node]),
    /**
     * 导航内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    parentMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['inline', 'popup'])
}, nav_item__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    iconOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    hasTooltip: _prop_types_15_7_2_prop_types_default.a.bool
}, nav_item__temp);
nav_item_Item.displayName = 'Item';


/* harmony default export */ var nav_item = (nav_item_Item);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/group.js






var nav_group__class, nav_group__temp;






/**
 * Nav.Group
 * @description 继承自 `Menu.Group` 的能力请查看 `Menu.Group` 文档
 */
var nav_group_Group = (nav_group__temp = nav_group__class = function (_Component) {
    inherits_default()(Group, _Component);

    function Group() {
        classCallCheck_default()(this, Group);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Group.prototype.render = function render() {
        var _classNames;

        var _context = this.context,
            prefix = _context.prefix,
            iconOnly = _context.iconOnly;

        var _props = this.props,
            className = _props.className,
            children = _props.children,
            label = _props.label,
            others = objectWithoutProperties_default()(_props, ['className', 'children', 'label']);

        var newLabel = label;
        if (iconOnly) {
            // TODO: add a group icon ?
            newLabel = [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { key: 'icon', className: prefix + 'nav-icon-placeholder' }), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { key: 'label' },
                label
            )];
        }

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'nav-group-label'] = true, _classNames[className] = !!className, _classNames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu.Group,
            extends_default()({ className: cls, label: newLabel }, others),
            children
        );
    };

    return Group;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), nav_group__class.menuChildType = 'group', nav_group__class.propTypes = {
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 导航项和子导航
     */
    children: _prop_types_15_7_2_prop_types_default.a.node
}, nav_group__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    iconOnly: _prop_types_15_7_2_prop_types_default.a.bool
}, nav_group__temp);
nav_group_Group.displayName = 'Group';


/* harmony default export */ var nav_group = (nav_group_Group);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/sub-nav.js






var sub_nav__class, sub_nav__temp;







/**
 * Nav.SubNav
 * @description 继承自 `Menu.SubMenu` 的能力请查看 `Menu.SubMenu` 文档
 */
var sub_nav_SubNav = (sub_nav__temp = sub_nav__class = function (_Component) {
    inherits_default()(SubNav, _Component);

    function SubNav() {
        classCallCheck_default()(this, SubNav);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    SubNav.prototype.render = function render() {
        var _classNames;

        var _context = this.context,
            prefix = _context.prefix,
            iconOnly = _context.iconOnly,
            hasArrow = _context.hasArrow,
            mode = _context.mode;

        var _props = this.props,
            className = _props.className,
            icon = _props.icon,
            label = _props.label,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['className', 'icon', 'label', 'children']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'nav-sub-nav-item'] = true, _classNames[className] = !!className, _classNames));
        var iconEl = typeof icon === 'string' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'nav-icon', type: icon }) : icon;
        if (iconOnly) {
            if (hasArrow) {
                iconEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'nav-icon-only-arrow', type: mode === 'popup' ? 'arrow-right' : 'arrow-down' });
            } else if (!iconEl) {
                iconEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: prefix + 'nav-icon-placeholder' });
            }
        }
        var newLabel = [iconEl ? Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(iconEl, { key: 'icon' }) : null, external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { key: 'label' },
            label
        )];

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu.SubMenu,
            extends_default()({ className: cls, label: newLabel }, others),
            children
        );
    };

    return SubNav;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), sub_nav__class.menuChildType = 'submenu', sub_nav__class.propTypes = {
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type="your type" />`
     */
    icon: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.node]),
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否可选
     */
    selectable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 导航项和子导航
     */
    children: _prop_types_15_7_2_prop_types_default.a.node
}, sub_nav__class.defaultProps = {
    selectable: false
}, sub_nav__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    mode: _prop_types_15_7_2_prop_types_default.a.string,
    iconOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    hasArrow: _prop_types_15_7_2_prop_types_default.a.bool
}, sub_nav__temp);
sub_nav_SubNav.displayName = 'SubNav';


/* harmony default export */ var sub_nav = (sub_nav_SubNav);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/popup-item.js






var nav_popup_item__class, nav_popup_item__temp;







/**
 * Nav.PopupItem
 * @description 继承自 `Menu.PopupItem` 的能力请查看 `Menu.PopupItem` 文档
 */
var nav_popup_item_PopupItem = (nav_popup_item__temp = nav_popup_item__class = function (_Component) {
    inherits_default()(PopupItem, _Component);

    function PopupItem() {
        classCallCheck_default()(this, PopupItem);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    PopupItem.prototype.render = function render() {
        var _classNames;

        var _context = this.context,
            prefix = _context.prefix,
            iconOnly = _context.iconOnly,
            hasArrow = _context.hasArrow;

        var _props = this.props,
            className = _props.className,
            icon = _props.icon,
            label = _props.label,
            children = _props.children,
            others = objectWithoutProperties_default()(_props, ['className', 'icon', 'label', 'children']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'nav-popup-item'] = true, _classNames[className] = !!className, _classNames));
        var iconEl = typeof icon === 'string' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'nav-icon', type: icon }) : icon;
        if (iconOnly) {
            if (hasArrow) {
                iconEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'nav-icon-only-arrow', type: 'arrow-right' });
            } else if (!iconEl) {
                iconEl = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: prefix + 'nav-icon-placeholder' });
            }
        }
        var newLabel = [iconEl ? Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(iconEl, { key: 'icon' }) : null, external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { key: 'label' },
            label
        )];

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu.PopupItem,
            extends_default()({ className: cls, label: newLabel }, others),
            children
        );
    };

    return PopupItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), nav_popup_item__class.menuChildType = 'submenu', nav_popup_item__class.propTypes = {
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义图标，可以使用 Icon 的 type, 也可以使用组件 `<Icon type="icon type" />`
     */
    icon: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.node]),
    /**
     * 标签内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 弹出内容
     */
    children: _prop_types_15_7_2_prop_types_default.a.node
}, nav_popup_item__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    iconOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    hasArrow: _prop_types_15_7_2_prop_types_default.a.bool
}, nav_popup_item__temp);
nav_popup_item_PopupItem.displayName = 'PopupItem';


/* harmony default export */ var popup_item = (nav_popup_item_PopupItem);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/nav/index.js







nav.Item = nav_item;
nav.Group = nav_group;
nav.SubNav = sub_nav;
nav.PopupItem = popup_item;
nav.Divider = es_menu.Divider;

/* harmony default export */ var es_nav = (nav);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/number-picker/index.js





var number_picker__class, number_picker__temp;










/** NumberPicker */
var number_picker_NumberPicker = (number_picker__temp = number_picker__class = function (_React$Component) {
    inherits_default()(NumberPicker, _React$Component);

    function NumberPicker(props) {
        classCallCheck_default()(this, NumberPicker);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        var value = void 0;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }

        _this.state = {
            value: typeof value === 'undefined' ? '' : value,
            hasFocused: false
        };
        return _this;
    }

    NumberPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: nextProps.value === undefined ? '' : nextProps.value
            });
        }
    };

    NumberPicker.prototype.onChange = function onChange(value, e) {
        if (this.props.editable === true) {
            value = value.trim();
            // ignore space
            if (this.state.value === value) {
                return;
            }

            // in case of autoCorrect ('0.'=>0, '0.0'=>0) , we have these steps
            if (value) {
                // ignore when input start form '-'
                if (value === '-' || this.state.value === '-') {
                    this.setState({
                        value: value
                    });
                    return;
                }
                // ignore when next value = prev value.
                // ps: Number('0.')=0 ; Number('0.0')=0;
                // but take care of Number('')=0;
                if (Number(this.state.value) === Number(value)) {
                    this.setState({
                        value: value
                    });
                    return;
                }
                // ignore when value < min (because number is inputted one by one)
                if (!isNaN(value) && Number(value) < this.props.min) {
                    this.setState({
                        value: value
                    });
                    return;
                }
            }

            this.setInputValue(value, e);
        }
    };

    /**
     * @param {Float} currentValue correct value
     * @param {String} oldValue input value
     */


    NumberPicker.prototype.onCorrect = function onCorrect(currentValue, oldValue) {
        this.props.onCorrect({
            currentValue: currentValue,
            oldValue: oldValue
        });
    };

    NumberPicker.prototype.onKeyDown = function onKeyDown(e) {
        var _props;

        if (e.keyCode === 38) {
            this.up(e);
        } else if (e.keyCode === 40) {
            this.down(e);
        }

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }

        (_props = this.props).onKeyDown.apply(_props, [e].concat(args));
    };

    NumberPicker.prototype.onFocus = function onFocus(e) {
        var onFocus = this.props.onFocus;

        this.setFocus(true);

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
        }

        onFocus && onFocus.apply(undefined, [e].concat(args));
    };

    NumberPicker.prototype.onBlur = function onBlur(e) {
        var value = this.getCurrentValidValue(e.target.value.trim());
        if (this.state.value !== value) {
            this.setValue(value, e);
        }
        this.setFocus(false);
        var onBlur = this.props.onBlur;

        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
        }

        onBlur && onBlur.apply(undefined, [e].concat(args));
    };

    NumberPicker.prototype.getCurrentValidValue = function getCurrentValidValue(value) {
        var val = value;
        var props = this.props;
        if (val === '') {
            val = '';
        } else if (!isNaN(val)) {
            val = Number(val);
            if (val < props.min) {
                val = props.min;
            }
            if (val > props.max) {
                val = props.max;
            }

            // precision=2  and input from 1.99 to 1.999, should stay with 1.99 not 2
            var strValue = '' + val;
            var pointPos = strValue.indexOf('.');
            var cutPos = pointPos + 1 + this.getPrecision();
            if (pointPos !== -1 && strValue.length > cutPos) {
                val = Number(strValue.substr(0, cutPos));
            }
        } else {
            val = this.state.value;
        }

        if ('' + val !== '' + value) {
            this.onCorrect(val, value);
        }

        return val;
    };

    NumberPicker.prototype.setValue = function setValue(v, e, triggerType) {
        if (!('value' in this.props)) {
            this.setState({
                value: v
            });
        }

        this.props.onChange(isNaN(v) || v === '' ? undefined : v, extends_default()({}, e, { triggerType: triggerType }));
    };

    NumberPicker.prototype.setInputValue = function setInputValue(v, e) {
        var value = this.getCurrentValidValue(v);
        if (this.state.value !== value) {
            this.setValue(value, e);
        }
    };

    NumberPicker.prototype.setFocus = function setFocus(status) {
        var format = this.props.format;
        // Only trigger `setState` if `format` is settled to avoid unnecessary rendering

        if (typeof format === 'function') {
            this.setState({
                hasFocused: status
            });
        }
    };

    NumberPicker.prototype.getPrecision = function getPrecision() {
        var props = this.props;
        var stepString = props.step.toString();
        if (stepString.indexOf('e-') >= 0) {
            return parseInt(stepString.slice(stepString.indexOf('e-')), 10);
        }
        var precision = 0;
        if (stepString.indexOf('.') >= 0) {
            precision = stepString.length - stepString.indexOf('.') - 1;
        }

        return Math.max(precision, this.props.precision);
    };

    NumberPicker.prototype.getPrecisionFactor = function getPrecisionFactor() {
        var precision = this.getPrecision();
        return Math.pow(10, precision);
    };

    NumberPicker.prototype.upStep = function upStep(val) {
        var _props2 = this.props,
            step = _props2.step,
            min = _props2.min;

        var precisionFactor = this.getPrecisionFactor();
        var result = void 0;
        if (typeof val === 'number') {
            result = (precisionFactor * val + precisionFactor * step) / precisionFactor;

            result = this.hackChrome(result);
        } else {
            result = min === -Infinity ? step : min;
        }
        return result;
    };

    NumberPicker.prototype.downStep = function downStep(val) {
        var _props3 = this.props,
            step = _props3.step,
            min = _props3.min;

        var precisionFactor = this.getPrecisionFactor();
        var result = void 0;
        if (typeof val === 'number') {
            result = (precisionFactor * val - precisionFactor * step) / precisionFactor;

            result = this.hackChrome(result);
        } else {
            result = min === -Infinity ? -step : min;
        }
        return result;
    };

    /**
     * fix bug in chrome browser
     * 0.28 + 0.01 = 0.29000000000000004
     * 0.29 - 0.01 = 0.27999999999999997
     * @param {Number} value value
     */


    NumberPicker.prototype.hackChrome = function hackChrome(value) {
        var precision = this.getPrecision();
        if (precision > 0) {
            return Number(Number(value).toFixed(precision));
        }
        return value;
    };

    NumberPicker.prototype.step = function step(type, e) {
        if (e) {
            e.preventDefault();
        }

        var _props4 = this.props,
            disabled = _props4.disabled,
            min = _props4.min,
            max = _props4.max;

        if (disabled) {
            return;
        }

        var value = this.state.value;
        if (isNaN(value)) {
            return;
        }

        var val = this[type + 'Step'](value);
        if (val > max) {
            val = max;
        }
        if (val < min) {
            val = min;
        }
        this.setValue(val, e, type);
    };

    NumberPicker.prototype.down = function down(e) {
        this.step('down', e);
    };

    NumberPicker.prototype.up = function up(e) {
        this.step('up', e);
    };

    NumberPicker.prototype.renderValue = function renderValue() {
        var _state = this.state,
            value = _state.value,
            hasFocused = _state.hasFocused;
        var format = this.props.format;

        return typeof format === 'function' && !hasFocused ? format(value) : value;
    };

    NumberPicker.prototype.focus = function focus() {
        this.inputRef.getInstance().focus();
    };

    NumberPicker.prototype.saveInputRef = function saveInputRef(ref) {
        this.inputRef = ref;
    };

    NumberPicker.prototype.handleMouseDown = function handleMouseDown(e) {
        e.preventDefault();
    };

    NumberPicker.prototype.render = function render() {
        var _classNames;

        var _props5 = this.props,
            type = _props5.type,
            prefix = _props5.prefix,
            disabled = _props5.disabled,
            style = _props5.style,
            className = _props5.className,
            size = _props5.size,
            max = _props5.max,
            min = _props5.min,
            autoFocus = _props5.autoFocus,
            editable = _props5.editable,
            state = _props5.state,
            upBtnProps = _props5.upBtnProps,
            downBtnProps = _props5.downBtnProps;


        var prefixCls = prefix + 'number-picker';

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefixCls] = true, _classNames[prefixCls + '-' + this.props.type] = this.props.type, _classNames['' + prefix + size] = true, _classNames[className] = className, _classNames));

        var upDisabled = false;
        var downDisabled = false;
        var value = this.state.value;
        if (!isNaN(value)) {
            var val = Number(value);
            if (val >= max) {
                upDisabled = true;
            }
            if (val <= min) {
                downDisabled = true;
            }
        }

        var innerAfter = null,
            innerAfterClassName = null,
            addonBefore = null,
            addonAfter = null;
        if (type === 'normal') {
            innerAfter = [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, upBtnProps, { onMouseDown: this.handleMouseDown, disabled: disabled || upDisabled, onClick: this.up.bind(this), key: '0' }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { size: 'xxs', type: 'arrow-up' })
            ), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, downBtnProps, { onMouseDown: this.handleMouseDown, disabled: disabled || downDisabled, onClick: this.down.bind(this), key: '1' }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { size: 'xxs', type: 'arrow-down' })
            )];
            innerAfterClassName = prefixCls + '-handler';
        } else {
            addonBefore = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, downBtnProps, { size: size, disabled: disabled || downDisabled, onClick: this.down.bind(this) }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'minus', size: 'xs' })
            );
            addonAfter = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, upBtnProps, { size: size, disabled: disabled || upDisabled, onClick: this.up.bind(this) }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'add', size: 'xs' })
            );
        }

        var others = util_obj.pickOthers(NumberPicker.propTypes, this.props);
        var dataAttrs = util_obj.pickAttrsWith(this.props, 'data-');

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({ className: cls, style: style }, dataAttrs),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, others, {
                'aria-valuemax': max !== Infinity ? max : undefined,
                'aria-valuemin': min !== -Infinity ? min : undefined,
                state: state === 'error' ? 'error' : null,
                onBlur: this.onBlur.bind(this),
                onFocus: this.onFocus.bind(this),
                onKeyDown: this.onKeyDown.bind(this),
                autoFocus: autoFocus,
                readOnly: !editable,
                value: this.renderValue(),
                disabled: disabled,
                size: size,
                onChange: this.onChange.bind(this),
                ref: this.saveInputRef.bind(this),
                innerAfter: innerAfter,
                innerAfterClassName: innerAfterClassName,
                addonBefore: addonBefore,
                addonAfter: addonAfter
            }))
        );
    };

    return NumberPicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), number_picker__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 设置类型
     * @enumdesc 普通, 内联
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'inline']),
    /**
     * 大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'medium']),
    /**
     * 当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 步长
     */
    step: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 保留小数点后位数
     */
    precision: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 用户是否可以输入
     */
    editable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自动焦点
     */
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 数值被改变的事件
     * @param {Number} value 数据
     * @param {Event} e DOM事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 键盘按下
     */
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 焦点获得
     */
    onFocus: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 焦点失去
     */
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 数值订正后的回调
     * @param {Object} obj {currentValue,oldValue:String}
     */
    onCorrect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 最大值
     */
    max: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 最小值
     */
    min: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 自定义class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error']),
    /**
     * 格式化当前值
     * @param {Number} value
     * @return {String|Number}
     */
    format: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 增加按钮的props
     */
    upBtnProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 减少按钮的props
     */
    downBtnProps: _prop_types_15_7_2_prop_types_default.a.object
}, number_picker__class.defaultProps = {
    prefix: 'next-',
    max: Infinity,
    min: -Infinity,
    type: 'normal',
    size: 'medium',
    step: 1,
    style: {},
    precision: 0,
    editable: true,
    onChange: func.noop,
    onKeyDown: func.noop,
    onBlur: func.noop,
    onCorrect: func.noop
}, number_picker__temp);
number_picker_NumberPicker.displayName = 'NumberPicker';


/* harmony default export */ var number_picker = (config_provider.config(number_picker_NumberPicker));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/pagination/pagination.js






var pagination__class, pagination__temp;












var pagination_Option = es_select.Option;

var pagination_noop = function noop() {};

/**
 * Pagination
 */
var pagination_Pagination = (pagination__temp = pagination__class = function (_Component) {
    inherits_default()(Pagination, _Component);

    function Pagination(props, context) {
        classCallCheck_default()(this, Pagination);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        var current = props.current,
            defaultCurrent = props.defaultCurrent,
            total = props.total,
            pageSize = props.pageSize;

        _this.state = {
            current: _this.correctCurrent(current || defaultCurrent, total, pageSize),
            currentPageSize: pageSize
        };
        _this.onJump = _this.onJump.bind(_this);
        return _this;
    }

    Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var current = nextProps.current,
            total = nextProps.total,
            pageSize = nextProps.pageSize;


        var st = {};
        var newCurrent = this.correctCurrent(current || this.state.current, total, pageSize);
        if (this.state.current !== newCurrent) {
            st.current = newCurrent;
        }
        if (this.state.currentPageSize !== pageSize) {
            st.currentPageSize = pageSize;
        }

        if (Object.keys(st).length) {
            this.setState(st);
        }
    };

    Pagination.prototype.correctCurrent = function correctCurrent(currentPage, total, currentPageSize) {
        var totalPage = this.getTotalPage(total, currentPageSize);
        return currentPage > totalPage ? totalPage : currentPage;
    };

    Pagination.prototype.getTotalPage = function getTotalPage(total, currentPageSize) {
        var totalPage = Math.ceil(total / currentPageSize);
        return totalPage <= 0 ? 1 : totalPage;
    };

    Pagination.prototype.onJump = function onJump(e) {
        var total = this.props.total;
        var _state = this.state,
            current = _state.current,
            currentPageSize = _state.currentPageSize;

        var totalPage = this.getTotalPage(total, currentPageSize);
        var value = parseInt(this.inputValue, 10);
        if (typeof value === 'number' && value >= 1 && value <= totalPage && value !== current) {
            this.onPageItemClick(value, e);
        }
    };

    Pagination.prototype.onPageItemClick = function onPageItemClick(page, e) {
        var _this2 = this;

        if (!('current' in this.props)) {
            this.setState({
                current: page
            }, function () {
                _this2.props.onChange(page, e);
            });
        } else {
            this.props.onChange(page, e);
        }
    };

    Pagination.prototype.onInputChange = function onInputChange(value) {
        this.inputValue = value;
    };

    Pagination.prototype.onSelectSize = function onSelectSize(pageSize) {
        var newState = {
            currentPageSize: pageSize
        };

        var totalPage = this.getTotalPage(this.props.total, pageSize);
        if (this.state.current > totalPage) {
            newState.current = totalPage;
        }

        this.setState(newState);
        this.props.onPageSizeChange(pageSize);
    };

    Pagination.prototype.renderPageTotal = function renderPageTotal() {
        var _props = this.props,
            prefix = _props.prefix,
            total = _props.total,
            totalRender = _props.totalRender;
        var _state2 = this.state,
            currentPageSize = _state2.currentPageSize,
            current = _state2.current;

        var range = [(current - 1) * currentPageSize + 1, current * currentPageSize];

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'pagination-total' },
            totalRender(total, range)
        );
    };

    Pagination.prototype.renderPageItem = function renderPageItem(index) {
        var _cx;

        var _props2 = this.props,
            prefix = _props2.prefix,
            size = _props2.size,
            link = _props2.link,
            pageNumberRender = _props2.pageNumberRender,
            total = _props2.total,
            pageSize = _props2.pageSize,
            locale = _props2.locale;
        var current = this.state.current;


        var totalPage = this.getTotalPage(total, pageSize);
        var isCurrent = parseInt(index, 10) === current;
        var props = {
            size: size,
            className: _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'pagination-item'] = true, _cx[prefix + 'current'] = isCurrent, _cx)),
            onClick: isCurrent ? pagination_noop : this.onPageItemClick.bind(this, index)
        };
        if (link) {
            props.component = 'a';
            props.href = link.replace('{page}', index);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({
                'aria-label': util_str.template(locale.total, { current: index, total: totalPage })
            }, props, {
                key: index }),
            pageNumberRender(index)
        );
    };

    Pagination.prototype.renderPageFirst = function renderPageFirst(current) {
        var _cx2;

        var _props3 = this.props,
            prefix = _props3.prefix,
            size = _props3.size,
            shape = _props3.shape,
            locale = _props3.locale;


        var isFirst = current <= 1;
        var props = {
            disabled: isFirst,
            size: size,
            className: _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'pagination-item'] = true, _cx2[prefix + 'prev'] = true, _cx2)),
            onClick: this.onPageItemClick.bind(this, current - 1)
        };

        var icon = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left' });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({}, props, { 'aria-label': util_str.template(locale.labelPrev, { current: current }) }),
            icon,
            shape === 'arrow-only' || shape === 'arrow-prev-only' || shape === 'no-border' ? '' : locale.prev
        );
    };

    Pagination.prototype.renderPageLast = function renderPageLast(current, totalPage) {
        var _cx3;

        var _props4 = this.props,
            prefix = _props4.prefix,
            size = _props4.size,
            shape = _props4.shape,
            locale = _props4.locale;


        var isLast = current >= totalPage;
        var props = {
            disabled: isLast,
            size: size,
            className: _classnames_2_2_6_classnames_default()((_cx3 = {}, _cx3[prefix + 'pagination-item'] = true, _cx3[prefix + 'next'] = true, _cx3)),
            onClick: this.onPageItemClick.bind(this, current + 1)
        };

        var icon = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({}, props, { 'aria-label': util_str.template(locale.labelNext, { current: current }) }),
            shape === 'arrow-only' || shape === 'no-border' ? '' : locale.next,
            icon
        );
    };

    Pagination.prototype.renderPageEllipsis = function renderPageEllipsis(idx) {
        var prefix = this.props.prefix;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'pagination-ellipsis', type: 'ellipsis', key: 'ellipsis-' + idx });
    };

    Pagination.prototype.renderPageJump = function renderPageJump() {
        var _this3 = this;

        var _props5 = this.props,
            prefix = _props5.prefix,
            size = _props5.size,
            locale = _props5.locale;

        /* eslint-disable react/jsx-key */

        return [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'pagination-jump-text' },
            locale.goTo
        ), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, {
            className: prefix + 'pagination-jump-input',
            type: 'text',
            size: size,
            onChange: this.onInputChange.bind(this),
            onKeyDown: function onKeyDown(e) {
                if (e.keyCode === KEYCODE.ENTER) {
                    _this3.onJump(e);
                }
            } }), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'pagination-jump-text' },
            locale.page
        ), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            { className: prefix + 'pagination-jump-go', size: size, onClick: this.onJump },
            locale.go
        )];
        /* eslint-enable react/jsx-key */
    };

    Pagination.prototype.renderPageDisplay = function renderPageDisplay(current, totalPage) {
        var _props6 = this.props,
            prefix = _props6.prefix,
            pageNumberRender = _props6.pageNumberRender;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'pagination-display' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'em',
                null,
                pageNumberRender(current)
            ),
            '/',
            pageNumberRender(totalPage)
        );
    };

    Pagination.prototype.renderPageList = function renderPageList(current, totalPage) {
        var _props7 = this.props,
            prefix = _props7.prefix,
            pageShowCount = _props7.pageShowCount;

        var pages = [];

        if (totalPage <= pageShowCount) {
            for (var i = 1; i <= totalPage; i++) {
                pages.push(this.renderPageItem(i));
            }
        } else {
            // 除去第一页，最后一页以及当前页，剩下的页数
            var othersCount = pageShowCount - 3;
            var halfCount = parseInt(othersCount / 2, 10);
            var start = void 0,
                end = void 0;

            pages.push(this.renderPageItem(1));

            start = current - halfCount;
            end = current + halfCount;
            if (start <= 1) {
                start = 2;
                end = start + othersCount;
            }
            if (start > 2) {
                pages.push(this.renderPageEllipsis(1));
            }
            if (end >= totalPage - 1) {
                end = totalPage - 1;
                start = totalPage - 1 - othersCount;
            }
            for (var j = start; j <= end; j++) {
                pages.push(this.renderPageItem(j));
            }
            if (end < totalPage - 1) {
                pages.push(this.renderPageEllipsis(2));
            }

            pages.push(this.renderPageItem(totalPage));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'pagination-list' },
            pages
        );
    };

    Pagination.prototype.renderPageSizeSelector = function renderPageSizeSelector() {
        var _props8 = this.props,
            prefix = _props8.prefix,
            pageSizeSelector = _props8.pageSizeSelector,
            locale = _props8.locale;

        var pageSizeSpan = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'pagination-size-selector-title' },
            locale.pageSize
        );

        switch (pageSizeSelector) {
            case 'filter':
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'pagination-size-selector' },
                    pageSizeSpan,
                    this.renderPageSizeFilter()
                );
            case 'dropdown':
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'pagination-size-selector' },
                    pageSizeSpan,
                    this.renderPageSizeDropdown()
                );
            default:
                return null;
        }
    };

    Pagination.prototype.renderPageSizeFilter = function renderPageSizeFilter() {
        var _this4 = this;

        var _props9 = this.props,
            prefix = _props9.prefix,
            size = _props9.size,
            pageSizeList = _props9.pageSizeList;
        var currentPageSize = this.state.currentPageSize;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'pagination-size-selector-filter' },
            pageSizeList.map(function (item, index) {
                var _cx4;

                var label = void 0;
                var pageSize = void 0;
                if (item.value) {
                    // {label: '', value: 5}
                    label = item.label;
                    pageSize = item.value;
                } else {
                    // number
                    label = pageSize = item;
                }
                var classes = _classnames_2_2_6_classnames_default()((_cx4 = {}, _cx4[prefix + 'pagination-size-selector-btn'] = true, _cx4[prefix + 'current'] = pageSize === currentPageSize, _cx4));

                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_button,
                    { key: index,
                        text: true,
                        size: size,
                        className: classes,
                        onClick: pageSize !== currentPageSize ? _this4.onSelectSize.bind(_this4, pageSize) : null },
                    label
                );
            })
        );
    };

    Pagination.prototype.renderPageSizeDropdown = function renderPageSizeDropdown() {
        var _props10 = this.props,
            prefix = _props10.prefix,
            size = _props10.size,
            pageSizeList = _props10.pageSizeList,
            selectPopupContiner = _props10.selectPopupContiner;
        var currentPageSize = this.state.currentPageSize;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_select,
            { className: prefix + 'pagination-size-selector-dropdown',
                popupClassName: prefix + 'pagination-size-selector-popup',
                popupContainer: selectPopupContiner,
                autoWidth: true,
                size: size,
                value: currentPageSize,
                onChange: this.onSelectSize.bind(this) },
            pageSizeList.map(function (item, index) {
                var label = void 0;
                var pageSize = void 0;
                if (item.value) {
                    // {label: '', value: 5}
                    label = item.label;
                    pageSize = item.value;
                } else {
                    // number
                    label = pageSize = item;
                }
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    pagination_Option,
                    { key: index, value: pageSize },
                    label
                );
            })
        );
    };

    Pagination.prototype.render = function render() {
        var _cx5,
            _this5 = this;

        /* eslint-disable no-unused-vars */
        var _props11 = this.props,
            prefix = _props11.prefix,
            pure = _props11.pure,
            rtl = _props11.rtl,
            type = _props11.type,
            size = _props11.size,
            shape = _props11.shape,
            className = _props11.className,
            total = _props11.total,
            totalRender = _props11.totalRender,
            pageSize = _props11.pageSize,
            pageSizeSelector = _props11.pageSizeSelector,
            pageSizeList = _props11.pageSizeList,
            pageSizePosition = _props11.pageSizePosition,
            useFloatLayout = _props11.useFloatLayout,
            onPageSizeChange = _props11.onPageSizeChange,
            hideOnlyOnePage = _props11.hideOnlyOnePage,
            showJump = _props11.showJump,
            locale = _props11.locale,
            current = _props11.current,
            defaultCurrent = _props11.defaultCurrent,
            pageShowCount = _props11.pageShowCount,
            pageNumberRender = _props11.pageNumberRender,
            link = _props11.link,
            onChange = _props11.onChange,
            selectPopupContiner = _props11.selectPopupContiner,
            others = objectWithoutProperties_default()(_props11, ['prefix', 'pure', 'rtl', 'type', 'size', 'shape', 'className', 'total', 'totalRender', 'pageSize', 'pageSizeSelector', 'pageSizeList', 'pageSizePosition', 'useFloatLayout', 'onPageSizeChange', 'hideOnlyOnePage', 'showJump', 'locale', 'current', 'defaultCurrent', 'pageShowCount', 'pageNumberRender', 'link', 'onChange', 'selectPopupContiner']);
        /* eslint-enable */


        var _state3 = this.state,
            currentPage = _state3.current,
            currentPageSize = _state3.currentPageSize;

        var totalPage = this.getTotalPage(total, currentPageSize);
        var pageFirst = this.renderPageFirst(currentPage);
        var pageLast = this.renderPageLast(currentPage, totalPage);
        var sizeSelector = this.renderPageSizeSelector();
        var isStart = pageSizePosition === 'start';

        var classes = _classnames_2_2_6_classnames_default()((_cx5 = {}, _cx5[prefix + 'pagination'] = true, _cx5['' + prefix + size] = size, _cx5['' + prefix + type] = type, _cx5['' + prefix + shape] = shape, _cx5[prefix + 'start'] = !!pageSizeSelector && isStart && useFloatLayout, _cx5[prefix + 'end'] = !!pageSizeSelector && !isStart && useFloatLayout, _cx5[prefix + 'hide'] = totalPage <= 1 && hideOnlyOnePage, _cx5[className] = !!className, _cx5));

        if (rtl) {
            others.dir = 'rtl';
        }

        var buildComponent = function buildComponent() {
            for (var _len = arguments.length, coms = Array(_len), _key = 0; _key < _len; _key++) {
                coms[_key] = arguments[_key];
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                extends_default()({ className: classes }, others),
                isStart && sizeSelector,
                totalRender ? _this5.renderPageTotal() : null,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'pagination-pages' },
                    coms.map(function (com, index) {
                        return com && external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(com, { key: index });
                    })
                ),
                !isStart && sizeSelector
            );
        };

        switch (type) {
            case 'mini':
                return buildComponent(pageFirst, pageLast);
            case 'simple':
                {
                    var pageDisplay = this.renderPageDisplay(currentPage, totalPage);
                    return buildComponent(pageFirst, pageDisplay, pageLast);
                }
            case 'normal':
                {
                    var pageList = this.renderPageList(currentPage, totalPage);
                    var _pageDisplay = showJump && total > pageSize * pageShowCount ? this.renderPageDisplay(currentPage, totalPage) : null;
                    var pageJump = showJump && total > pageSize * pageShowCount ? this.renderPageJump(currentPage, totalPage) : null;
                    return buildComponent.apply(undefined, [pageFirst, pageList, pageLast, _pageDisplay].concat(pageJump));
                }
            default:
                return null;
        }
    };

    return Pagination;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), pagination__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义国际化文案对象
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 分页组件类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'simple', 'mini']),
    /**
     * 前进后退按钮样式
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'arrow-only', 'arrow-prev-only', 'no-border']),
    /**
     * 分页组件大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * （受控）当前页码
     */
    current: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * （非受控）初始页码
     */
    defaultCurrent: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 页码发生改变时的回调函数
     * @param {Number} current 改变后的页码数
     * @param {Object} e 点击事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 总记录数
     */
    total: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 总数的渲染函数
     * @param {Number} total 总数
     * @param {Array} range 当前数据在总数中的区间
     */
    totalRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 页码显示的数量，更多的使用...代替
     */
    pageShowCount: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 一页中的记录数
     */
    pageSize: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 每页显示选择器类型
     */
    pageSizeSelector: _prop_types_15_7_2_prop_types_default.a.oneOf([false, 'filter', 'dropdown']),
    /**
     * 每页显示选择器可选值
     */
    pageSizeList: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number), _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.shape({
        label: _prop_types_15_7_2_prop_types_default.a.string,
        value: _prop_types_15_7_2_prop_types_default.a.number
    }))]),
    /**
     * 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染
     * @param {Number} index 分页的页码，从1开始
     * @return {ReactNode} 返回渲染结果
    */
    pageNumberRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 每页显示选择器在组件中的位置
     */
    pageSizePosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['start', 'end']),
    /**
     * 存在每页显示选择器时是否使用浮动布局
     */
    useFloatLayout: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 每页显示记录数量改变时的回调函数
     * @param {Number} pageSize 改变后的每页显示记录数
     */
    onPageSizeChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 当分页数为1时，是否隐藏分页器
     */
    hideOnlyOnePage: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域
     */
    showJump: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：http://xxx.com/{page}
     */
    link: _prop_types_15_7_2_prop_types_default.a.string,
    selectPopupContiner: _prop_types_15_7_2_prop_types_default.a.func
}, pagination__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    rtl: false,
    locale: zh_cn.Pagination,
    type: 'normal',
    shape: 'normal',
    size: 'medium',
    defaultCurrent: 1,
    onChange: pagination_noop,
    pageSize: 10,
    pageSizeSelector: false,
    pageSizeList: [5, 10, 20],
    pageSizePosition: 'start',
    onPageSizeChange: pagination_noop,
    useFloatLayout: false,
    total: 100,
    pageShowCount: 5,
    hideOnlyOnePage: false,
    showJump: true,
    pageNumberRender: function pageNumberRender(index) {
        return index;
    },
    selectPopupContiner: function selectPopupContiner(node) {
        return node.parentNode;
    }
}, pagination__temp);
pagination_Pagination.displayName = 'Pagination';


/* harmony default export */ var pagination = (config_provider.config(pagination_Pagination));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/pagination/index.js


/* harmony default export */ var es_pagination = (pagination);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/paragraph/index.js






var paragraph__class, paragraph__temp;






/* eslint-disable */

/** Paragraph */
var paragraph_Paragraph = (paragraph__temp = paragraph__class = function (_React$Component) {
    inherits_default()(Paragraph, _React$Component);

    function Paragraph() {
        classCallCheck_default()(this, Paragraph);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Paragraph.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            type = _props.type,
            size = _props.size,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'type', 'size']);

        var cls = _classnames_2_2_6_classnames_default()(prefix + 'paragraph', type === 'short' ? prefix + 'paragraph-short' : prefix + 'paragraph-long', size === 'small' ? prefix + 'paragraph-small' : prefix + 'paragraph-medium', className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: cls }),
            this.props.children
        );
    };

    return Paragraph;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), paragraph__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 额外的样式名 会附加到 root dom 上
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 什么方式展示段落
     * @enumdesc 展示所有文本, 展示三行以内（非强制）
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['long', 'short']),
    /**
     * 组件大小。 
     * @enumdesc 中号, 小号
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['medium', 'small'])
}, paragraph__class.defaultProps = {
    prefix: 'next-',
    type: 'long',
    size: 'medium'
}, paragraph__temp);
paragraph_Paragraph.displayName = 'Paragraph';


/* harmony default export */ var paragraph = (config_provider.config(paragraph_Paragraph));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/progress/view/progress-line.js






var progress_line__class, progress_line__temp;





var progress_line_Line = (progress_line__temp = progress_line__class = function (_React$PureComponent) {
    inherits_default()(Line, _React$PureComponent);

    function Line() {
        classCallCheck_default()(this, Line);

        return possibleConstructorReturn_default()(this, _React$PureComponent.apply(this, arguments));
    }

    Line.prototype.render = function render() {
        var _classNames, _classNames2;

        var _props = this.props,
            prefix = _props.prefix,
            size = _props.size,
            state = _props.state,
            color = _props.color,
            percent = _props.percent,
            progressive = _props.progressive,
            hasBorder = _props.hasBorder,
            textRender = _props.textRender,
            className = _props.className,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'size', 'state', 'color', 'percent', 'progressive', 'hasBorder', 'textRender', 'className', 'rtl']);

        var suffixText = textRender(percent, { rtl: rtl });

        var wrapCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'progress-line'] = true, _classNames[prefix + 'progress-line-show-info'] = suffixText, _classNames[prefix + 'progress-line-show-border'] = hasBorder, _classNames['' + (prefix + size)] = size, _classNames[className] = className, _classNames));
        var lineCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'progress-line-overlay'] = true, _classNames2[prefix + 'progress-line-overlay-' + state] = !color && !progressive && state, _classNames2[prefix + 'progress-line-overlay-started'] = !color && progressive && percent <= 30, _classNames2[prefix + 'progress-line-overlay-middle'] = !color && progressive && percent > 30 && percent < 80, _classNames2[prefix + 'progress-line-overlay-finishing'] = !color && progressive && percent >= 80, _classNames2));

        var lineStyle = { width: percent + '%', backgroundColor: color };

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({
                dir: rtl ? 'rtl' : undefined,
                role: 'progressbar',
                'aria-valuenow': percent,
                'aria-valuemin': '0',
                'aria-valuemax': '100',
                className: wrapCls
            }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'progress-line-container' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'progress-line-underlay' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: lineCls, style: lineStyle })
                )
            ),
            suffixText ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'progress-line-text' },
                suffixText
            ) : null
        );
    };

    return Line;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.PureComponent), progress_line__class.propTypes = {
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    percent: _prop_types_15_7_2_prop_types_default.a.number,
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'success', 'error']),
    progressive: _prop_types_15_7_2_prop_types_default.a.bool,
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    textRender: _prop_types_15_7_2_prop_types_default.a.func,
    color: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.object])
}, progress_line__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/progress/view/progress-circle.js






var progress_circle__class, progress_circle__temp;





var VIEWBOX_WIDTH = 100; // width of viewBox
var HALF_VIEWBOX_WIDTH = VIEWBOX_WIDTH / 2;
var DEFAULT_STROKE_WIDTH = 8;

var viewBox = '0 0 ' + VIEWBOX_WIDTH + ' ' + VIEWBOX_WIDTH;

var progress_circle_Circle = (progress_circle__temp = progress_circle__class = function (_Component) {
    inherits_default()(Circle, _Component);

    function Circle(props) {
        classCallCheck_default()(this, Circle);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this._underlayRefHandler = function (ref) {
            _this.underlay = ref;
        };

        _this._overlayRefHandler = function (ref) {
            _this.overlay = ref;
        };

        _this.state = {
            underlayStrokeWidth: DEFAULT_STROKE_WIDTH,
            overlayStrokeWidth: DEFAULT_STROKE_WIDTH
        };
        return _this;
    }

    Circle.prototype.componentDidMount = function componentDidMount() {
        if (this.underlay && this.overlay) {
            // eslint-disable-next-line
            this.setState({
                underlayStrokeWidth: this._getCssValue(this.underlay, 'stroke-width') || DEFAULT_STROKE_WIDTH,
                overlayStrokeWidth: this._getCssValue(this.overlay, 'stroke-width') || DEFAULT_STROKE_WIDTH
            });
        }
    };

    Circle.prototype._getCssValue = function _getCssValue(dom, name) {
        var css = window.getComputedStyle(dom).getPropertyValue(name);
        var regExp = /(\d*)px/g;
        var result = regExp.exec(css);

        return Array.isArray(result) ? Number(result[1]) : 0;
    };

    Circle.prototype._computeOverlayStrokeDashOffset = function _computeOverlayStrokeDashOffset() {
        var _state = this.state,
            underlayStrokeWidth = _state.underlayStrokeWidth,
            overlayStrokeWidth = _state.overlayStrokeWidth;

        var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;
        var overlayLen = Math.PI * 2 * overlayRadius;
        return (VIEWBOX_WIDTH - this.props.percent) / VIEWBOX_WIDTH * overlayLen;
    };

    Circle.prototype._getPath = function _getPath(radius) {
        return 'M ' + HALF_VIEWBOX_WIDTH + ',' + HALF_VIEWBOX_WIDTH + ' m 0,-' + radius + ' a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + ' a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;
    };

    Circle.prototype.render = function render() {
        var _classNames, _classNames2;

        var _props = this.props,
            prefix = _props.prefix,
            size = _props.size,
            state = _props.state,
            percent = _props.percent,
            className = _props.className,
            textRender = _props.textRender,
            progressive = _props.progressive,
            color = _props.color,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'size', 'state', 'percent', 'className', 'textRender', 'progressive', 'color', 'rtl']);

        var _state2 = this.state,
            underlayStrokeWidth = _state2.underlayStrokeWidth,
            overlayStrokeWidth = _state2.overlayStrokeWidth;

        // underlay path

        var underlayRadius = HALF_VIEWBOX_WIDTH - underlayStrokeWidth / 2;
        var underlayPath = this._getPath(underlayRadius);

        // overlay path (为居中，减去相对于underlay的宽度)
        var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;
        var overlayPath = this._getPath(overlayRadius);
        var overlayLen = Math.PI * 2 * overlayRadius;
        var overlayStrokeDasharray = overlayLen + 'px ' + overlayLen + 'px';
        var overlayStrokeDashoffset = this._computeOverlayStrokeDashOffset() + 'px';

        var suffixText = textRender(percent, { rtl: rtl });

        var wrapCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'progress-circle'] = true, _classNames[prefix + 'progress-circle-show-info'] = suffixText, _classNames['' + (prefix + size)] = size, _classNames[className] = className, _classNames));

        var pathCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'progress-circle-overlay'] = true, _classNames2[prefix + 'progress-circle-overlay-' + state] = !color && !progressive && state, _classNames2[prefix + 'progress-circle-overlay-started'] = !color && progressive && percent <= 30, _classNames2[prefix + 'progress-circle-overlay-middle'] = !color && progressive && percent > 30 && percent < 80, _classNames2[prefix + 'progress-circle-overlay-finishing'] = !color && progressive && percent >= 80, _classNames2));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({
                className: wrapCls,
                dir: rtl ? 'rtl' : undefined,
                role: 'progressbar',
                'aria-valuenow': percent,
                'aria-valuemin': '0',
                'aria-valuemax': '100'
            }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'svg',
                { className: prefix + 'progress-circle-container', viewBox: viewBox },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('path', { className: prefix + 'progress-circle-underlay', d: underlayPath, fillOpacity: '0', ref: this._underlayRefHandler }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('path', {
                    className: pathCls,
                    d: overlayPath,
                    fillOpacity: '0',
                    strokeDasharray: overlayStrokeDasharray,
                    strokeDashoffset: overlayStrokeDashoffset,
                    ref: this._overlayRefHandler,
                    stroke: color
                })
            ),
            suffixText ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'progress-circle-text' },
                suffixText
            ) : null
        );
    };

    return Circle;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), progress_circle__class.propTypes = {
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    percent: _prop_types_15_7_2_prop_types_default.a.number,
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'success', 'error']),
    progressive: _prop_types_15_7_2_prop_types_default.a.bool,
    textRender: _prop_types_15_7_2_prop_types_default.a.func,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    color: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, progress_circle__temp);
progress_circle_Circle.displayName = 'Circle';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/progress/view/progress.js






var progress__class, progress__temp;






/**
 * Progress
 */
var progress_Progress = (progress__temp = progress__class = function (_Component) {
  inherits_default()(Progress, _Component);

  function Progress() {
    classCallCheck_default()(this, Progress);

    return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
  }

  Progress.prototype.render = function render() {
    var _props = this.props,
        shape = _props.shape,
        hasBorder = _props.hasBorder,
        others = objectWithoutProperties_default()(_props, ['shape', 'hasBorder']);

    return shape === 'circle' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress_circle_Circle, others) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress_line_Line, extends_default()({}, others, { hasBorder: hasBorder }));
  };

  return Progress;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), progress__class.propTypes = {
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 形态
   */
  shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['circle', 'line']),
  /**
   * 尺寸
   */
  size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
  /**
   * 所占百分比
   */
  percent: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 进度状态, 显示优先级: color > progressive > state
   */
  state: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'success', 'error']),
  /**
   * 是否为色彩阶段变化模式, 显示优先级: color > progressive > state
   */
  progressive: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否添加 Border（只适用于 Line Progress)
   */
  hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 文本渲染函数
   * @param {Number} percent 当前的进度信息
   * @param {Object} option 额外的参数
   * @property {Boolean} option.rtl 是否在rtl 模式下渲染
   * @return {ReactNode} 返回文本节点
   */
  textRender: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * 进度条颜色, 显示优先级: color > progressive > state
   */
  color: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 背景色
   */
  backgroundColor: _prop_types_15_7_2_prop_types_default.a.string,
  rtl: _prop_types_15_7_2_prop_types_default.a.bool
}, progress__class.defaultProps = {
  prefix: 'next-',
  shape: 'line',
  state: 'normal',
  size: 'medium',
  percent: 0,
  progressive: false,
  hasBorder: false,
  textRender: function textRender(percent) {
    return Math.floor(percent) + '%';
  }
}, progress__class.contextTypes = {
  prefix: _prop_types_15_7_2_prop_types_default.a.string
}, progress__temp);
progress_Progress.displayName = 'Progress';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/progress/index.js





/* harmony default export */ var progress = (config_provider.config(progress_Progress, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'progressive', 'Progress');

            var _props = props,
                type = _props.type,
                others = objectWithoutProperties_default()(_props, ['type']);

            props = extends_default()({ progressive: type === 'progressive' }, others);
        }

        if ('showInfo' in props) {
            deprecated('showInfo', 'textRender', 'Progress');

            var _props2 = props,
                showInfo = _props2.showInfo,
                _others = objectWithoutProperties_default()(_props2, ['showInfo']);

            if (showInfo) {
                props = _others;
            } else {
                props = extends_default()({ textRender: function textRender() {
                        return false;
                    } }, _others);
            }
        }

        if ('suffix' in props) {
            deprecated('suffix', 'textRender', 'Progress');

            var _props3 = props,
                suffix = _props3.suffix,
                _others2 = objectWithoutProperties_default()(_props3, ['suffix']);

            props = extends_default()({ textRender: function textRender() {
                    return suffix;
                } }, _others2);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/utils.js
function inRange(value, range, min) {
    if (!Array.isArray(range)) {
        range = [min, range];
    }

    return value >= range[0] && value <= range[1];
}

function getPercent(min, max, value) {
    return (value - min) * 100 / (max - min);
}

function getPrecision(step) {
    var precision = 0;
    var stepString = step.toString();
    if (stepString.indexOf('.') !== -1) {
        precision = stepString.length - stepString.indexOf('.') - 1;
    }
    return precision;
}

function utils_isEqual(left, right) {
    if (Array.isArray(left)) {
        return left[0] === right[0] && left[1] === right[1];
    } else {
        return left === right;
    }
}

function getDragging(current, preValue) {
    var dragging = 'upper';

    if (current > preValue[1]) {
        dragging = 'upper';
    } else if (current < preValue[0]) {
        dragging = 'lower';
    } else {
        var mid = (preValue[0] + preValue[1]) / 2;

        dragging = current < mid ? 'lower' : 'upper';
    }

    return dragging;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/scale.js




var scale__class, scale__temp;






var scale_Scale = (scale__temp = scale__class = function (_React$Component) {
    inherits_default()(Scale, _React$Component);

    function Scale() {
        classCallCheck_default()(this, Scale);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Scale.prototype._renderItems = function _renderItems() {
        var _props = this.props,
            min = _props.min,
            max = _props.max,
            value = _props.value,
            prefix = _props.prefix,
            scales = _props.scales;

        var items = [];

        scales.forEach(function (scale, i) {
            var _classNames;

            var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range-scale-item'] = true, _classNames.activated = inRange(scale, value, min), _classNames));
            var left = getPercent(min, max, scale) + '%';

            items.push(
            // "key" is for https://fb.me/react-warning-keys
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: classes, style: { left: left }, key: i }));
        });

        return items;
    };

    Scale.prototype.render = function render() {
        var _classNames2;

        var prefix = this.props.prefix;

        var classes = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'range-scale'] = true, _classNames2));
        var items = this._renderItems();

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: classes },
            items
        );
    };

    return Scale;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), scale__class.propTypes = {
    min: _prop_types_15_7_2_prop_types_default.a.number,
    max: _prop_types_15_7_2_prop_types_default.a.number,
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    scales: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)
}, scale__class.defaultProps = {
    prefix: 'next-',
    min: 0,
    max: 100,
    value: 0
}, scale__temp);
scale_Scale.displayName = 'Scale';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/track.js




var track_Track = function Track(_ref) {
    var _classNames;

    var prefix = _ref.prefix;

    var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range-track'] = true, _classNames));
    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: classes });
};

track_Track.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
};

track_Track.defaultProps = {
    prefix: 'next-'
};

/* harmony default export */ var track = (track_Track);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/selected.js




var selected__class, selected__temp;






var selected_Selected = (selected__temp = selected__class = function (_React$Component) {
    inherits_default()(Selected, _React$Component);

    function Selected() {
        classCallCheck_default()(this, Selected);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Selected.prototype._getStyle = function _getStyle() {
        var _props = this.props,
            min = _props.min,
            max = _props.max,
            reverse = _props.reverse;
        var value = this.props.value;


        if (!Array.isArray(value)) {
            value = [min, value];
        }
        var width = (value[1] - value[0]) * 100 / (max - min);

        var style = {
            width: width + '%',
            left: getPercent(min, max, value[0]) + '%'
        };
        if (reverse) {
            style = {
                width: 100 - width + '%',
                left: getPercent(min, max, value[0]) + width + '%'
            };
        }
        return style;
    };

    Selected.prototype._getStyleLeft = function _getStyleLeft() {
        var _props2 = this.props,
            min = _props2.min,
            max = _props2.max;
        var value = this.props.value;


        if (!Array.isArray(value)) {
            value = [min, value];
        }

        var style = {
            width: getPercent(min, max, value[0]) + '%',
            left: 0
        };
        return style;
    };

    Selected.prototype._getStyleRight = function _getStyleRight() {
        var _props3 = this.props,
            min = _props3.min,
            max = _props3.max;
        var value = this.props.value;


        if (!Array.isArray(value)) {
            value = [min, value];
        }
        var width = (value[1] - value[0]) * 100 / (max - min);

        var style = {
            width: 100 - getPercent(min, max, value[0]) - width + '%',
            left: getPercent(min, max, value[0]) + width + '%'
        };
        return style;
    };

    Selected.prototype.render = function render() {
        var _classNames;

        var _props4 = this.props,
            prefix = _props4.prefix,
            slider = _props4.slider,
            reverse = _props4.reverse;

        var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range-selected'] = true, _classNames));
        var SeletedComps = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: classes, style: this._getStyle() });

        if (slider === 'double' && reverse) {
            SeletedComps = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                null,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: classes, style: this._getStyleLeft() }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: classes, style: this._getStyleRight() })
            );
        }

        return SeletedComps;
    };

    return Selected;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), selected__class.propTypes = {
    min: _prop_types_15_7_2_prop_types_default.a.number,
    max: _prop_types_15_7_2_prop_types_default.a.number,
    slider: _prop_types_15_7_2_prop_types_default.a.string,
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    reverse: _prop_types_15_7_2_prop_types_default.a.bool
}, selected__class.defaultProps = {
    prefix: 'next-',
    slider: 'single',
    min: 0,
    max: 100,
    value: 0,
    reverse: false
}, selected__temp);
selected_Selected.displayName = 'Selected';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/mark.js




var mark__class, mark__temp;






var mark_Mark = (mark__temp = mark__class = function (_React$Component) {
    inherits_default()(Mark, _React$Component);

    function Mark() {
        classCallCheck_default()(this, Mark);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Mark.prototype._renderItems = function _renderItems() {
        var _props = this.props,
            min = _props.min,
            max = _props.max,
            value = _props.value,
            prefix = _props.prefix,
            marks = _props.marks;

        var items = [];

        Object.keys(marks).forEach(function (mark, i) {
            var _classNames;

            var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range-mark-text'] = true, _classNames.activated = inRange(mark, value, min), _classNames));
            var left = getPercent(min, max, mark) + '%';

            items.push(
            // "key" is for https://fb.me/react-warning-keys
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: classes, style: { left: left }, key: i },
                marks[mark]
            ));
        });

        return items;
    };

    Mark.prototype.render = function render() {
        var _classNames2;

        var _props2 = this.props,
            prefix = _props2.prefix,
            marksPosition = _props2.marksPosition;

        var className = marksPosition === 'above' ? prefix + 'range-mark-above' : prefix + 'range-mark-below';
        var classes = _classnames_2_2_6_classnames_default()(className, (_classNames2 = {}, _classNames2[prefix + 'range-mark'] = true, _classNames2));
        var items = this._renderItems();

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: classes },
            items
        );
    };

    return Mark;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), mark__class.propTypes = {
    min: _prop_types_15_7_2_prop_types_default.a.number,
    max: _prop_types_15_7_2_prop_types_default.a.number,
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    marks: _prop_types_15_7_2_prop_types_default.a.object,
    marksPosition: _prop_types_15_7_2_prop_types_default.a.string
}, mark__class.defaultProps = {
    prefix: 'next-',
    min: 0,
    max: 100,
    value: 0,
    marksPosition: ''
}, mark__temp);
mark_Mark.displayName = 'Mark';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/slider.js






function _getProps(min, max, value) {
    return {
        style: {
            left: getPercent(min, max, value) + '%',
            zIndex: 100
        },
        'aria-valuenow': value,
        'aria-valuetext': value,
        'aria-valuemin': min,
        'aria-valuemax': max
    };
}

function slider_Slider(_ref) {
    var _classNames;

    var prefix = _ref.prefix,
        hasMovingClass = _ref.hasMovingClass,
        min = _ref.min,
        max = _ref.max,
        value = _ref.value,
        onKeyDown = _ref.onKeyDown;

    var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range-slider'] = true, _classNames[prefix + 'range-slider-moving'] = hasMovingClass, _classNames));
    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        'div',
        extends_default()({ className: classes, onKeyDown: onKeyDown, role: 'slider', tabIndex: 0 }, _getProps(min, max, value)),
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'range-slider-inner' })
    );
}

slider_Slider.propTypes = {
    min: _prop_types_15_7_2_prop_types_default.a.number,
    max: _prop_types_15_7_2_prop_types_default.a.number,
    value: _prop_types_15_7_2_prop_types_default.a.number,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    hasMovingClass: _prop_types_15_7_2_prop_types_default.a.bool
};

slider_Slider.defaultProps = {
    prefix: 'next-',
    min: 0,
    max: 100,
    value: 0,
    hasMovingClass: false
};

/* harmony default export */ var view_slider = (slider_Slider);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/fixedSlider.js





var fixedSlider__class, fixedSlider__temp;







var fixedSlider_Tooltip = balloon.Tooltip;
var fixedSlider_noop = func.noop;


function fixedSlider__getStyle(min, max, value) {
    return {
        left: getPercent(min, max, value[0]) + '%',
        right: 100 - getPercent(min, max, value[1]) + '%'
    };
}

function sliderFrag(props) {
    var prefix = props.prefix,
        min = props.min,
        max = props.max,
        value = props.value,
        disabled = props.disabled,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        onMouseDown = props.onMouseDown;


    var activeClass = !disabled && props.hasMovingClass ? prefix + 'range-active' : '';

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        'div',
        {
            className: prefix + 'range-frag ' + activeClass,
            style: fixedSlider__getStyle(min, max, value),
            onMouseEnter: onMouseEnter,
            onMouseLeave: onMouseLeave,
            onMouseDown: onMouseDown },
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'range-selected' }),
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'range-slider' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'range-slider-inner' })
        ),
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'range-slider' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'range-slider-inner' })
        )
    );
}

sliderFrag.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    min: _prop_types_15_7_2_prop_types_default.a.number,
    max: _prop_types_15_7_2_prop_types_default.a.number,
    hasMovingClass: _prop_types_15_7_2_prop_types_default.a.bool,
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseDown: _prop_types_15_7_2_prop_types_default.a.func,
    value: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number),
    disabled: _prop_types_15_7_2_prop_types_default.a.bool
};

var fixedSlider_FixedSlider = (fixedSlider__temp = fixedSlider__class = function (_React$Component) {
    inherits_default()(FixedSlider, _React$Component);

    function FixedSlider(props) {
        classCallCheck_default()(this, FixedSlider);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        _this.state = {
            hasMovingClass: false,
            onTooltipVisibleChange: false,
            tooltipAnimation: true
        };

        return _this;
    }

    FixedSlider.prototype._onMouseEnter = function _onMouseEnter() {
        if (!(this.keyState === 'down')) {
            this.keyState = 'enter';
        }
        this.setState({
            hasMovingClass: true
        });
    };

    FixedSlider.prototype._onMouseLeave = function _onMouseLeave() {
        if (this.keyState === 'enter') {
            this.setState({
                hasMovingClass: false
            });
        }
    };

    FixedSlider.prototype._onMouseDown = function _onMouseDown() {
        this.keyState = 'down';
        this.setState({
            hasMovingClass: true
        });
        this._addDocumentEvents();
    };

    FixedSlider.prototype._onMouseUp = function _onMouseUp() {
        if (this.keyState === 'down') {
            this.keyState = '';
            this._removeDocumentEvents();
            this.setState({
                hasMovingClass: false
            });
        }
    };

    FixedSlider.prototype._addDocumentEvents = function _addDocumentEvents() {
        this._onMouseUpListener = util_events.on(document, 'mouseup', this._onMouseUp.bind(this));
    };

    FixedSlider.prototype._removeDocumentEvents = function _removeDocumentEvents() {
        if (this._onMouseUpListener) {
            this._onMouseUpListener.off();
            this._onMouseUpListener = null;
        }
    };

    FixedSlider.prototype.render = function render() {
        var _props = this.props,
            hasTip = _props.hasTip,
            value = _props.value,
            tipRender = _props.tipRender,
            tooltipVisible = _props.tooltipVisible,
            hasMovingClass = _props.hasMovingClass;


        var addedProps = {
            hasMovingClass: hasMovingClass || this.state.hasMovingClass,
            onMouseEnter: this._onMouseEnter.bind(this),
            onMouseLeave: this._onMouseLeave.bind(this),
            onMouseDown: this._onMouseDown.bind(this)
        };

        return hasTip ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            fixedSlider_Tooltip,
            {
                popupContainer: function popupContainer(target) {
                    return target.parentNode;
                },
                popupProps: {
                    visible: tooltipVisible || hasMovingClass,
                    animation: this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false
                },
                trigger: sliderFrag(extends_default()({}, this.props, addedProps)),
                align: 't'
            },
            tipRender(value[0] + '-' + value[1])
        ) : sliderFrag(extends_default()({}, this.props, addedProps));
    };

    return FixedSlider;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), fixedSlider__class.propTypes = {
    hasTip: _prop_types_15_7_2_prop_types_default.a.bool,
    tooltipVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    onTooltipVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    tooltipAnimation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.object]),
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    tipRender: _prop_types_15_7_2_prop_types_default.a.func,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    hasMovingClass: _prop_types_15_7_2_prop_types_default.a.bool
}, fixedSlider__class.defaultProps = {
    disabled: false,
    hasTip: true,
    onChange: fixedSlider_noop,
    onProcess: fixedSlider_noop,
    tipRender: function tipRender(value) {
        return value;
    },
    reverse: false
}, fixedSlider__temp);
fixedSlider_FixedSlider.displayName = 'FixedSlider';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/view/range.js





var range__class, range__temp;














var range_Tooltip = balloon.Tooltip;
var range_noop = func.noop,
    range_bindCtx = func.bindCtx;


function _isMultiple(slider, isFixedWidth) {
    return isFixedWidth || slider === 'double';
}

function LowerSlider(props) {
    var hasTip = props.hasTip,
        value = props.value,
        tipRender = props.tipRender,
        slider = props.slider,
        tooltipVisible = props.tooltipVisible,
        onTooltipVisibleChange = props.onTooltipVisibleChange,
        tooltipAnimation = props.tooltipAnimation;


    if (_isMultiple(slider)) {
        return hasTip ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            range_Tooltip,
            {
                popupContainer: function popupContainer(target) {
                    return target.parentNode;
                },
                popupProps: {
                    visible: tooltipVisible,
                    onVisibleChange: onTooltipVisibleChange,
                    animation: tooltipAnimation
                },
                trigger: view_slider(extends_default()({}, props, { value: value[0] })),
                align: 't'
            },
            tipRender('' + value[0])
        ) : view_slider(extends_default()({}, props, { value: value[0] }));
    }
    return null;
}

LowerSlider.propTypes = {
    hasTip: _prop_types_15_7_2_prop_types_default.a.bool,
    tooltipVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    onTooltipVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    tooltipAnimation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.object]),
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    tipRender: _prop_types_15_7_2_prop_types_default.a.func,
    slider: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'double'])
};

function UpperSlider(props) {
    var newprop = extends_default()({}, props);
    var hasTip = newprop.hasTip,
        value = newprop.value,
        tipRender = newprop.tipRender,
        slider = newprop.slider,
        tooltipVisible = newprop.tooltipVisible,
        onTooltipVisibleChange = newprop.onTooltipVisibleChange,
        tooltipAnimation = newprop.tooltipAnimation;

    if (_isMultiple(slider)) {
        delete newprop.onKeyDown;
        return hasTip ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            range_Tooltip,
            {
                popupContainer: function popupContainer(target) {
                    return target.parentNode;
                },
                popupProps: {
                    visible: tooltipVisible,
                    onVisibleChange: onTooltipVisibleChange,
                    animation: tooltipAnimation
                },
                trigger: view_slider(extends_default()({}, newprop, { value: value[1] })),
                align: 't'
            },
            tipRender(value[1])
        ) : view_slider(extends_default()({}, newprop, { value: value[1] }));
    }
    return hasTip ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        range_Tooltip,
        {
            popupContainer: function popupContainer(target) {
                return target.parentNode;
            },
            popupProps: {
                visible: tooltipVisible,
                onVisibleChange: onTooltipVisibleChange,
                animation: tooltipAnimation
            },
            animation: {
                in: 'fadeInUp',
                out: 'fadeOutDown'
            },
            trigger: view_slider(newprop),
            align: 't'
        },
        tipRender(value)
    ) : view_slider(newprop);
}

UpperSlider.propTypes = {
    hasTip: _prop_types_15_7_2_prop_types_default.a.bool,
    tooltipVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    onTooltipVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    tooltipAnimation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.object]),
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    tipRender: _prop_types_15_7_2_prop_types_default.a.func,
    slider: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'double'])
};

function pauseEvent(e) {
    e.stopPropagation();
    e.preventDefault();
}

/** Range */
var range_Range = (range__temp = range__class = function (_React$Component) {
    inherits_default()(Range, _React$Component);

    function Range(props) {
        classCallCheck_default()(this, Range);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        var min = props.min;

        var initialValue = _isMultiple(props.slider) ? [min, min] : min;
        var defaultValue = 'defaultValue' in props ? props.defaultValue : initialValue;
        var value = props.value !== undefined ? props.value : defaultValue;

        _this.state = {
            value: value,
            tempValue: value,
            hasMovingClass: false,
            lowerTooltipVisible: false,
            upperTooltipVisible: false,
            tooltipAnimation: true
        };

        range_bindCtx(_this, ['handleLowerTooltipVisibleChange', 'handleUpperTooltipVisibleChange', 'onKeyDown']);
        return _this;
    }

    Range.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var min = this.props.min;

        var initialValue = _isMultiple(nextProps.slider) ? [min, min] : min;
        if ('value' in nextProps) {
            var value = nextProps.value;

            if (value === undefined) {
                // value设置undefined,reset为初始值
                value = initialValue;
            }
            this.setState({
                value: value,
                tempValue: value
            });
        }
    };

    Range.prototype._marksToScales = function _marksToScales(marks) {
        var result = [];
        if (Object.prototype.toString.call(marks) === '[object Object]') {
            for (var key in marks) {
                if (Object.hasOwnProperty.call(marks, key)) {
                    result.push(parseInt(key));
                }
            }
        } else {
            result = marks;
        }
        return result;
    };

    Range.prototype._calcScales = function _calcScales() {
        var _props = this.props,
            min = _props.min,
            max = _props.max,
            marks = _props.marks;

        var scales = this._marksToScales(marks);
        // let scales = null;

        if (scales !== false) {
            if (Array.isArray(scales)) {
                return scales;
            } else {
                var pace = (max - min) / scales;
                var result = [];

                result.push(min);
                for (var i = 1; i < scales; i++) {
                    result.push(min + i * pace);
                }
                result.push(max);
                return result;
            }
        } else {
            return [];
        }
    };

    Range.prototype._calcMarks = function _calcMarks() {
        var _props2 = this.props,
            min = _props2.min,
            max = _props2.max,
            marks = _props2.marks;


        var result = {};

        if (Array.isArray(marks)) {
            marks.forEach(function (m) {
                result[m] = m.toString();
            });
        } else if (typeof marks === 'number') {
            var pace = (max - min) / marks;

            result[min] = min;
            for (var i = 1; i < marks; i++) {
                var mark = min + i * pace;
                var precision = getPrecision(mark);
                if (precision > 2) {
                    precision = 2;
                }
                mark = mark.toFixed(precision);
                result[mark] = mark;
            }
            result[max] = max;
        } else {
            result = marks;
        }
        return result;
    };

    Range.prototype._onMouseDown = function _onMouseDown(e) {
        if (e.button === 0) {
            this.setState({
                hasMovingClass: true
            });
            this._start(e.pageX);
            this._addDocumentEvents();
            pauseEvent(e);
        }
    };

    Range.prototype.onKeyDown = function onKeyDown(e) {
        if (e.keyCode === KEYCODE.LEFT_ARROW || e.keyCode === KEYCODE.RIGHT_ARROW) {
            e.stopPropagation();
            e.preventDefault();
            var newValue = void 0;
            if (e.keyCode === KEYCODE.LEFT_ARROW) {
                newValue = this.state.value - this.props.step;
            } else {
                newValue = this.state.value + this.props.step;
            }
            if (newValue > this.props.max) {
                newValue = this.props.max;
            }
            if (newValue < this.props.min) {
                newValue = this.props.min;
            }
            if (newValue !== this.state.value) {
                this.setState({
                    value: newValue
                });
                this.props.onChange(newValue);
            }
        }
    };

    Range.prototype._start = function _start(position) {
        var tempValue = this.state.tempValue;

        var range = this.dom;
        var start = range.getBoundingClientRect().left;
        // used in unit test
        var width = range.clientWidth;
        if (!width) {
            if (range.style.width) {
                var index = range.style.width.indexOf('px');
                if (index !== -1) {
                    width = Number(range.style.width.slice(0, index));
                }
            }
        }

        this._moving = {
            start: start,
            end: start + width,
            startValue: tempValue
        };

        // change on start
        this._onProcess(position, true);
    };

    Range.prototype._end = function _end() {
        var startValue = this._moving.startValue;
        var _state = this.state,
            tempValue = _state.tempValue,
            value = _state.value;

        this._moving = null;
        this._removeDocumentEvents();
        this.setState({
            hasMovingClass: false,
            lowerTooltipVisible: false,
            upperTooltipVisible: false,
            tooltipAnimation: true
        });
        if (!utils_isEqual(tempValue, startValue)) {
            // Not Controlled
            if (!('value' in this.props)) {
                this.setState({
                    value: tempValue
                });
            } else {
                this.setState({
                    // tooltipVisible: false,
                    tempValue: value,
                    value: value
                });
            }
            this.props.onChange(tempValue);
        }
    };

    Range.prototype._move = function _move(e) {
        this._onProcess(e.pageX);
    };

    Range.prototype._onProcess = function _onProcess(position, start) {
        var tempValue = this.state.tempValue;

        var current = this._positionToCurrent(position); //current 为当前click的value

        if (this.isFixedWidth) {
            if (start) {
                this.lastPosition = current;
            }
        } else if (start) {
            this.lastPosition = current;
            if (_isMultiple(this.props.slider)) {
                this._moving.dragging = getDragging(current, tempValue);
            } else {
                this._moving.dragging = 'upper';
            }

            this.setState({
                lowerTooltipVisible: this._moving.dragging === 'lower',
                upperTooltipVisible: this._moving.dragging === 'upper',
                tooltipAnimation: false
            });
        } else if (this.oldDragging === 'lower' && this._moving.dragging === 'upper') {
            this.setState({
                upperTooltipVisible: true,
                lowerTooltipVisible: false
            });
        } else if (this.oldDragging === 'upper' && this._moving.dragging === 'lower') {
            this.setState({
                upperTooltipVisible: false,
                lowerTooltipVisible: true
            });
        }

        this.oldDragging = this._moving.dragging;

        var nextValue = this._currentToValue(current, tempValue, this.lastPosition, this.isFixedWidth); //计算range的新value,可能是数组,可能是单个值
        this.lastPosition = current;

        if (!utils_isEqual(nextValue, tempValue)) {
            this.setState({
                tempValue: nextValue
            });
            this.props.onProcess(nextValue);
        }
    };

    Range.prototype._addDocumentEvents = function _addDocumentEvents() {
        this._onMouseMoveListener = util_events.on(document, 'mousemove', this._move.bind(this));
        this._onMouseUpListener = util_events.on(document, 'mouseup', this._end.bind(this));
    };

    Range.prototype._removeDocumentEvents = function _removeDocumentEvents() {
        if (this._onMouseMoveListener) {
            this._onMouseMoveListener.off();
            this._onMouseMoveListener = null;
        }

        if (this._onMouseUpListener) {
            this._onMouseUpListener.off();
            this._onMouseUpListener = null;
        }
    };

    // position => current (value type)


    Range.prototype._positionToCurrent = function _positionToCurrent(position) {
        var _moving = this._moving,
            start = _moving.start,
            end = _moving.end;
        var _props3 = this.props,
            step = _props3.step,
            min = _props3.min,
            max = _props3.max;


        if (position < start) {
            position = start;
        } else if (position > end) {
            position = end;
        }
        var percent = getPercent(start, end, position);

        // reset by step
        var newValue = parseFloat((Math.round(percent / 100 * (max - min) / step) * step).toFixed(getPrecision(step)));

        return min + newValue;
    };

    Range.prototype._currentToValue = function _currentToValue(current, preValue, lastPosition, isFixedWidth) {
        var dragging = this._moving.dragging;


        if (!_isMultiple(this.props.slider, isFixedWidth)) {
            return current;
        } else {
            var result = void 0;
            var _props4 = this.props,
                min = _props4.min,
                max = _props4.max;


            var precision = getPrecision(this.props.step);
            var diff = current - lastPosition;
            var newLeft = +(+preValue[0] + diff).toFixed(precision);
            var newRight = +(+preValue[1] + diff).toFixed(precision);

            var newMaxLeft = +(max - preValue[1] + preValue[0]).toFixed(precision);
            var newMinRight = +(min + preValue[1] - preValue[0]).toFixed(precision);

            if (isFixedWidth) {
                if (newLeft < min) {
                    result = [min, newMinRight];
                } else if (newRight > max) {
                    result = [newMaxLeft, max];
                } else {
                    result = [newLeft, newRight];
                }
            } else if (dragging === 'lower') {
                if (current > preValue[1]) {
                    result = [preValue[1], current];
                    this._moving.dragging = 'upper';
                } else {
                    result = [current, preValue[1]];
                }
            } else if (dragging === 'upper') {
                if (current < preValue[0]) {
                    result = [current, preValue[0]];
                    this._moving.dragging = 'lower';
                } else {
                    result = [preValue[0], current];
                }
            }

            return result;
        }
    };

    Range.prototype.handleLowerTooltipVisibleChange = function handleLowerTooltipVisibleChange(visible) {
        if (this.state.hasMovingClass) {
            return;
        }
        this.setState({
            lowerTooltipVisible: visible
        });
    };

    Range.prototype.handleUpperTooltipVisibleChange = function handleUpperTooltipVisibleChange(visible) {
        if (this.state.hasMovingClass) {
            return;
        }
        this.setState({
            upperTooltipVisible: visible
        });
    };

    Range.prototype.render = function render() {
        var _classNames,
            _this2 = this;

        var value = this._moving ? this.state.tempValue : this.state.value;

        var _props5 = this.props,
            prefix = _props5.prefix,
            min = _props5.min,
            max = _props5.max,
            disabled = _props5.disabled,
            style = _props5.style,
            id = _props5.id,
            slider = _props5.slider,
            reverse = _props5.reverse,
            className = _props5.className,
            marks = _props5.marks,
            marksPosition = _props5.marksPosition,
            hasTip = _props5.hasTip,
            tipRender = _props5.tipRender,
            fixedWidth = _props5.fixedWidth,
            defaultValue = _props5.defaultValue,
            tooltipVisible = _props5.tooltipVisible;

        var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'range'] = true, _classNames.disabled = disabled, _classNames[className] = className, _classNames));

        if (Array.isArray(value)) {
            value.forEach(function (item, index) {
                if (item > max) {
                    value[index] = max;
                }
            });
        } else if (value > max) {
            value = max;
        }

        var commonProps = {
            prefix: prefix,
            min: min,
            max: max,
            value: value,
            reverse: reverse,
            slider: slider,
            hasTip: hasTip,
            tipRender: tipRender,
            marksPosition: marksPosition,
            tooltipVisible: tooltipVisible,
            hasMovingClass: this.state.hasMovingClass,
            disabled: disabled
        };

        this.isFixedWidth = fixedWidth && (value ? Array.isArray(value) : defaultValue ? Array.isArray(defaultValue) : false);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { ref: function ref(dom) {
                    _this2.dom = dom;
                }, style: style, className: classes, id: id, onMouseDown: disabled ? range_noop : this._onMouseDown.bind(this) },
            marks !== false && marksPosition === 'above' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(mark_Mark, extends_default()({}, commonProps, { marks: this._calcMarks() })) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'range-inner' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(scale_Scale, extends_default()({}, commonProps, { scales: this._calcScales() })),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(track, commonProps),
                this.isFixedWidth ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(fixedSlider_FixedSlider, commonProps) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    null,
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(selected_Selected, commonProps),
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(LowerSlider, extends_default()({}, commonProps, {
                        hasMovingClass: this.state.hasMovingClass && this._moving && this._moving.dragging === 'lower',
                        tooltipVisible: tooltipVisible || this.state.lowerTooltipVisible,
                        onTooltipVisibleChange: this.handleLowerTooltipVisibleChange,
                        tooltipAnimation: this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false })),
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(UpperSlider, extends_default()({}, commonProps, {
                        onKeyDown: this.onKeyDown,
                        hasMovingClass: this.state.hasMovingClass && this._moving && this._moving.dragging === 'upper',
                        tooltipVisible: tooltipVisible || this.state.upperTooltipVisible,
                        onTooltipVisibleChange: this.handleUpperTooltipVisibleChange,
                        tooltipAnimation: this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false }))
                )
            ),
            marks !== false && marksPosition === 'below' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(mark_Mark, extends_default()({}, commonProps, { marks: this._calcMarks() })) : null
        );
    };

    return Range;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), range__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, range__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 滑块个数
     * @enumdesc 单个, 两个
     */
    slider: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'double']),
    /**
     * 最小值
     */
    min: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 最大值
     */
    max: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 步长，取值必须大于 0，并且可被 (max - min) 整除。
     */
    step: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    tempValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    /**
     * 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number)]),
    /**
     * 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）
     */
    marks: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.number), _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * marks显示在上方('above')or下方('below')
     */
    marksPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['above', 'below']),
    /**
     * 值为 `true` 时，滑块为禁用状态
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用
     * @param {String/number} value
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用
     * @param {String/number} value
     */
    onProcess: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否显示 tip
     */
    hasTip: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义 tip 显示内容
     * @param {Number|String} value 值
     * @return {ReactNode} 显示内容
     */
    tipRender: _prop_types_15_7_2_prop_types_default.a.func,
    id: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选中态反转
     */
    reverse: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否pure render
     */
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否为拖动线段类型,默认slider为double, defaultValue必传且指定区间
     */
    fixedWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * tooltip是否默认展示
     */
    tooltipVisible: _prop_types_15_7_2_prop_types_default.a.bool
}, range__class.defaultProps = {
    prefix: 'next-',
    slider: 'single',
    min: 0,
    max: 100,
    step: 1,
    marks: false,
    disabled: false,
    fixedWidth: false,
    tooltipVisible: false,
    hasTip: true,
    onChange: range_noop,
    onProcess: range_noop,
    tipRender: function tipRender(value) {
        return value;
    },
    reverse: false,
    pure: false,
    marksPosition: 'above'
}, range__temp);
range_Range.displayName = 'Range';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/range/index.js





/* harmony default export */ var es_range = (config_provider.config(range_Range, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('hasTips' in props) {
            deprecated('hasTips', 'hasTip', 'Range');

            var _props = props,
                hasTips = _props.hasTips,
                others = objectWithoutProperties_default()(_props, ['hasTips']);

            props = extends_default()({ hasTip: hasTips }, others);
        }

        if ('tipFormatter' in props) {
            deprecated('tipFormatter', 'tipRender', 'Range');

            var _props2 = props,
                tipFormatter = _props2.tipFormatter,
                _others = objectWithoutProperties_default()(_props2, ['tipFormatter']);

            props = extends_default()({ tipRender: tipFormatter }, _others);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/rating/rating.js





var rating__class, rating__temp;







var rating_noop = func.noop,
    rating_bindCtx = func.bindCtx;
var ENTER = KEYCODE.ENTER,
    LEFT = KEYCODE.LEFT,
    UP = KEYCODE.UP,
    RIGHT = KEYCODE.RIGHT,
    DOWN = KEYCODE.DOWN;

var supportKeys = [ENTER, LEFT, UP, RIGHT, DOWN];

// 评分组件的大小与icon的大小映射关系
var ICON_SIZE_MAP = {
    small: 'xs',
    medium: 'small',
    large: 'medium'
};

/** Rating */
var rating_Rating = (rating__temp = rating__class = function (_Component) {
    inherits_default()(Rating, _Component);

    Rating.currentValue = function currentValue(min, max, hoverValue, stateValue) {
        var value = hoverValue ? hoverValue : stateValue;

        value = value >= max ? max : value;
        value = value <= min ? min : value;

        return value || 0;
    };

    function Rating(props) {
        classCallCheck_default()(this, Rating);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            value: 'value' in props ? props.value : props.defaultValue,
            hoverValue: 0,
            iconSpace: 0,
            iconSize: 0,
            clicked: false // 标记组件是否被点击过
        };
        _this.timer = null;

        rating_bindCtx(_this, ['handleClick', 'handleHover', 'handleLeave', 'onKeyDown']);
        return _this;
    }

    Rating.prototype.componentDidMount = function componentDidMount() {
        this.getRenderResult();
    };

    Rating.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: nextProps.value || 0
            });
        }
    };

    Rating.prototype.componentWillUnmount = function componentWillUnmount() {
        this.clearTimer();
    };

    // 清除延时


    Rating.prototype.clearTimer = function clearTimer() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    };

    Rating.prototype.getRenderResult = function getRenderResult() {
        var count = this.props.count;
        var _state = this.state,
            iconSpace = _state.iconSpace,
            iconSize = _state.iconSize;

        var icon = this.refs['rating-icon-0'];

        if (icon && this.underlayNode) {
            var newIconSize = icon.offsetWidth;
            var newIconSpace = (this.underlayNode.offsetWidth - count * newIconSize) / (count + 1);

            if (newIconSize !== iconSize || newIconSpace !== iconSpace) {
                this.setState({
                    iconSpace: newIconSpace,
                    iconSize: newIconSize
                });
            }
        }
    };

    Rating.prototype.getValue = function getValue(e) {
        // 如定位不准，优先纠正定位
        this.getRenderResult();

        var _props = this.props,
            allowHalf = _props.allowHalf,
            count = _props.count;
        var _state2 = this.state,
            iconSpace = _state2.iconSpace,
            iconSize = _state2.iconSize;


        var pos = e.pageX - this.underlayNode.getBoundingClientRect().left;
        var fullNum = Math.floor(pos / (iconSpace + iconSize));
        var surplusNum = (pos - fullNum * (iconSpace + iconSize)) / iconSize;
        var value = Number(fullNum) + Number(surplusNum.toFixed(1));

        if (value >= count) {
            value = count;
        } else if (allowHalf) {
            var floorValue = Math.floor(value);
            value = value - 0.5 >= floorValue ? floorValue + 1 : floorValue + 0.5;
        } else {
            value = Math.floor(value) + 1;
        }

        return value;
    };

    Rating.prototype.handleHover = function handleHover(e) {
        var _this2 = this;

        var value = this.getValue(e);
        var onHoverChange = this.props.onHoverChange;

        if (value !== this.state.hoverValue) {

            this.clearTimer();

            this.timer = setTimeout(function () {
                _this2.setState({ hoverValue: value }, function () {
                    onHoverChange(value);
                });
            }, 0);
        }
    };

    Rating.prototype.handleLeave = function handleLeave() {

        this.clearTimer();

        this.setState({
            hoverValue: 0
        });
    };

    Rating.prototype.onKeyDown = function onKeyDown(e) {
        var _props2 = this.props,
            disabled = _props2.disabled,
            onKeyDown = _props2.onKeyDown,
            count = _props2.count;

        if (disabled || supportKeys.indexOf(e.keyCode) < 0) {
            return !onKeyDown || onKeyDown(e);
        }

        var _state3 = this.state,
            hoverValue = _state3.hoverValue,
            value = _state3.value;

        var changingValue = hoverValue;
        if (changingValue === 0) {
            changingValue = value;
        }

        switch (e.keyCode) {
            case DOWN:
            case RIGHT:
                if (changingValue < count) {
                    changingValue += 1;
                } else {
                    changingValue = 1;
                }
                this.handleChecked(changingValue);
                break;
            case UP:
            case LEFT:
                if (changingValue > 1) {
                    changingValue -= 1;
                } else {
                    changingValue = count;
                }
                this.handleChecked(changingValue);
                break;
            case ENTER:
                this.props.onChange(changingValue);
                this.setState({ value: changingValue, hoverValue: changingValue });
                break;
        }
        return !onKeyDown || onKeyDown(e);
    };

    Rating.prototype.handleChecked = function handleChecked(index) {
        this.setState({ hoverValue: index });
    };

    Rating.prototype.handleClick = function handleClick(e) {
        var _this3 = this;

        var value = this.getValue(e);
        if (value < 0) {
            return;
        }
        if (!('value' in this.props)) {
            this.setState({ value: value, clicked: true });
        }

        this.props.onChange(value);

        setTimeout(function () {
            _this3.setState({ clicked: false });
        }, 100);
    };

    Rating.prototype.getOverlayWidth = function getOverlayWidth() {
        var _state4 = this.state,
            hoverValue = _state4.hoverValue,
            iconSpace = _state4.iconSpace,
            iconSize = _state4.iconSize;


        if (!iconSpace || !iconSize) {
            return 'auto';
        }

        var value = Rating.currentValue(0, this.props.count, hoverValue, this.state.value);

        var floorValue = Math.floor(value);

        return iconSize * value + (floorValue + 1) * iconSpace;
    };

    Rating.prototype.getInfoLeft = function getInfoLeft() {
        var _state5 = this.state,
            value = _state5.value,
            hoverValue = _state5.hoverValue,
            iconSpace = _state5.iconSpace,
            iconSize = _state5.iconSize;

        var infoValue = hoverValue || value;
        var ceilValue = Math.ceil(infoValue);

        return iconSize * (ceilValue - 1) + ceilValue * iconSpace;
    };

    Rating.prototype.render = function render() {
        var _classNames,
            _classNames2,
            _this4 = this;

        var _props3 = this.props,
            id = _props3.id,
            prefix = _props3.prefix,
            className = _props3.className,
            showGrade = _props3.showGrade,
            count = _props3.count,
            size = _props3.size,
            iconType = _props3.iconType,
            strokeMode = _props3.strokeMode,
            disabled = _props3.disabled,
            readAs = _props3.readAs;

        var others = util_obj.pickOthers(Rating.propTypes, this.props);
        var _state6 = this.state,
            hoverValue = _state6.hoverValue,
            clicked = _state6.clicked;

        var underlay = [],
            overlay = [];

        var enableA11y = !!id;

        // 获得Value
        var value = Rating.currentValue(0, count, hoverValue, this.state.value);

        // icon的sizeMap
        var sizeMap = ICON_SIZE_MAP[size];

        for (var i = 0; i < count; i++) {
            var isCurrent = Math.ceil(value - 1) === i;
            var iconCls = _classnames_2_2_6_classnames_default()({
                hover: hoverValue > 0 && isCurrent,
                clicked: clicked && isCurrent
            });
            var iconNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: iconType, size: sizeMap, className: iconCls });

            underlay.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { ref: 'rating-icon-' + i, key: 'underlay-' + i, className: prefix + 'rating-icon' },
                iconNode
            ));
            if (enableA11y) {
                overlay.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', {
                    id: id + '-' + prefix + 'star' + (i + 1),
                    key: 'input-' + i,
                    className: prefix + 'visually-hidden',
                    'aria-checked': i + 1 === parseInt(hoverValue),
                    checked: i + 1 === parseInt(hoverValue),
                    onChange: this.handleChecked.bind(this, i + 1),
                    type: 'radio',
                    name: 'rating',
                    'aria-labelledby': id
                }));
            }

            overlay.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'label',
                { key: 'overlay-' + i,
                    htmlFor: enableA11y ? id + '-' + prefix + 'star' + (i + 1) : null, className: prefix + 'rating-icon' },
                iconNode,
                enableA11y ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefix + 'visually-hidden' },
                    readAs(i + 1)
                ) : null
            ));
        }

        var ratingCls = _classnames_2_2_6_classnames_default()([prefix + 'rating', prefix + 'rating-' + size], (_classNames = {}, _classNames[prefix + 'rating-grade-low'] = value <= count * 0.4, _classNames[prefix + 'rating-grade-high'] = value > count * 0.4, _classNames[prefix + 'rating-stroke-mode'] = strokeMode, _classNames.hover = hoverValue > 0, _classNames), className);

        var baseCls = _classnames_2_2_6_classnames_default()(prefix + 'rating-base', (_classNames2 = {}, _classNames2[prefix + 'rating-base-disabled'] = disabled, _classNames2));

        var overlayStyle = {
            width: this.getOverlayWidth()
        };
        var infoStyle = {
            left: this.getInfoLeft(),
            display: hoverValue ? 'block' : 'none'
        };

        var finalProps = disabled ? {} : {
            onClick: this.handleClick,
            onMouseOver: this.handleHover,
            onMouseMove: this.handleHover,
            onMouseLeave: this.handleLeave
        };

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ id: id ? id : null }, others, { className: ratingCls, onKeyDown: this.onKeyDown, tabIndex: '0' }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                extends_default()({ className: baseCls }, finalProps),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'rating-underlay', ref: function ref(n) {
                            return _this4.underlayNode = n;
                        } },
                    underlay
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'rating-overlay', style: overlayStyle },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'form',
                        { action: '#' },
                        overlay
                    )
                )
            ),
            showGrade ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'rating-info', style: infoStyle },
                value
            ) : null
        );
    };

    return Rating;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), rating__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 值
     */
    value: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 评分的总数
     */
    count: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 是否显示 grade
     */
    showGrade: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否允许半星评分
     */
    allowHalf: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 用户点击评分时触发的回调
     * @param {String} value 评分值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 用户hover评分时触发的回调
     * @param {String} value 评分值
     */
    onHoverChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 传入id支持无障碍时，参数才有意义
     */
    readAs: _prop_types_15_7_2_prop_types_default.a.func,
    // 实验属性: 自定义评分icon
    iconType: _prop_types_15_7_2_prop_types_default.a.string,
    // 实验属性: 开启 `-webkit-text-stroke` 显示边框颜色，在IE中无效
    strokeMode: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    id: _prop_types_15_7_2_prop_types_default.a.string
}, rating__class.defaultProps = {
    prefix: 'next-',
    size: 'medium',
    disabled: false,
    count: 5,
    showGrade: false,
    defaultValue: 0,
    readAs: function readAs(val) {
        return val;
    },
    allowHalf: false,
    iconType: 'favorites-filling',
    onChange: rating_noop,
    onHoverChange: rating_noop
}, rating__temp);
rating_Rating.displayName = 'Rating';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/rating/index.js





/* harmony default export */ var rating = (config_provider.config(rating_Rating, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'showGrade', 'Rating');

            var _props = props,
                type = _props.type,
                others = objectWithoutProperties_default()(_props, ['type']);

            props = extends_default()({ showGrade: type === 'grade' }, others);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/search/Search.js






var Search__class, Search__temp, Search__initialiseProps;










var Search_Group = es_input.Group;
var Search_AutoComplete = es_select.AutoComplete;

/**
 * Search
 * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api
 */
var Search_Search = (Search__temp = Search__class = function (_React$Component) {
    inherits_default()(Search, _React$Component);

    function Search(props) {
        classCallCheck_default()(this, Search);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        Search__initialiseProps.call(_this);

        var value = 'value' in props ? props.value : props.defaultValue;
        var filterValue = 'filterValue' in props ? props.filterValue : props.defaultFilterValue;

        _this.state = {
            value: typeof value === 'undefined' ? '' : value,
            filterValue: filterValue
        };
        return _this;
    }

    Search.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var state = {};
        if ('value' in nextProps) {
            state.value = typeof nextProps.value === 'undefined' ? '' : nextProps.value;
        }
        if ('filterValue' in nextProps) {
            state.filterValue = typeof nextProps.filterValue === 'undefined' ? '' : nextProps.filterValue;
        }
        this.setState(state);
    };

    Search.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            shape = _props.shape,
            filter = _props.filter,
            hasIcon = _props.hasIcon,
            disabled = _props.disabled,
            placeholder = _props.placeholder,
            type = _props.type,
            className = _props.className,
            style = _props.style,
            size = _props.size,
            prefix = _props.prefix,
            searchText = _props.searchText,
            dataSource = _props.dataSource,
            filterProps = _props.filterProps,
            buttonProps = _props.buttonProps,
            popupContent = _props.popupContent,
            hasClear = _props.hasClear,
            visible = _props.visible,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['shape', 'filter', 'hasIcon', 'disabled', 'placeholder', 'type', 'className', 'style', 'size', 'prefix', 'searchText', 'dataSource', 'filterProps', 'buttonProps', 'popupContent', 'hasClear', 'visible', 'rtl']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'search'] = true, _classNames[prefix + 'search-' + shape] = true, _classNames['' + prefix + type] = type, _classNames['' + prefix + size] = size, _classNames[className] = !!className, _classNames));

        var searchIcon = null,
            filterSelect = null,
            searchBtn = null;

        if (shape === 'simple') {
            var _classNames2;

            var _cls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'search-icon'] = true, _classNames2[buttonProps.className] = !!buttonProps.className, _classNames2));
            searchIcon = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, extends_default()({}, buttonProps, { type: 'search', tabIndex: '0', role: 'button', 'aria-disabled': disabled, className: _cls, onClick: this.onSearch, onKeyDown: this.onKeyDown }));
        } else {
            var _classNames3;

            var _cls2 = _classnames_2_2_6_classnames_default()((_classNames3 = {}, _classNames3[prefix + 'search-btn'] = true, _classNames3[buttonProps.className] = !!buttonProps.className, _classNames3));
            searchBtn = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, buttonProps, { tabIndex: '0', className: _cls2, onClick: this.onSearch, onKeyDown: this.onKeyDown, disabled: disabled }),
                hasIcon ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'search' }) : null,
                searchText ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefix + 'search-btn-text' },
                    searchText
                ) : null
            );
        }

        if (filter.length > 0) {
            filterSelect = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_select, extends_default()({}, filterProps, {
                hasBorder: false,
                dataSource: filter,
                size: size,
                disabled: disabled,
                value: this.state.filterValue,
                onChange: this.onFilterChange
            }));
        }

        var othersAttributes = util_obj.pickOthers(Search.propTypes, others);
        if (visible !== undefined) {
            // 受控属性 visible 不能直接写在组件上
            othersAttributes.visible = Boolean(visible);
        }
        var dataAttr = util_obj.pickAttrsWith(others, 'data-');
        var left = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Search_Group,
            { addonBefore: filterSelect,
                className: prefix + 'search-left',
                addonBeforeClassName: prefix + 'search-left-addon' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Search_AutoComplete, extends_default()({}, othersAttributes, {
                hasClear: hasClear,
                className: prefix + 'search-input',
                size: size,
                placeholder: placeholder,
                dataSource: dataSource,
                innerAfter: searchIcon,
                onPressEnter: this.onSearch,
                value: this.state.value,
                onChange: this.onChange,
                popupContent: popupContent,
                disabled: disabled
            }))
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            extends_default()({ className: cls, style: style }, dataAttr, { dir: rtl ? 'rtl' : undefined }),
            searchBtn ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                Search_Group,
                { addonAfter: searchBtn },
                left
            ) : left
        );
    };

    return Search;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), Search__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 形状
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'simple']),
    /**
     * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['primary', 'secondary', 'normal', 'dark']),
    /**
     * 大小
     * @enumdesc '大', '小'
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['large', 'medium']),
    /**
     * 搜索框默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 搜索框数值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 输入关键字时的回掉
     * @param {Object} value 输入值
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击搜索按钮触发的回调
     * @param {Object} value 输入值
     */
    onSearch: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选择器默认值
     */
    defaultFilterValue: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择器
     */
    filter: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 选择器值
     */
    filterValue: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择器发生变化时回调
     * @param {Object} filter value
     */
    onFilterChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 搜索框下拉联想列表
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 默认提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * button 的内容
     */
    searchText: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自定义样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 样式名称
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选择器的props
     */
    filterProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 按钮的额外属性
     */
    buttonProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义渲染的的下拉框
     */
    popupContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自定义渲染的的下拉框
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否显示清除按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool

}, Search__class.defaultProps = {
    prefix: 'next-',
    shape: 'normal',
    type: 'normal',
    size: 'medium',
    hasIcon: true,
    filter: [],
    buttonProps: {},
    onChange: func.noop,
    onSearch: func.noop,
    onFilterChange: func.noop,
    hasClear: false,
    disabled: false
}, Search__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onChange = function (value) {
        if (!('value' in _this2.props)) {
            _this2.setState({ value: value });
        }

        _this2.props.onChange(value);
    };

    this.onSearch = function () {
        if (_this2.props.disabled) {
            return;
        }
        _this2.props.onSearch(_this2.state.value, _this2.state.filterValue);
    };

    this.onFilterChange = function (filterValue) {
        if (!('filterValue' in _this2.props)) {
            _this2.setState({ filterValue: filterValue });
        }

        _this2.props.onFilterChange(filterValue);
    };

    this.onKeyDown = function (e) {
        if (_this2.props.disabled) {
            return;
        }
        if (e.keyCode !== KEYCODE.ENTER) {
            return;
        }
        _this2.onSearch();
    };
}, Search__temp);
Search_Search.displayName = 'Search';


/* harmony default export */ var search_Search = (Search_Search);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/search/index.js


var search__this = this;




/* harmony default export */ var search = (config_provider.config(search_Search, {
    transfrom: /* istanbul ignore next */function transfrom(props, deprecated) {
        var _props = search__this.props,
            onInputFocus = _props.onInputFocus,
            overlayVisible = _props.overlayVisible,
            combox = _props.combox,
            others = objectWithoutProperties_default()(_props, ['onInputFocus', 'overlayVisible', 'combox']);

        var newprops = others;

        if (onInputFocus) {
            deprecated('onInputFocus', 'onFocus', 'Search');
            newprops.onFocus = onInputFocus;
        }
        if ('overlayVisible' in search__this.props) {
            deprecated('overlayVisible', 'visible', 'Search');
            newprops.visible = overlayVisible;
        }
        if (combox) {
            deprecated('combox', 'popupContent', 'Search');
            newprops.popupContent = combox;
        }

        return newprops;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/mixins/trackHelper.js



var checkSpecKeys = function checkSpecKeys(spec, keysArray) {
    return keysArray.reduce(function (value, key) {
        return value && spec.hasOwnProperty(key);
    }, true) ? null : console.error('Keys Missing', spec); /*eslint no-console:0*/
};

var trackHelper_getTrackCSS = function getTrackCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth']);

    var trackWidth = void 0;
    var trackHeight = void 0;

    var trackChildren = spec.slideCount + 2 * spec.slidesToShow;

    if (!spec.vertical) {
        if (spec.variableWidth) {
            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
        } else if (spec.centerMode) {
            trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;
        } else {
            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
        }
    } else {
        trackHeight = trackChildren * spec.slideHeight;
    }

    var style = {
        opacity: 1
    };

    var transform = {
        WebkitTransform: !spec.vertical ? 'translate3d(' + spec.left + 'px, 0px, 0px)' : 'translate3d(0px, ' + spec.left + 'px, 0px)',
        transform: !spec.vertical ? 'translate3d(' + spec.left + 'px, 0px, 0px)' : 'translate3d(0px, ' + spec.left + 'px, 0px)',
        transition: '',
        WebkitTransition: '',
        msTransform: !spec.vertical ? 'translateX(' + spec.left + 'px)' : 'translateY(' + spec.left + 'px)'
    };

    if (trackWidth) {
        style = extends_default()({}, style, { width: trackWidth });
    }

    if (trackHeight) {
        style = extends_default()({}, style, { height: trackHeight });
    }

    if (spec.animation !== 'fade') {
        style = extends_default()({}, style, transform);
    }

    return style;
};

var getTrackAnimateCSS = function getTrackAnimateCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase']);

    var style = trackHelper_getTrackCSS(spec);
    // useCSS is true by default so it can be undefined
    style.WebkitTransition = '-webkit-transform ' + spec.speed + 'ms ' + spec.cssEase;
    style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase;
    return style;
};

var trackHelper_getTrackLeft = function getTrackLeft(spec) {

    checkSpecKeys(spec, ['slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow', 'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth', 'slideHeight']);

    var slideOffset = 0;
    var targetLeft = void 0;
    var targetSlide = void 0;
    var verticalOffset = 0;

    if (spec.animation === 'fade') {
        return 0;
    }

    if (spec.infinite) {
        if (spec.slideCount > spec.slidesToShow) {
            slideOffset = spec.slideWidth * spec.slidesToShow * -1;
            verticalOffset = spec.slideHeight * spec.slidesToShow * -1;
        }
        if (spec.slideCount % spec.slidesToScroll !== 0) {
            var condition = spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;

            if (spec.rtl) {
                var slideIndex = spec.slideIndex >= spec.slideCount ? spec.slideCount - spec.slideIndex : spec.slideIndex;
                condition = slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;
            }
            if (condition) {
                if (spec.slideIndex > spec.slideCount) {
                    slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;
                    verticalOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideHeight * -1;
                } else {
                    slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;
                    verticalOffset = spec.slideCount % spec.slidesToScroll * spec.slideHeight * -1;
                }
            }
        }
    } else {
        /* eslint-disable no-lonely-if */
        if (spec.slideCount % spec.slidesToScroll !== 0) {
            if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {
                var slidesToOffset = spec.slidesToShow - spec.slideCount % spec.slidesToScroll;
                slideOffset = slidesToOffset * spec.slideWidth;
            }
        }
    }

    if (spec.centerMode) {
        if (spec.infinite) {
            slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);
        } else {
            slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);
        }
    }

    if (!spec.vertical) {
        targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;
    } else {
        targetLeft = spec.slideIndex * spec.slideHeight * -1 + verticalOffset;
    }

    if (spec.variableWidth === true) {
        var targetSlideIndex = void 0;
        if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {
            targetSlide = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(spec.trackRef).childNodes[spec.slideIndex];
        } else {
            targetSlideIndex = spec.slideIndex + spec.slidesToShow;
            targetSlide = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(spec.trackRef).childNodes[targetSlideIndex];
        }
        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
        if (spec.centerMode === true) {
            if (spec.infinite === false) {
                targetSlide = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(spec.trackRef).children[spec.slideIndex];
            } else {
                targetSlide = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];
            }

            if (targetSlide) {
                targetLeft = targetSlide.offsetLeft * -1 + (spec.listWidth - targetSlide.offsetWidth) / 2;
            }
        }
    }

    return targetLeft;
};
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/mixins/event-handlers.js




/* istanbul ignore next */
var EventHandlers = {

    // Event handler for previous and next
    changeSlide: function changeSlide(options) {
        var slideOffset = void 0,
            targetSlide = void 0;
        var unevenOffset = this.state.slideCount % this.props.slidesToScroll !== 0;
        var indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;

        if (options.message === 'previous') {
            slideOffset = indexOffset === 0 ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;
            targetSlide = this.state.currentSlide - slideOffset;
        } else if (options.message === 'next') {
            slideOffset = indexOffset === 0 ? this.props.slidesToScroll : indexOffset;
            targetSlide = this.state.currentSlide + slideOffset;
        } else if (options.message === 'dots' || options.message === 'children') {
            // Click on dots
            targetSlide = options.index * options.slidesToScroll;
            if (targetSlide === options.currentSlide) {
                return;
            }
        } else if (options.message === 'index') {
            targetSlide = options.index;
            if (targetSlide === options.currentSlide) {
                return;
            }
        }
        this.slideHandler(targetSlide);
    },


    // Accessiblity handler for previous and next
    keyHandler: function keyHandler(e) {
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!e.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (e.keyCode === 37 && this.props.accessibility === true) {
                this.changeSlide({
                    message: this.props.rtl === true ? 'next' : 'previous'
                });
            } else if (e.keyCode === 39 && this.props.accessibility === true) {
                this.changeSlide({
                    message: this.props.rtl === true ? 'previous' : 'next'
                });
            }
        }
    },


    // Focus on selecting a slide (click handler on track)
    selectHandler: function selectHandler(options) {
        this.changeSlide(options);
    },
    swipeStart: function swipeStart(e) {
        if (this.props.swipe === false || 'ontouchend' in document && this.props.swipe === false) {
            return;
        } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {
            return;
        }
        var posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;
        var posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;
        this.setState({
            dragging: true,
            touchObject: {
                startX: posX,
                startY: posY,
                curX: posX,
                curY: posY
            }
        });
    },
    swipeMove: function swipeMove(e) {
        if (!this.state.dragging) {
            return;
        }
        if (this.state.animating) {
            return;
        }
        var touchObject = this.state.touchObject;

        var curLeft = trackHelper_getTrackLeft(extends_default()({
            slideIndex: this.state.currentSlide,
            trackRef: this.refs.track
        }, this.props, this.state));

        touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
        touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
        touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));

        var positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);

        if (this.props.verticalSwiping === true) {
            touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
            positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
        }

        var currentSlide = this.state.currentSlide;
        var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);
        var swipeDirection = this.swipeDirection(this.state.touchObject);
        var touchSwipeLength = touchObject.swipeLength;

        if (this.props.infinite === false) {
            if (currentSlide === 0 && swipeDirection === 'right' || currentSlide + 1 >= dotCount && swipeDirection === 'left') {
                touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;

                if (this.state.edgeDragged === false && this.props.edgeEvent) {
                    this.props.edgeEvent(swipeDirection);
                    this.setState({ edgeDragged: true });
                }
            }
        }

        if (this.state.swiped === false && this.props.swipeEvent) {
            this.props.swipeEvent(swipeDirection);
            this.setState({ swiped: true });
        }

        var swipeLeft = curLeft + touchSwipeLength * positionOffset;
        this.setState({
            touchObject: touchObject,
            swipeLeft: swipeLeft,
            trackStyle: trackHelper_getTrackCSS(extends_default()({ left: swipeLeft }, this.props, this.state))
        });

        if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
            return;
        }
        if (touchObject.swipeLength > 4) {
            e.preventDefault();
        }
    },
    getNavigableIndexes: function getNavigableIndexes() {
        var max = void 0;
        var breakPoint = 0;
        var counter = 0;
        var indexes = [];

        if (!this.props.infinite) {
            max = this.state.slideCount;
        } else {
            breakPoint = this.props.slidesToShow * -1;
            counter = this.props.slidesToShow * -1;
            max = this.state.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + this.props.slidesToScroll;

            counter += this.props.slidesToScroll <= this.props.slidesToShow ? this.props.slidesToScroll : this.props.slidesToShow;
        }

        return indexes;
    },
    checkNavigable: function checkNavigable(index) {
        var navigables = this.getNavigableIndexes();
        var prevNavigable = 0;

        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }

                prevNavigable = navigables[n];
            }
        }

        return index;
    },
    getSlideCount: function getSlideCount() {
        var _this = this;

        var centerOffset = this.props.centerMode ? this.state.slideWidth * Math.floor(this.props.slidesToShow / 2) : 0;
        if (this.props.swipeToSlide) {
            var swipedSlide = void 0;
            var slickList = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.list);

            var slides = slickList.querySelectorAll(this.props.prefix + 'slick-slide');

            Array.from(slides).every(function (slide) {
                if (!_this.props.vertical) {
                    if (slide.offsetLeft - centerOffset + _this.getWidth(slide) / 2 > _this.state.swipeLeft * -1) {
                        swipedSlide = slide;
                        return false;
                    }
                } else if (slide.offsetTop + _this.getHeight(slide) / 2 > _this.state.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }

                return true;
            });
            var slidesTraversed = Math.abs(swipedSlide.dataset.index - this.state.currentSlide) || 1;
            return slidesTraversed;
        } else {
            return this.props.slidesToScroll;
        }
    },
    swipeEnd: function swipeEnd(e) {
        if (!this.state.dragging) {
            if (this.props.swipe) {
                e.preventDefault();
            }
            return;
        }
        var touchObject = this.state.touchObject;
        var minSwipe = this.state.listWidth / this.props.touchThreshold;
        var swipeDirection = this.swipeDirection(touchObject);

        if (this.props.verticalSwiping) {
            minSwipe = this.state.listHeight / this.props.touchThreshold;
        }

        // reset the state of touch related state variables.
        this.setState({
            dragging: false,
            edgeDragged: false,
            swiped: false,
            swipeLeft: null,
            touchObject: {}
        });

        if (!touchObject.swipeLength) {
            return;
        }

        if (touchObject.swipeLength > minSwipe) {
            e.preventDefault();

            var slideCount = void 0;
            var newSlide = void 0;

            switch (swipeDirection) {
                case 'left':
                case 'down':
                    newSlide = this.state.currentSlide + this.getSlideCount();
                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;
                    this.setState({ currentDirection: 0 });
                    break;
                case 'right':
                case 'up':
                    newSlide = this.state.currentSlide - this.getSlideCount();
                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;
                    this.setState({ currentDirection: 1 });
                    break;
                default:
                    slideCount = this.state.currentSlide;
            }
            this.slideHandler(slideCount);
        } else {
            // Adjust the track back to it's original position.
            var currentLeft = trackHelper_getTrackLeft(extends_default()({
                slideIndex: this.state.currentSlide,
                trackRef: this.track
            }, this.props, this.state));

            this.setState({
                trackStyle: getTrackAnimateCSS(extends_default()({ left: currentLeft }, this.props, this.state))
            });
        }
    },
    onInnerSliderEnter: function onInnerSliderEnter() {
        if (this.props.autoplay && this.props.pauseOnHover) {
            this.pause();
        }
    },
    onInnerSliderLeave: function onInnerSliderLeave() {
        if (this.props.autoplay && this.props.pauseOnHover) {
            this.autoPlay();
        }
    }
};

/* harmony default export */ var event_handlers = (EventHandlers);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/mixins/helpers.js





var helpers = {
    initialize: function initialize(props) {
        var _this = this;

        var slickList = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.list);
        var slideCount = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.count(props.children);
        var listWidth = this.getWidth(slickList);
        var trackWidth = this.getWidth(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.track));
        var slideWidth = void 0;

        if (!props.vertical) {
            var centerPaddingAdj = props.centerMode && parseInt(props.centerPadding) * 2;
            slideWidth = (listWidth - centerPaddingAdj) / props.slidesToShow;
        } else {
            slideWidth = listWidth;
        }

        var slideHeight = this.getHeight(slickList.querySelector('[data-index="0"]'));
        var listHeight = slideHeight * props.slidesToShow;

        var slidesToShow = props.slidesToShow || 1;
        var currentSlide = props.rtl ? slideCount - 1 - (slidesToShow - 1) - props.defaultActiveIndex : props.defaultActiveIndex;

        this.setState({
            slideCount: slideCount,
            slideWidth: slideWidth,
            listWidth: listWidth,
            trackWidth: trackWidth,
            currentSlide: currentSlide,
            slideHeight: slideHeight,
            listHeight: listHeight
        }, function () {

            var targetLeft = trackHelper_getTrackLeft(extends_default()({
                slideIndex: _this.state.currentSlide,
                trackRef: _this.track
            }, props, _this.state));
            // getCSS function needs previously set state
            var trackStyle = trackHelper_getTrackCSS(extends_default()({ left: targetLeft }, props, _this.state));

            _this.setState({ trackStyle: trackStyle });

            _this.autoPlay(); // once we're set up, trigger the initial autoplay.
        });
    },
    update: function update(props) {
        this.initialize(props);
    },
    getWidth: function getWidth(elem) {
        return elem.getBoundingClientRect().width || elem.offsetWidth;
    },
    getHeight: function getHeight(elem) {
        return elem.getBoundingClientRect().height || elem.offsetHeight;
    },
    adaptHeight: function adaptHeight() {
        if (this.props.adaptiveHeight) {
            var selector = '[data-index="' + this.state.currentSlide + '"]';
            if (this.list) {
                var slickList = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.list);
                var listHeight = slickList.querySelector(selector).offsetHeight;
                slickList.style.height = listHeight + 'px';
            }
        }
    },
    canGoNext: function canGoNext(opts) {
        var canGo = true;
        if (!opts.infinite) {
            if (opts.centerMode) {
                if (opts.currentSlide >= opts.slideCount - 1) {
                    canGo = false;
                }
            } else if (opts.slideCount <= opts.slidesToShow || opts.currentSlide >= opts.slideCount - opts.slidesToShow) {
                // check if all slides are shown in slider
                canGo = false;
            }
        }
        return canGo;
    },
    slideHandler: function slideHandler(index) {
        var _this2 = this;

        var rtl = this.props.rtl;

        // Functionality of animateSlide and postSlide is merged into this function

        var targetSlide = void 0,
            currentSlide = void 0;
        var callback = void 0;

        if (this.props.waitForAnimate && this.state.animating) {
            return;
        }

        if (this.props.animation === 'fade') {
            currentSlide = this.state.currentSlide;

            // don't change slide if it's not infinite and current slide is the first or last slide'
            if (this.props.infinite === false && (index < 0 || index >= this.state.slideCount)) {
                return;
            }

            //  Shifting targetSlide back into the range
            if (index < 0) {
                targetSlide = index + this.state.slideCount;
            } else if (index >= this.state.slideCount) {
                targetSlide = index - this.state.slideCount;
            } else {
                targetSlide = index;
            }

            if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {
                this.setState({
                    lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)
                });
            }

            callback = function callback() {
                _this2.setState({
                    animating: false
                });
                _this2.props.onChange(targetSlide);
                delete _this2.animationEndCallback;
            };

            this.setState({
                animating: true,
                currentSlide: targetSlide
            }, function () {
                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);
            });

            this.autoPlay();
            return;
        }

        targetSlide = index;

        if (rtl) {
            if (targetSlide < 0) {
                if (this.props.infinite === false) {
                    currentSlide = 0;
                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                    if (targetSlide + this.props.slidesToScroll <= 0) {
                        currentSlide = this.state.slideCount + targetSlide;
                        targetSlide = this.state.slideCount - this.props.slidesToScroll;
                    } else {
                        currentSlide = targetSlide = 0;
                    }
                } else {
                    // this.state.slideCount % this.props.slidesToScroll
                    currentSlide = this.state.slideCount + targetSlide;
                }
            } else if (targetSlide >= this.state.slideCount) {
                if (this.props.infinite === false) {
                    currentSlide = this.state.slideCount - this.props.slidesToShow;
                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                    currentSlide = 0;
                } else {
                    currentSlide = targetSlide - this.state.slideCount;
                }
            } else {
                currentSlide = targetSlide;
            }
        } else if (targetSlide < 0) {
            if (this.props.infinite === false) {
                currentSlide = 0;
            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                currentSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;
            } else {
                currentSlide = this.state.slideCount + targetSlide;
            }
        } else if (targetSlide >= this.state.slideCount) {
            if (this.props.infinite === false) {
                currentSlide = this.state.slideCount - this.props.slidesToShow;
            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                currentSlide = 0;
            } else {
                currentSlide = targetSlide - this.state.slideCount;
            }
        } else {
            currentSlide = targetSlide;
        }

        var targetLeft = trackHelper_getTrackLeft(extends_default()({
            slideIndex: targetSlide,
            trackRef: this.track
        }, this.props, this.state));

        var currentLeft = trackHelper_getTrackLeft(extends_default()({
            slideIndex: currentSlide,
            trackRef: this.track
        }, this.props, this.state));

        if (this.props.infinite === false) {
            targetLeft = currentLeft;
        }

        if (this.props.lazyLoad) {
            var loaded = true;
            var slidesToLoad = [];

            var sliderIndex = targetSlide < 0 ? this.state.slideCount + targetSlide : currentSlide;

            for (var i = sliderIndex; i < sliderIndex + this.props.slidesToShow; i++) {
                var k = i;
                if (rtl) {
                    k = i >= this.state.slideCount ? this.state.slideCount * 2 - i - 1 : this.state.slideCount - i - 1;
                }

                loaded = loaded && this.state.lazyLoadedList.indexOf(k) >= 0;
                if (!loaded) {
                    slidesToLoad.push(k);
                }
            }
            if (!loaded) {
                this.setState({
                    lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)
                });
            }
        }

        // Slide Transition happens here.
        // animated transition happens to target Slide and
        // non - animated transition happens to current Slide
        // If CSS transitions are false, directly go the current slide.
        /* istanbul ignore if */
        if (this.props.useCSS === false) {
            this.setState({
                currentSlide: currentSlide,
                trackStyle: trackHelper_getTrackCSS(extends_default()({ left: currentLeft }, this.props, this.state))
            }, function () {
                _this2.props.onChange(currentSlide);
            });
        } else {

            var nextStateChanges = {
                animating: false,
                currentSlide: currentSlide,
                trackStyle: trackHelper_getTrackCSS(extends_default()({ left: currentLeft }, this.props, this.state)),
                swipeLeft: null
            };

            callback = function callback() {
                _this2.setState(nextStateChanges);
                _this2.props.onChange(currentSlide);
                delete _this2.animationEndCallback;
            };

            this.setState({
                animating: true,
                currentSlide: currentSlide,
                trackStyle: getTrackAnimateCSS(extends_default()({ left: targetLeft }, this.props, this.state))
            }, function () {
                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);
            });
        }

        this.autoPlay();
    },


    // 鼠标悬浮在 arrow 上时作出动画反馈
    arrowHoverHandler: function arrowHoverHandler(msg) {
        var offset = 30; // slide 的位置偏移量
        var targetLeft = trackHelper_getTrackLeft(extends_default()({
            slideIndex: this.state.currentSlide,
            trackRef: this.track
        }, this.props, this.state));

        var left = void 0;
        /* istanbul ignore next */
        if (msg === 'next') {
            left = targetLeft - offset;
        } else if (msg === 'prev') {
            left = targetLeft + offset;
        } else {
            left = targetLeft;
        }

        this.setState({
            trackStyle: getTrackAnimateCSS(extends_default()({
                left: left }, this.props, this.state))
        });
    },
    swipeDirection: function swipeDirection(touchObject) {

        /* istanbul ignore next */
        var swipeAngle = void 0;
        /* istanbul ignore next */
        var xDist = touchObject.startX - touchObject.curX;
        /* istanbul ignore next */
        var yDist = touchObject.startY - touchObject.curY;
        /* istanbul ignore next */
        var r = Math.atan2(yDist, xDist);
        /* istanbul ignore next */
        swipeAngle = Math.round(r * 180 / Math.PI);
        /* istanbul ignore next */
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        /* istanbul ignore next */
        if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
            return this.props.rtl === false ? 'left' : 'right';
        }
        /* istanbul ignore next */
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return this.props.rtl === false ? 'right' : 'left';
        }
        /* istanbul ignore next */
        if (this.props.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        /* istanbul ignore next */
        return 'vertical';
    },
    play: function play() {
        var nextIndex = void 0;
        if (!this.hasMounted) {
            /* istanbul ignore next */
            return false;
        }
        if (this.props.rtl) {
            nextIndex = this.state.currentSlide - this.props.slidesToScroll;
        } else if (this.canGoNext(extends_default()({}, this.props, this.state))) {
            nextIndex = this.state.currentSlide + this.props.slidesToScroll;
        } else {
            return false;
        }
        this.slideHandler(nextIndex);
    },
    autoPlay: function autoPlay() {
        if (this.state.autoPlayTimer) {
            clearTimeout(this.state.autoPlayTimer);
        }
        if (this.props.autoplay) {
            this.setState({
                autoPlayTimer: setTimeout(this.play.bind(this), this.props.autoplaySpeed)
            });
        }
    },
    pause: function pause() {
        /* istanbul ignore next */
        if (this.state.autoPlayTimer) {
            clearTimeout(this.state.autoPlayTimer);
            this.setState({
                autoPlayTimer: null
            });
        }
    }
};

/* harmony default export */ var mixins_helpers = (helpers);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/arrow.js





var arrow__class, arrow__temp;







/**
 * slider arrow
 * 左右控制箭头
 */

var arrow_noop = func.noop;
var arrow_Arrow = (arrow__temp = arrow__class = function (_Component) {
    inherits_default()(Arrow, _Component);

    function Arrow() {
        classCallCheck_default()(this, Arrow);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Arrow.isDisabled = function isDisabled(props) {
        var infinite = props.infinite,
            type = props.type,
            centerMode = props.centerMode,
            currentSlide = props.currentSlide,
            slideCount = props.slideCount,
            slidesToShow = props.slidesToShow;


        if (infinite) {
            return false;
        }

        // 下一个 index 大于总数？？
        if (slideCount <= slidesToShow) {
            return true;
        }

        // 向前箭头：当前是第 0 个
        if (type === 'prev') {
            return currentSlide <= 0;
        }

        if (centerMode && currentSlide >= slideCount - 1) {
            // 向后箭头：居中模式，当前 index 大于最大 index
            return true;
        } else if (currentSlide >= slideCount - slidesToShow) {
            // 向后箭头：普通模式，当前 index 大于 总数 - 下一个 index ？？？
            return true;
        }

        return false;
    };

    Arrow.prototype.handleClick = function handleClick(options, e) {
        e && e.preventDefault();

        // TODO hack
        if (options.message === 'prev') {
            options.message = 'previous';
        }

        this.props.clickHandler(options, e);
    };

    Arrow.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            type = _props.type,
            arrowSize = _props.arrowSize,
            arrowPosition = _props.arrowPosition,
            arrowDirection = _props.arrowDirection,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            children = _props.children;


        var others = util_obj.pickOthers(Arrow.propTypes, this.props);
        var iconType = Arrow.ARROW_ICON_TYPES[arrowDirection][type];
        var disabled = Arrow.isDisabled(this.props);

        var arrowClazz = _classnames_2_2_6_classnames_default()([prefix + 'slick-arrow', prefix + 'slick-' + type, arrowPosition, arrowSize, arrowDirection], { disabled: disabled });

        var arrowProps = extends_default()({}, others, {
            key: type,
            'data-role': 'none',
            className: arrowClazz,
            style: { display: 'block' },
            onClick: disabled ? null : this.handleClick.bind(this, { message: type }),
            onMouseEnter: disabled ? null : onMouseEnter,
            onMouseLeave: disabled ? null : onMouseLeave
        });

        if (children) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.only(children), arrowProps);
        } else {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                extends_default()({ type: 'button', role: 'button' }, arrowProps),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: iconType })
            );
        }
    };

    return Arrow;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), arrow__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['prev', 'next']).isRequired,
    centerMode: _prop_types_15_7_2_prop_types_default.a.bool,
    currentSlide: _prop_types_15_7_2_prop_types_default.a.number,
    infinite: _prop_types_15_7_2_prop_types_default.a.bool,
    clickHandler: _prop_types_15_7_2_prop_types_default.a.func,
    slideCount: _prop_types_15_7_2_prop_types_default.a.number,
    slidesToShow: _prop_types_15_7_2_prop_types_default.a.number,
    arrow: _prop_types_15_7_2_prop_types_default.a.element,
    arrowSize: _prop_types_15_7_2_prop_types_default.a.string,
    arrowPosition: _prop_types_15_7_2_prop_types_default.a.string,
    arrowDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.node
}, arrow__class.defaultProps = {
    onMouseEnter: arrow_noop,
    onMouseLeave: arrow_noop
}, arrow__class.ARROW_ICON_TYPES = {
    hoz: { prev: 'arrow-left', next: 'arrow-right' },
    ver: { prev: 'arrow-up', next: 'arrow-down' }
}, arrow__temp);
arrow_Arrow.displayName = 'Arrow';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/track.js





var track__class, track__temp;






/**
 * Slider Track
 * 内容轨道
 */

var track_getSlideClasses = function getSlideClasses(specProps) {
    var _classNames;

    var prefix = specProps.prefix;
    var slickActive = void 0,
        slickCenter = void 0;
    var centerOffset = void 0,
        index = void 0;

    if (specProps.rtl) {
        index = specProps.slideCount - 1 - specProps.activeIndex;
    } else {
        index = specProps.activeIndex;
    }

    var slickCloned = index < 0 || index >= specProps.slideCount;
    if (specProps.centerMode) {
        centerOffset = Math.floor(specProps.slidesToShow / 2);
        slickCenter = (index - specProps.currentSlide) % specProps.slideCount === 0;
        if (index > specProps.currentSlide - centerOffset - 1 && index <= specProps.currentSlide + centerOffset) {
            slickActive = true;
        }
    } else {
        slickActive = specProps.currentSlide <= index && index < specProps.currentSlide + specProps.slidesToShow;
    }

    return _classnames_2_2_6_classnames_default()(prefix + 'slick-slide', (_classNames = {}, _classNames[prefix + 'slick-active'] = slickActive, _classNames[prefix + 'slick-center'] = slickCenter, _classNames[prefix + 'slick-cloned'] = slickCloned, _classNames));
};

var getSlideStyle = function getSlideStyle(specProps) {
    var style = {};

    if (specProps.variableWidth === undefined || specProps.variableWidth === false) {
        style.width = specProps.slideWidth;
    }

    if (specProps.animation === 'fade') {
        style.position = 'relative';

        style.opacity = specProps.currentSlide === specProps.activeIndex ? 1 : 0;
        style.visibility = specProps.currentSlide >= specProps.activeIndex ? 'visible' : 'hidden';
        style.transition = 'opacity ' + specProps.speed + 'ms ' + specProps.cssEase;
        style.WebkitTransition = 'opacity ' + specProps.speed + 'ms ' + specProps.cssEase;

        if (specProps.vertical) {
            style.top = -specProps.activeIndex * specProps.slideHeight;
        } else {
            style.left = -specProps.activeIndex * specProps.slideWidth;
        }
    }

    if (specProps.vertical) {
        style.width = '100%';
    }

    return style;
};

var getKey = function getKey(child, fallbackKey) {
    // key could be a zero
    return child.key === null || child.key === undefined ? fallbackKey : child.key;
};

var track_renderSlides = function renderSlides(specProps) {
    var key = void 0;
    var slides = [];
    var preCloneSlides = [];
    var postCloneSlides = [];
    var count = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.count(specProps.children);
    var child = void 0;

    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(specProps.children, function (elem, index) {
        var childOnClickOptions = {
            message: 'children',
            index: index,
            slidesToScroll: specProps.slidesToScroll,
            currentSlide: specProps.currentSlide
        };

        if (!specProps.lazyLoad | (specProps.lazyLoad && specProps.lazyLoadedList.indexOf(index) >= 0)) {
            child = elem;
        } else {
            child = elem.key ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { key: elem.key }) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', null);
        }
        var childStyle = getSlideStyle(extends_default()({}, specProps, { activeIndex: index }));
        var slickClasses = track_getSlideClasses(extends_default()({ activeIndex: index }, specProps));
        var cssClasses = void 0;

        if (child.props.className) {
            cssClasses = _classnames_2_2_6_classnames_default()(slickClasses, child.props.className);
        } else {
            cssClasses = slickClasses;
        }

        var onClick = function onClick(e) {
            // only child === elem, it will has .props.onClick;
            child.props && child.props.onClick && elem.props.onClick(e);
            if (specProps.focusOnSelect) {
                specProps.focusOnSelect(childOnClickOptions);
            }
        };

        slides.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
            key: 'original' + getKey(child, index),
            'data-index': index,
            className: cssClasses,
            tabIndex: '-1',
            dir: specProps.rtl ? 'rtl' : 'ltr',
            // server-side render depend on elements of their own style
            style: !dom.hasDOM ? extends_default()({ outline: 'none' }, childStyle, child.props.style) : extends_default()({ outline: 'none' }, child.props.style, childStyle),
            onClick: onClick
        }));

        // variableWidth doesn't wrap properly.
        if (specProps.infinite && specProps.animation !== 'fade') {
            var infiniteCount = specProps.variableWidth ? specProps.slidesToShow + 1 : specProps.slidesToShow;

            if (index >= count - infiniteCount) {
                key = -(count - index);
                preCloneSlides.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                    key: 'precloned' + getKey(child, key),
                    'data-index': key,
                    className: cssClasses,
                    style: extends_default()({}, child.props.style, childStyle)
                }));
            }

            if (index < infiniteCount) {
                key = count + index;
                postCloneSlides.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                    key: 'postcloned' + getKey(child, key),
                    'data-index': key,
                    className: cssClasses,
                    style: extends_default()({}, child.props.style, childStyle)
                }));
            }
        }
    });
    // To support server-side rendering
    if (!dom.hasDOM) {
        return slides.slice(specProps.currentSlide, specProps.currentSlide + specProps.slidesToShow);
    }
    if (specProps.rtl) {
        return preCloneSlides.concat(slides, postCloneSlides).reverse();
    } else {
        return preCloneSlides.concat(slides, postCloneSlides);
    }
};

var slick_track_Track = (track__temp = track__class = function (_Component) {
    inherits_default()(Track, _Component);

    function Track() {
        classCallCheck_default()(this, Track);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Track.prototype.render = function render() {
        var slides = track_renderSlides(this.props);
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: this.props.prefix + 'slick-track', style: this.props.trackStyle },
            slides
        );
    };

    return Track;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), track__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    trackStyle: _prop_types_15_7_2_prop_types_default.a.object
}, track__class.defaultProps = {
    prefix: 'next-'
}, track__temp);
slick_track_Track.displayName = 'Track';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/dots.js





var dots__class, dots__temp;






/**
 * slider dots
 * 导航锚点
 */

var dots_noop = func.noop;
var dots_Dots = (dots__temp = dots__class = function (_React$Component) {
    inherits_default()(Dots, _React$Component);

    function Dots() {
        classCallCheck_default()(this, Dots);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Dots.prototype.handleChangeSlide = function handleChangeSlide(options, e) {
        e.preventDefault();

        this.props.changeSlide(options);
    };

    Dots.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            slideCount = _props.slideCount,
            slidesToScroll = _props.slidesToScroll,
            currentSlide = _props.currentSlide,
            dotsClass = _props.dotsClass,
            dotsDirection = _props.dotsDirection,
            dotsRender = _props.dotsRender,
            triggerType = _props.triggerType,
            rtl = _props.rtl;


        var dotsClazz = _classnames_2_2_6_classnames_default()(prefix + 'slick-dots', dotsDirection, dotsClass);
        var dotCount = Math.ceil(slideCount / slidesToScroll);
        var children = [];

        for (var i = 0; i < dotCount; i++) {
            var _handleProp;

            var leftBound = i * slidesToScroll;
            var rightBound = leftBound + slidesToScroll - 1;
            var itemClazz = _classnames_2_2_6_classnames_default()(prefix + 'slick-dots-item', {
                active: currentSlide >= leftBound && currentSlide <= rightBound
            });
            var dotOptions = {
                message: 'dots',
                index: i,
                slidesToScroll: slidesToScroll,
                currentSlide: currentSlide
            };
            // 除非设置为hover，默认使用click触发
            var handleProp = (_handleProp = {}, _handleProp[triggerType.toLowerCase() === 'hover' ? 'onMouseEnter' : 'onClick'] = this.handleChangeSlide.bind(this, dotOptions), _handleProp);

            var docIndex = i;
            var currentSlideIndex = i;
            if (rtl) {
                docIndex = dotCount - 1 - i;
                currentSlideIndex = dotCount - 1 - currentSlide;
            }

            children.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'li',
                extends_default()({ key: i, className: itemClazz }, handleProp),
                dotsRender instanceof Function ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    null,
                    dotsRender(docIndex, currentSlideIndex)
                ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('button', null)
            ));
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            { className: dotsClazz },
            children
        );
    };

    return Dots;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), dots__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    currentSlide: _prop_types_15_7_2_prop_types_default.a.number,
    changeSlide: _prop_types_15_7_2_prop_types_default.a.func,
    dotsClass: _prop_types_15_7_2_prop_types_default.a.string,
    slideCount: _prop_types_15_7_2_prop_types_default.a.number,
    slidesToScroll: _prop_types_15_7_2_prop_types_default.a.number,
    dotsDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    dotsRender: _prop_types_15_7_2_prop_types_default.a.func,
    triggerType: _prop_types_15_7_2_prop_types_default.a.string
}, dots__class.defaultProps = {
    changeSlide: dots_noop
}, dots__temp);
dots_Dots.displayName = 'Dots';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slick/inner-slider.js





var inner_slider__class, inner_slider__temp;










/**
 * Slider inner
 */

var inner_slider_noop = func.noop;
var inner_slider_InnerSlider = (inner_slider__temp = inner_slider__class = function (_React$Component) {
    inherits_default()(InnerSlider, _React$Component);

    function InnerSlider(props) {
        classCallCheck_default()(this, InnerSlider);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        _this.state = {
            animating: false,
            dragging: false,
            autoPlayTimer: null,
            currentDirection: 0,
            currentLeft: null,
            currentSlide: 'activeIndex' in props ? props.activeIndex : props.defaultActiveIndex,
            direction: 1,
            listWidth: null,
            listHeight: null,
            slideCount: null,
            slideWidth: null,
            slideHeight: null,
            swipeLeft: null,
            touchObject: {
                startX: 0,
                startY: 0,
                curX: 0,
                curY: 0
            },

            lazyLoadedList: [],

            // added for react
            initialized: false,
            edgeDragged: false,
            swiped: false, // used by swipeEvent. differentites between touch and swipe.
            trackStyle: {},
            trackWidth: 0
        };

        // this.filterProps = Object.assign({}, sliderPropTypes, InnerSlider.propTypes);

        func.bindCtx(_this, ['onWindowResized', 'selectHandler', 'changeSlide', 'onInnerSliderEnter', 'onInnerSliderLeave', 'swipeStart', 'swipeMove', 'swipeEnd']);
        return _this;
    }

    InnerSlider.prototype.componentWillMount = function componentWillMount() {
        this.hasMounted = true;

        var _props = this.props,
            lazyLoad = _props.lazyLoad,
            children = _props.children,
            slidesToShow = _props.slidesToShow;
        var currentSlide = this.state.currentSlide;

        var lazyLoadedList = [];

        if (lazyLoad) {
            for (var i = 0, j = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.count(children); i < j; i++) {
                if (i >= currentSlide && i < currentSlide + slidesToShow) {
                    lazyLoadedList.push(i);
                }
            }

            if (this.state.lazyLoadedList.length === 0) {
                this.setState({
                    lazyLoadedList: lazyLoadedList
                });
            }
        }
    };

    InnerSlider.prototype.componentDidMount = function componentDidMount() {
        // TODO Hack for autoplay -- Inspect Later
        this.initialize(this.props);
        this.adaptHeight();

        if (this.props.activeIndex) {
            this.slickGoTo(this.props.activeIndex);
        }

        /* istanbul ignore if  */
        if (window) {
            // To support server-side rendering
            util_events.on(window, 'resize', this.onWindowResized);
        }
    };

    InnerSlider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.defaultActiveIndex !== nextProps.defaultActiveIndex) {
            this.setState({
                currentSlide: nextProps.defaultActiveIndex
            });
        }

        if (this.props.activeIndex !== nextProps.activeIndex) {
            this.slickGoTo(nextProps.activeIndex);
        } else if (this.state.currentSlide >= nextProps.children.length) {
            this.update(nextProps);
            this.changeSlide({
                message: 'index',
                index: nextProps.children.length - nextProps.slidesToShow,
                currentSlide: this.state.currentSlide
            });
        } else {
            var others = ['children'];
            var update = !util_obj.shallowEqual(util_obj.pickOthers(others, this.props), util_obj.pickOthers(others, nextProps));
            if (update) {
                this.update(nextProps);
            }
        }
    };

    InnerSlider.prototype.componentDidUpdate = function componentDidUpdate() {
        this.adaptHeight();
    };

    InnerSlider.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.animationEndCallback) {
            clearTimeout(this.animationEndCallback);
        }

        util_events.off(window, 'resize', this.onWindowResized);

        if (this.state.autoPlayTimer) {
            clearInterval(this.state.autoPlayTimer);
        }
    };

    InnerSlider.prototype.onWindowResized = function onWindowResized() {
        this.update(this.props);
        // animating state should be cleared while resizing, otherwise autoplay stops working
        this.setState({ animating: false });
        clearTimeout(this.animationEndCallback);
        delete this.animationEndCallback;
    };

    InnerSlider.prototype.slickGoTo = function slickGoTo(slide) {
        typeof slide === 'number' && this.changeSlide({
            message: 'index',
            index: slide,
            currentSlide: this.state.currentSlide
        });
    };

    InnerSlider.prototype.onEnterArrow = function onEnterArrow(msg) {
        this.arrowHoverHandler(msg);
    };

    InnerSlider.prototype.onLeaveArrow = function onLeaveArrow() {
        this.arrowHoverHandler();
    };

    InnerSlider.prototype._instanceRefHandler = function _instanceRefHandler(attr, ref) {
        this[attr] = ref;
    };

    InnerSlider.prototype.render = function render() {
        var _props2 = this.props,
            prefix = _props2.prefix,
            animation = _props2.animation,
            arrows = _props2.arrows,
            arrowSize = _props2.arrowSize,
            arrowPosition = _props2.arrowPosition,
            arrowDirection = _props2.arrowDirection,
            dots = _props2.dots,
            dotsClass = _props2.dotsClass,
            cssEase = _props2.cssEase,
            speed = _props2.speed,
            infinite = _props2.infinite,
            centerMode = _props2.centerMode,
            centerPadding = _props2.centerPadding,
            lazyLoad = _props2.lazyLoad,
            dotsDirection = _props2.dotsDirection,
            rtl = _props2.rtl,
            slidesToShow = _props2.slidesToShow,
            slidesToScroll = _props2.slidesToScroll,
            variableWidth = _props2.variableWidth,
            vertical = _props2.vertical,
            verticalSwiping = _props2.verticalSwiping,
            focusOnSelect = _props2.focusOnSelect,
            children = _props2.children,
            dotsRender = _props2.dotsRender,
            triggerType = _props2.triggerType;
        var _state = this.state,
            currentSlide = _state.currentSlide,
            lazyLoadedList = _state.lazyLoadedList,
            slideCount = _state.slideCount,
            slideWidth = _state.slideWidth,
            slideHeight = _state.slideHeight,
            trackStyle = _state.trackStyle,
            listHeight = _state.listHeight,
            dragging = _state.dragging;

        // TODO 需要精简一下

        var trackProps = {
            prefix: prefix,
            animation: animation,
            cssEase: cssEase,
            speed: speed,
            infinite: infinite,
            centerMode: centerMode,
            focusOnSelect: focusOnSelect ? this.selectHandler : null,
            currentSlide: currentSlide,
            lazyLoad: lazyLoad,
            lazyLoadedList: lazyLoadedList,
            rtl: rtl,
            slideWidth: slideWidth,
            slideHeight: slideHeight,
            slidesToShow: slidesToShow,
            slidesToScroll: slidesToScroll,
            slideCount: slideCount,
            trackStyle: trackStyle,
            variableWidth: variableWidth,
            vertical: vertical,
            verticalSwiping: verticalSwiping,
            triggerType: triggerType
            // clickHandler: this.changeSlide, unused
        };

        var dotsEle = void 0;

        if (dots === true && slideCount > slidesToShow) {
            var dotProps = {
                prefix: prefix,
                rtl: rtl,
                dotsClass: dotsClass,
                slideCount: slideCount,
                slidesToShow: slidesToShow,
                currentSlide: currentSlide,
                slidesToScroll: slidesToScroll,
                dotsDirection: dotsDirection,
                changeSlide: this.changeSlide,
                dotsRender: dotsRender,
                triggerType: triggerType
            };

            dotsEle = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(dots_Dots, dotProps);
        }

        var prevArrow = void 0,
            nextArrow = void 0;

        var arrowProps = {
            prefix: prefix,
            rtl: rtl,
            arrowSize: arrowSize,
            arrowPosition: arrowPosition,
            arrowDirection: arrowDirection,
            infinite: infinite,
            centerMode: centerMode,
            currentSlide: currentSlide,
            slideCount: slideCount,
            slidesToShow: slidesToShow,
            clickHandler: this.changeSlide
        };

        if (arrows) {
            prevArrow = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                arrow_Arrow,
                extends_default()({}, arrowProps, {
                    type: 'prev',
                    'aria-label': 'Previous',
                    ref: this._instanceRefHandler.bind(this, 'pArrow'),
                    onMouseEnter: animation ? this.onEnterArrow.bind(this, 'prev') : inner_slider_noop,
                    onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'prev') : inner_slider_noop
                }),
                this.props.prevArrow
            );

            nextArrow = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                arrow_Arrow,
                extends_default()({}, arrowProps, {
                    type: 'next',
                    'aria-label': 'Next',
                    ref: this._instanceRefHandler.bind(this, 'nArrow'),
                    onMouseEnter: animation ? this.onEnterArrow.bind(this, 'next') : inner_slider_noop,
                    onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'next') : inner_slider_noop
                }),
                this.props.nextArrow
            );
        }

        var verticalHeightStyle = vertical ? {
            height: listHeight
        } : null;

        var centerPaddingStyle = void 0;
        if (centerMode) {
            centerPaddingStyle = vertical ? { padding: centerPadding + ' 0px' } : { padding: '0px ' + centerPadding };
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            {
                className: prefix + 'slick-container ' + prefix + 'slick-initialized',
                onMouseEnter: this.onInnerSliderEnter,
                onMouseLeave: this.onInnerSliderLeave
            },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                {
                    ref: this._instanceRefHandler.bind(this, 'list'),
                    className: prefix + 'slick-list',
                    style: extends_default()({}, verticalHeightStyle, centerPaddingStyle),
                    onMouseDown: this.swipeStart,
                    onMouseUp: this.swipeEnd,
                    onTouchStart: this.swipeStart,
                    onTouchEnd: this.swipeEnd,
                    onMouseMove: dragging ? this.swipeMove : null,
                    onMouseLeave: dragging ? this.swipeEnd : null,
                    onTouchMove: dragging ? this.swipeMove : null,
                    onTouchCancel: dragging ? this.swipeEnd : null },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    slick_track_Track,
                    extends_default()({ ref: this._instanceRefHandler.bind(this, 'track') }, trackProps),
                    children
                )
            ),
            prevArrow,
            nextArrow,
            dotsEle
        );
    };

    return InnerSlider;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), inner_slider__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
    arrows: _prop_types_15_7_2_prop_types_default.a.bool,
    arrowSize: _prop_types_15_7_2_prop_types_default.a.oneOf(['medium', 'large']),
    arrowPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['inner', 'outer']),
    arrowDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    centerPadding: _prop_types_15_7_2_prop_types_default.a.any,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    centerMode: _prop_types_15_7_2_prop_types_default.a.bool,
    dots: _prop_types_15_7_2_prop_types_default.a.bool,
    dotsDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    dotsClass: _prop_types_15_7_2_prop_types_default.a.string,
    focusOnSelect: _prop_types_15_7_2_prop_types_default.a.bool,
    cssEase: _prop_types_15_7_2_prop_types_default.a.string,
    speed: _prop_types_15_7_2_prop_types_default.a.number,
    infinite: _prop_types_15_7_2_prop_types_default.a.bool,
    defaultActiveIndex: _prop_types_15_7_2_prop_types_default.a.number,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    slidesToShow: _prop_types_15_7_2_prop_types_default.a.number,
    lazyLoad: _prop_types_15_7_2_prop_types_default.a.bool,
    activeIndex: _prop_types_15_7_2_prop_types_default.a.number,
    slidesToScroll: _prop_types_15_7_2_prop_types_default.a.number,
    variableWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    vertical: _prop_types_15_7_2_prop_types_default.a.bool,
    verticalSwiping: _prop_types_15_7_2_prop_types_default.a.bool,
    prevArrow: _prop_types_15_7_2_prop_types_default.a.element,
    nextArrow: _prop_types_15_7_2_prop_types_default.a.element,
    dotsRender: _prop_types_15_7_2_prop_types_default.a.func,
    triggerType: _prop_types_15_7_2_prop_types_default.a.string
}, inner_slider__class.defaultProps = {
    prefix: 'next-',
    arrowDirection: 'hoz',
    triggerType: 'click'
}, inner_slider__temp);

// extend prototype

inner_slider_InnerSlider.displayName = 'InnerSlider';
extends_default()(inner_slider_InnerSlider.prototype, mixins_helpers);
extends_default()(inner_slider_InnerSlider.prototype, event_handlers);

/* harmony default export */ var inner_slider = (inner_slider_InnerSlider);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/slider.js





var slider__class, slider__temp2;








/**
 * Slider
*/
var slider_slider_Slider = (slider__temp2 = slider__class = function (_Component) {
  inherits_default()(Slider, _Component);

  function Slider() {
    var _temp, _this, _ret;

    classCallCheck_default()(this, Slider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.resize = function () {
      // export api
      _this.innerSlider.onWindowResized();
    }, _temp), possibleConstructorReturn_default()(_this, _ret);
  }

  Slider.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        prefix = _props.prefix,
        arrowPosition = _props.arrowPosition,
        slideDirection = _props.slideDirection,
        style = _props.style,
        className = _props.className,
        children = _props.children;


    var sliderProps = util_obj.pickOthers(['className', 'style', 'slideDirection'], this.props);
    var slideCount = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.count(children);

    if (slideCount === 0) {
      // 没有 item 时不显示 slider
      return null;
    } else if (slideCount === 1) {
      // 单个 item 时不显示箭头和控制器
      sliderProps.arrows = false;
      sliderProps.autoplay = false;
      sliderProps.draggable = false;
    }

    var clazz = _classnames_2_2_6_classnames_default()([prefix + 'slick', prefix + 'slick-' + arrowPosition, prefix + 'slick-' + slideDirection], className);

    if (slideDirection === 'ver') {
      // 向下传递时使用 vertical 属性
      sliderProps.vertical = true;
      sliderProps.verticalSwiping = true;
    }

    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
      config_provider,
      { rtl: false },
      external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
        'div',
        extends_default()({ role: 'toolbar', dir: 'ltr', className: clazz, style: style }, util_obj.pickOthers(extends_default()({}, Slider.propTypes, inner_slider.propTypes), sliderProps)),
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(inner_slider, extends_default()({ ref: function ref(InnerSlider) {
            return _this2.innerSlider = InnerSlider;
          } }, sliderProps))
      )
    );
  };

  return Slider;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), slider__class.propTypes = {
  prefix: _prop_types_15_7_2_prop_types_default.a.string,
  rtl: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 自定义传入的样式
   */
  className: _prop_types_15_7_2_prop_types_default.a.any,
  /**
   * 是否使用自适应高度
   */
  adaptiveHeight: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 动效类型，默认是'slide'
   */
  animation: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.bool]),
  /**
   * 是否显示箭头
   */
  arrows: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 导航箭头大小 可选值: 'medium', 'large'
   */
  arrowSize: _prop_types_15_7_2_prop_types_default.a.oneOf(['medium', 'large']),
  /**
   * 导航箭头位置 可选值: 'inner', 'outer'
   */
  arrowPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['inner', 'outer']),
  /**
   * 导航箭头的方向 可选值: 'hoz', 'ver'
   */
  arrowDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
  /**
   * 是否自动播放
   */
  autoplay: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 自动播放的速度
   */
  autoplaySpeed: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 向后箭头
   */
  nextArrow: _prop_types_15_7_2_prop_types_default.a.element,
  /**
   * 向前箭头
   */
  prevArrow: _prop_types_15_7_2_prop_types_default.a.element,
  /**
   * 是否启用居中模式
   */
  centerMode: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否显示导航锚点
   */
  dots: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 导航锚点位置
   */
  dotsDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
  dotsClass: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 自定义导航锚点
   */
  dotRender: _prop_types_15_7_2_prop_types_default.a.func,
  /**
   * 是否可拖拽
   */
  draggable: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否使用无穷循环模式
   */
  infinite: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 初始被激活的轮播图
   */
  defaultActiveIndex: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 是否启用懒加载
   */
  lazyLoad: _prop_types_15_7_2_prop_types_default.a.bool,
  slide: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 轮播方向
   */
  slideDirection: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
  /**
   * 同时展示的图片数量
   */
  slidesToShow: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 同时滑动的图片数量
   */
  slidesToScroll: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 轮播速度
   */
  speed: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 跳转到指定的轮播图（受控）
   */
  activeIndex: _prop_types_15_7_2_prop_types_default.a.number,
  /**
   * 锚点导航触发方式
   */
  triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
  /**
   * 轮播切换的回调函数
   * @param {Number} index 幻灯片的索引
   */
  onChange: _prop_types_15_7_2_prop_types_default.a.func,
  children: _prop_types_15_7_2_prop_types_default.a.any,
  /**
   * 自定义传入的class
   */
  style: _prop_types_15_7_2_prop_types_default.a.object,
  /**
   * Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览
   */
  centerPadding: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * CSS3 Animation Easing,默认‘ease’
   */
  cssEase: _prop_types_15_7_2_prop_types_default.a.string, // used
  edgeFriction: _prop_types_15_7_2_prop_types_default.a.number, // 非无限轮播滑动到边缘时的阻力
  /**
   * 多图轮播时，点击选中后自动居中
   */
  focusOnSelect: _prop_types_15_7_2_prop_types_default.a.bool,
  pauseOnHover: _prop_types_15_7_2_prop_types_default.a.bool, // 鼠标经过时停止播放
  swipe: _prop_types_15_7_2_prop_types_default.a.bool,
  swipeToSlide: _prop_types_15_7_2_prop_types_default.a.bool,
  touchMove: _prop_types_15_7_2_prop_types_default.a.bool,
  touchThreshold: _prop_types_15_7_2_prop_types_default.a.number,
  useCSS: _prop_types_15_7_2_prop_types_default.a.bool,
  variableWidth: _prop_types_15_7_2_prop_types_default.a.bool, // used
  waitForAnimate: _prop_types_15_7_2_prop_types_default.a.bool,
  edgeEvent: _prop_types_15_7_2_prop_types_default.a.any,
  swipeEvent: _prop_types_15_7_2_prop_types_default.a.any
}, slider__class.defaultProps = {
  prefix: 'next-',
  animation: 'slide',
  arrowSize: 'medium',
  arrowPosition: 'inner',
  vertical: false,
  verticalSwiping: true,
  dots: true,
  dotsDirection: 'hoz',
  arrows: true,
  arrowDirection: 'hoz',
  infinite: true,
  autoplay: false,
  autoplaySpeed: 3000,
  speed: 500,
  adaptiveHeight: false,
  centerMode: false,
  centerPadding: '50px', // Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览
  cssEase: 'ease',
  draggable: true,
  edgeFriction: 0.35,
  focusOnSelect: false,
  defaultActiveIndex: 0,
  lazyLoad: false,
  pauseOnHover: false,
  rtl: false,
  slide: 'div',
  slideDirection: 'hoz',
  slidesToShow: 1,
  slidesToScroll: 1,
  swipe: true,
  swipeToSlide: false, // Allow users to drag or swipe directly to a slide irrespective of slidesToScroll
  touchMove: true, // 移动端touch
  touchThreshold: 5,
  useCSS: true,
  variableWidth: false,
  waitForAnimate: true,
  onChange: function onChange() {},
  edgeEvent: null,
  swipeEvent: null,
  nextArrow: null, // nextArrow, prevArrow are react components
  prevArrow: null,
  style: null,
  dotsRender: null,
  triggerType: 'click'
}, slider__temp2);
slider_slider_Slider.displayName = 'Slider';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/slider/index.js





/* harmony default export */ var es_slider = (config_provider.config(slider_slider_Slider, {
    exportNames: ['resize'],
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('fade' in props) {
            deprecated('fade', 'animation', 'Slider');

            var _props = props,
                fade = _props.fade,
                others = objectWithoutProperties_default()(_props, ['fade']);

            if (fade) {
                props = extends_default()({ animation: 'fade' }, others);
            } else {
                props = others;
            }
        }
        if ('arrowPos' in props) {
            if (props.arrowPos === 'inline') {
                deprecated('arrowPos=inline', 'arrowPosition=inner', 'Slider');

                props.arrowPos = 'inner';
            } else {
                deprecated('arrowPos', 'arrowPosition', 'Slider');
            }

            var _props2 = props,
                arrowPos = _props2.arrowPos,
                _others = objectWithoutProperties_default()(_props2, ['arrowPos']);

            props = extends_default()({ arrowPosition: arrowPos }, _others);
        }
        ['arrowDirection', 'dotsDirection', 'slideDirection'].forEach(function (propName) {
            if (props[propName] === 'horizontal') {
                deprecated(propName + '=horizontal', propName + '=hoz', 'Slider');

                props[propName] = 'hoz';
            } else if (props[propName] === 'vertical') {
                deprecated(propName + '=vertical', propName + '=ver', 'Slider');

                props[propName] = 'ver';
            }
        });
        if ('initialSlide' in props) {
            deprecated('initialSlide', 'defaultActiveIndex', 'Slider');

            var _props3 = props,
                initialSlide = _props3.initialSlide,
                _others2 = objectWithoutProperties_default()(_props3, ['initialSlide']);

            props = extends_default()({ defaultActiveIndex: initialSlide }, _others2);
        }
        if ('slickGoTo' in props) {
            deprecated('slickGoTo', 'activeIndex', 'Slider');

            var _props4 = props,
                slickGoTo = _props4.slickGoTo,
                _others3 = objectWithoutProperties_default()(_props4, ['slickGoTo']);

            props = extends_default()({ activeIndex: slickGoTo }, _others3);
        }
        if ('afterChange' in props) {
            deprecated('afterChange', 'onChange', 'Slider');

            var _props5 = props,
                afterChange = _props5.afterChange,
                _others4 = objectWithoutProperties_default()(_props5, ['afterChange']);

            props = extends_default()({ onChange: afterChange }, _others4);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/split-button/index.js






var split_button__class, split_button__temp;












var split_button_Popup = es_overlay.Popup;

/**
 * SplitButton
 */

var split_button_SplitButton = (split_button__temp = split_button__class = function (_React$Component) {
    inherits_default()(SplitButton, _React$Component);

    function SplitButton(props, context) {
        classCallCheck_default()(this, SplitButton);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.selectMenuItem = function (keys) {
            var _this$props;

            for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                others[_key - 1] = arguments[_key];
            }

            if (!('selectedKeys' in _this.props)) {
                _this.setState({
                    selectedKeys: keys
                });
            }
            (_this$props = _this.props).onSelect.apply(_this$props, [keys].concat(others));
        };

        _this.clickMenuItem = function (key) {
            var _this$props2;

            for (var _len2 = arguments.length, others = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                others[_key2 - 1] = arguments[_key2];
            }

            (_this$props2 = _this.props).onItemClick.apply(_this$props2, [key].concat(others));
            _this.onVisibleChange(false, 'menuSelect');
        };

        _this.onPopupOpen = function () {
            if (_this.props.autoWidth && _this.wrapper && _this.menu) {
                dom.setStyle(_this.menu, {
                    width: _this.wrapper.offsetWidth
                });
            }
        };

        _this.onVisibleChange = function (visible, reason) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, reason);
        };

        _this._menuRefHandler = function (ref) {
            _this.menu = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);

            var refFn = _this.props.menuProps.ref;
            if (typeof refFn === 'function') {
                refFn(ref);
            }
        };

        _this._wrapperRefHandler = function (ref) {
            _this.wrapper = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);
        };

        _this.state = {
            selectedKeys: props.selectedKeys || props.defaultSelectedKeys,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }

    SplitButton.prototype.componentDidMount = function componentDidMount() {
        // 由于定位目标是 wrapper，如果弹层默认展开，wrapper 还未渲染，didMount 后强制再渲染一次，弹层重新定位
        if (this.state.visible) {
            this.forceUpdate();
        }
    };

    SplitButton.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }

        if ('selectedKeys' in nextProps) {
            this.setState({
                selectedKeys: nextProps.selectedKeys
            });
        }
    };

    SplitButton.prototype.render = function render() {
        var _classnames,
            _classnames2,
            _this2 = this;

        var _props = this.props,
            prefix = _props.prefix,
            label = _props.label,
            size = _props.size,
            type = _props.type,
            component = _props.component,
            ghost = _props.ghost,
            className = _props.className,
            style = _props.style,
            children = _props.children,
            triggerProps = _props.triggerProps,
            popupAlign = _props.popupAlign,
            popupTriggerType = _props.popupTriggerType,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            selectMode = _props.selectMode,
            menuProps = _props.menuProps,
            leftButtonProps = _props.leftButtonProps,
            disabled = _props.disabled,
            others = objectWithoutProperties_default()(_props, ['prefix', 'label', 'size', 'type', 'component', 'ghost', 'className', 'style', 'children', 'triggerProps', 'popupAlign', 'popupTriggerType', 'popupStyle', 'popupClassName', 'popupProps', 'selectMode', 'menuProps', 'leftButtonProps', 'disabled']);

        var state = this.state;

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'split-btn'] = true, _classnames), className);

        var sharedBtnProps = {
            type: type,
            size: size,
            component: component,
            ghost: ghost,
            disabled: disabled
        };

        var triggerClassNames = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'split-btn-trigger'] = true, _classnames2[prefix + 'expand'] = state.visible, _classnames2.opened = state.visible, _classnames2));

        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button,
            extends_default()({}, triggerProps, sharedBtnProps, { className: triggerClassNames }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-down' })
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_button.Group,
            extends_default()({}, util_obj.pickOthers(SplitButton.propTypes, others), { className: classNames, style: style, size: size, ref: this._wrapperRefHandler }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                extends_default()({}, sharedBtnProps, leftButtonProps),
                label
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                split_button_Popup,
                extends_default()({}, popupProps, {
                    visible: state.visible,
                    onVisibleChange: this.onVisibleChange,
                    trigger: trigger,
                    triggerType: popupTriggerType,
                    align: popupAlign,
                    target: function target() {
                        return _this2.wrapper;
                    },
                    style: popupStyle,
                    shouldUpdatePosition: true,
                    className: popupClassName,
                    onOpen: this.onPopupOpen }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_menu,
                    extends_default()({}, menuProps, {
                        selectMode: selectMode,
                        selectedKeys: state.selectedKeys,
                        onSelect: this.selectMenuItem,
                        onItemClick: this.clickMenuItem,
                        ref: this._menuRefHandler }),
                    children
                )
            )
        );
    };

    return SplitButton;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), split_button__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 按钮的类型
     */
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'primary', 'secondary']),
    /**
     * 按钮组的尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 主按钮的文案
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 设置标签类型
     */
    component: _prop_types_15_7_2_prop_types_default.a.oneOf(['button', 'a']),
    /**
     * 是否为幽灵按钮
     */
    ghost: _prop_types_15_7_2_prop_types_default.a.oneOf(['light', 'dark', false, true]),
    /**
     * 默认激活的菜单项（用法同 Menu 非受控）
     */
    defaultSelectedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 激活的菜单项（用法同 Menu 受控）
     */
    selectedKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 菜单的选择模式
     */
    selectMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
    /**
     * 选择菜单项时的回调，参考 Menu
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击菜单项时的回调，参考 Menu
     */
    onItemClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 触发按钮的属性（支持 Button 的所有属性透传）
     */
    triggerProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层菜单的宽度是否与按钮组一致
     */
    autoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层显示状态变化时的回调函数
     * @param {Boolean} visible 弹层显示状态
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层的触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层对齐方式, 详情见Overlay align
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 透传给弹层的属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 透传给 Menu 的属性
     */
    menuProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 透传给 左侧按钮 的属性
     */
    leftButtonProps: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, split_button__class.defaultProps = {
    prefix: 'next-',
    type: 'normal',
    size: 'medium',
    autoWidth: true,
    popupTriggerType: 'click',
    onVisibleChange: func.noop,
    onItemClick: func.noop,
    onSelect: func.noop,
    defaultSelectedKeys: [],
    menuProps: {},
    leftButtonProps: {}
}, split_button__temp);
split_button_SplitButton.displayName = 'SplitButton';


split_button_SplitButton.Item = es_menu.Item;
split_button_SplitButton.Divider = es_menu.Divider;
split_button_SplitButton.Group = es_menu.Group;

/* harmony default export */ var split_button = (config_provider.config(split_button_SplitButton));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/step/view/step.js






var step__class, step__temp;







var step_getHeight = function getHeight(el) {
    return dom.getStyle(el, 'height');
};
var step_setHeight = function setHeight(el, height) {
    return dom.setStyle(el, 'height', height);
};

/** Step */
var step_Step = (step__temp = step__class = function (_Component) {
    inherits_default()(Step, _Component);

    function Step(props, context) {
        classCallCheck_default()(this, Step);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this._stepRefHandler = function (ref) {
            _this.step = ref;
        };

        _this.state = {
            parentWidth: 'auto',
            parentHeight: 'auto'
        };
        _this.resize = _this.resize.bind(_this);
        return _this;
    }

    Step.prototype.componentDidMount = function componentDidMount() {
        /* istanbul ignore if */
        if (!support.flex) {
            this.resize();
            util_events.on(window, 'resize', this.resize);
        }
        this.adjustHeight();
    };

    Step.prototype.componentWillReceiveProps = function componentWillReceiveProps(newProps) {
        if ('current' in newProps) {
            this.setState({
                current: newProps.current
            });
        }
    };

    Step.prototype.componentDidUpdate = function componentDidUpdate() {
        this.adjustHeight();
    };

    Step.prototype.componentWillUnmount = function componentWillUnmount() {
        /* istanbul ignore if */
        if (!support.flex) {
            util_events.off(window, 'resize', this.resize);
        }
    };

    Step.prototype.adjustHeight = function adjustHeight() {
        var _props = this.props,
            shape = _props.shape,
            direction = _props.direction,
            prefix = _props.prefix,
            labelPlacement = _props.labelPlacement;

        if (shape !== 'arrow' && (direction === 'horizontal' || direction === 'hoz') && (labelPlacement === 'vertical' || labelPlacement === 'ver')) {
            var step = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this.step);
            var height = Array.prototype.slice.call(step.getElementsByClassName(prefix + 'step-item')).reduce(function (ret, re) {
                var itemHeight = step_getHeight(re) + step_getHeight(re.getElementsByClassName(prefix + 'step-item-body')[0]);
                return Math.max(itemHeight, ret);
            }, 0);
            step_setHeight(step, height);
        }
    };

    Step.prototype.resize = function resize() {
        if (this.step) {
            this.setState({
                parentWidth: this.step.offsetWidth || 0,
                parentHeight: this.step.offsetHeight || 0
            });
        }
    };

    Step.prototype._getValidChildren = function _getValidChildren(children) {
        var result = [];
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(children, function (child) {
            if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(child)) {
                result.push(child);
            }
        });
        return result;
    };

    Step.prototype.render = function render() {
        var _classNames;

        // eslint-disable-next-line
        var _props2 = this.props,
            prefix = _props2.prefix,
            locale = _props2.locale,
            className = _props2.className,
            current = _props2.current,
            direction = _props2.direction,
            labelPlacement = _props2.labelPlacement,
            shape = _props2.shape,
            children = _props2.children,
            readOnly = _props2.readOnly,
            animation = _props2.animation,
            itemRender = _props2.itemRender,
            rtl = _props2.rtl,
            others = objectWithoutProperties_default()(_props2, ['prefix', 'locale', 'className', 'current', 'direction', 'labelPlacement', 'shape', 'children', 'readOnly', 'animation', 'itemRender', 'rtl']);

        prefix = this.context.prefix || prefix;
        var _state = this.state,
            parentWidth = _state.parentWidth,
            parentHeight = _state.parentHeight;

        // type不同对应的direction不同

        direction = shape === 'arrow' ? 'horizontal' : direction;

        // children去除null
        children = this._getValidChildren(children);

        // 修改子节点属性
        var cloneChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, index) {
            var status = index < current ? 'finish' : index === current ? 'process' : 'wait';

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                prefix: prefix,
                key: index,
                index: index,
                total: children.length,
                status: child.props.status || status,
                shape: shape,
                direction: direction,
                labelPlacement: labelPlacement,
                parentWidth: parentWidth,
                parentHeight: parentHeight,
                readOnly: readOnly,
                animation: animation,
                itemRender: child.props.itemRender ? child.props.itemRender : itemRender // 优先使用Item的itemRender
            });
        });

        var _direction = direction === 'ver' || direction === 'vertical' ? 'vertical' : 'horizontal';
        var _labelPlacement = labelPlacement === 'ver' || labelPlacement === 'vertical' ? 'vertical' : 'horizontal';
        var stepCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'step'] = true, _classNames[prefix + 'step-' + shape] = shape, _classNames[prefix + 'step-' + _direction] = _direction, _classNames[prefix + 'step-label-' + _labelPlacement] = _labelPlacement, _classNames[className] = className, _classNames));

        if (rtl) {
            others.dir = 'rtl';
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: stepCls, ref: this._stepRefHandler }),
            cloneChildren
        );
    };

    return Step;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), step__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前步骤
     */
    current: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 展示方向
     */
    direction: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    /**
     * 横向布局时的内容排列
     */
    labelPlacement: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    /**
     * 类型
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['circle', 'arrow', 'dot']),
    /**
     * 是否只读模式
     */
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否开启动效
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义样式名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * StepItem 的自定义渲染
     * @param {Number} index   节点索引
     * @param {String} status  节点状态
     * @returns {Node} 节点的渲染结果
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func
}, step__class.defaultProps = {
    prefix: 'next-',
    current: 0,
    direction: 'hoz',
    labelPlacement: 'ver',
    shape: 'circle',
    animation: true,
    itemRender: null
}, step__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, step__temp);
step_Step.displayName = 'Step';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/step/view/step-item.js






var step_item__class, step_item__temp;









/** Step.Item */
var step_item_StepItem = (step_item__temp = step_item__class = function (_Component) {
    inherits_default()(StepItem, _Component);

    function StepItem(props) {
        classCallCheck_default()(this, StepItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.onClick = function () {
            var _this$props = _this.props,
                index = _this$props.index,
                disabled = _this$props.disabled,
                readOnly = _this$props.readOnly,
                animation = _this$props.animation;

            if (disabled || readOnly) {
                return false;
            }

            if (animation && _this.stepNode) {
                dom.hasClass(_this.stepNode, 'clicked') ? dom.removeClass(_this.stepNode, 'clicked') : dom.addClass(_this.stepNode, 'clicked');
            }
            _this.props.onClick(index);
        };

        _this.removeClickedCls = _this.removeClickedCls.bind(_this);
        _this._refHandlerCreator = _this._refHandlerCreator.bind(_this);
        _this.resize = _this.resize.bind(_this);
        return _this;
    }

    StepItem.prototype.componentDidMount = function componentDidMount() {
        var _props = this.props,
            shape = _props.shape,
            direction = _props.direction,
            labelPlacement = _props.labelPlacement,
            index = _props.index,
            total = _props.total;

        if (shape === 'arrow') {
            return;
        }

        if (direction === 'vertical' || direction === 'ver') {
            this.resize();
            this.forceUpdate(); // 解决Step嵌套的情况下，嵌套节点宽度为0的问题
            this.eventHandler = util_events.on(window, 'resize', this.resize); // 调整垂直Step
        } else if ((direction === 'horizontal' || direction === 'hoz') && (labelPlacement === 'horizontal' || labelPlacement === 'hoz') && index !== total - 1) {
            // 调整横向Content
            this.adjustTail();
        }
    };

    StepItem.prototype.componentDidUpdate = function componentDidUpdate() {
        var _props2 = this.props,
            shape = _props2.shape,
            direction = _props2.direction,
            labelPlacement = _props2.labelPlacement,
            index = _props2.index,
            total = _props2.total,
            rtl = _props2.rtl;

        if (shape === 'arrow') {
            return;
        }

        if (direction === 'vertical' || direction === 'ver') {
            this.resize();
        } else if (direction === 'horizontal' || direction === 'hoz') {
            var _dom$setStyle;

            var pos = rtl ? 'right' : 'left';
            dom.setStyle(this.body, (_dom$setStyle = {
                width: ''
            }, _dom$setStyle[pos] = '', _dom$setStyle));
        } else if (shape === 'circle' && (labelPlacement === 'horizontal' || labelPlacement === 'hoz') && index !== total - 1) {
            // 调整横向Content
            this.adjustTail();
        } else if (index !== total - 1) {
            dom.setStyle(this.tail, {
                width: '',
                // eslint-disable-next-line
                'top': ''
            });
        }
    };

    StepItem.prototype.componentWillUnmount = function componentWillUnmount() {
        this.eventHandler && this.eventHandler.off();
    };

    StepItem.prototype.adjustTail = function adjustTail() {
        var width = this.container.offsetWidth + this.title.offsetWidth;
        dom.setStyle(this.tail, {
            width: 'calc(100% - ' + width + 'px)',
            top: dom.getStyle(this.container, 'height') / 2 + 'px'
        });
    };

    StepItem.prototype.resize = function resize() {
        var stepWidth = dom.getStyle(this.step, 'width');
        var rtl = this.props.rtl;


        rtl ? this.body.style.right = stepWidth + 'px' : this.body.style.left = stepWidth + 'px';
        dom.setStyle(this.body, {
            width: dom.getStyle(this.step.parentNode.parentNode, 'width') - stepWidth
        });
        dom.setStyle(this.tail, 'height', dom.getStyle(this.body, 'height') - dom.getStyle(this.container, 'height'));
    };

    StepItem.prototype._getNode = function _getNode() {
        var _props3 = this.props,
            prefix = _props3.prefix,
            index = _props3.index,
            status = _props3.status,
            icon = _props3.icon,
            shape = _props3.shape,
            percent = _props3.percent,
            itemRender = _props3.itemRender;

        var nodeElement = icon;
        if (shape === 'dot') {
            nodeElement = icon ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: icon }) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-node-circle' },
                ' '
            );
        } else if (shape === 'circle' && percent) {
            nodeElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress, { shape: 'circle', percent: percent, className: prefix + 'step-item-progress' });
        } else if (shape === 'circle' && !!itemRender && typeof itemRender === 'function') {
            nodeElement = null; // 如果是需要自定义节点，则不处理，返回空
        } else {
            nodeElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-node-circle' },
                icon ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: icon }) : this._itemRender(index, status)
            );
        }

        return nodeElement;
    };

    StepItem.prototype.getNode = function getNode(args) {
        var _props4 = this.props,
            prefix = _props4.prefix,
            itemRender = _props4.itemRender,
            index = _props4.index,
            status = _props4.status,
            title = _props4.title,
            content = _props4.content;
        var others = args.others,
            stepCls = args.stepCls,
            overlayCls = args.overlayCls;

        var nodeElement = this._getNode();
        var finalNodeElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'step-item-container', ref: this._refHandlerCreator('container') },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-node-placeholder', onClick: this.onClick },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    {
                        className: prefix + 'step-item-node',
                        ref: this._refHandlerCreator('stepNode'),
                        onTransitionEnd: this.removeClickedCls },
                    nodeElement
                )
            )
        );

        if (!nodeElement) {
            // 需要自定义子节点
            finalNodeElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-container' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'step-item-node-placeholder', onClick: this.onClick },
                    itemRender(index, status, title, content)
                )
            );
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ tabIndex: '0', 'aria-current': status === 'process' ? 'step' : null }, others, { style: this.getStyle(), className: stepCls, ref: this._refHandlerCreator('step') }),
            finalNodeElement,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-body', ref: this._refHandlerCreator('body') },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'step-item-title', ref: this._refHandlerCreator('title') },
                    title
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'step-item-content' },
                    content
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-tail', ref: this._refHandlerCreator('tail') },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'step-item-tail-underlay' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: prefix + 'step-item-tail-overlay', style: overlayCls })
                )
            )
        );
    };

    StepItem.prototype.getStyle = function getStyle() {
        var _props5 = this.props,
            parentWidth = _props5.parentWidth,
            parentHeight = _props5.parentHeight,
            direction = _props5.direction,
            total = _props5.total,
            index = _props5.index,
            shape = _props5.shape;

        var width = 'auto';

        if (Number(parentWidth) && Number(parentHeight)) {
            if (!support.flex && shape === 'arrow') {
                width = Math.floor(parentWidth / total - parentHeight / 2 - parentHeight / 8);
            }
        }
        if (shape !== 'arrow' && (direction === 'horizontal' || direction === 'hoz')) {
            width = total - 1 !== index ? Math.floor(100 / total) + '%' : 'auto';
        }
        return {
            width: width
        };
    };

    StepItem.prototype.removeClickedCls = function removeClickedCls() {
        var animation = this.props.animation;

        if (animation && this.stepNode && dom.hasClass(this.stepNode, 'clicked')) {
            dom.removeClass(this.stepNode, 'clicked');
        }
    };

    // 节点的渲染方法


    StepItem.prototype._itemRender = function _itemRender(index, status) {
        var itemRender = this.props.itemRender;

        if (itemRender) {
            return itemRender(index, status);
        }
        return status === 'finish' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'select' }) : index + 1;
    };

    StepItem.prototype._refHandlerCreator = function _refHandlerCreator(refName) {
        var self = this;
        return function (ref) {
            self[refName] = ref;
        };
    };

    StepItem.prototype.render = function render() {
        var _classNames;

        // eslint-disable-next-line
        var _props6 = this.props,
            prefix = _props6.prefix,
            locale = _props6.locale,
            className = _props6.className,
            status = _props6.status,
            title = _props6.title,
            icon = _props6.icon,
            index = _props6.index,
            total = _props6.total,
            shape = _props6.shape,
            content = _props6.content,
            direction = _props6.direction,
            disabled = _props6.disabled,
            onClick = _props6.onClick,
            readOnly = _props6.readOnly,
            animation = _props6.animation,
            parentHeight = _props6.parentHeight,
            itemRender = _props6.itemRender,
            parentWidth = _props6.parentWidth,
            labelPlacement = _props6.labelPlacement,
            rtl = _props6.rtl,
            others = objectWithoutProperties_default()(_props6, ['prefix', 'locale', 'className', 'status', 'title', 'icon', 'index', 'total', 'shape', 'content', 'direction', 'disabled', 'onClick', 'readOnly', 'animation', 'parentHeight', 'itemRender', 'parentWidth', 'labelPlacement', 'rtl']);

        var stepCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'step-item'] = true, _classNames[prefix + 'step-item-' + status] = status, _classNames[prefix + 'step-item-first'] = index === 0, _classNames[prefix + 'step-item-last'] = index === total - 1, _classNames[prefix + 'step-item-disabled'] = disabled, _classNames[prefix + 'step-item-read-only'] = readOnly, _classNames[className] = className, _classNames));

        var overlayCls = status === 'finish' ? { width: '100%' } : null;
        var arrowElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ tabIndex: '0', 'aria-current': status === 'process' ? 'step' : null }, others, { style: this.getStyle(), className: stepCls, onClick: this.onClick }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'step-item-container' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'step-item-title' },
                    title
                )
            )
        );
        var otherElement = this.getNode({ others: others, stepCls: stepCls, overlayCls: overlayCls });

        return shape === 'arrow' ? arrowElement : otherElement;
    };

    return StepItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), step_item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`
     */
    status: _prop_types_15_7_2_prop_types_default.a.oneOf(['wait', 'process', 'finish']),
    /**
     * 标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    direction: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    labelPlacement: _prop_types_15_7_2_prop_types_default.a.oneOf(['hoz', 'ver']),
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['circle', 'arrow', 'dot']),
    /**
     * 图标
     */
    icon: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 内容，用于垂直状态下的内容填充
     */
    content: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * StepItem 的自定义渲染, 会覆盖父节点设置的itemRender
     * @param {Number} index   节点索引
     * @param {String} status  节点状态
     * @returns {Node} 节点的渲染结果
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
    * 百分比
    */
    percent: _prop_types_15_7_2_prop_types_default.a.number,
    index: _prop_types_15_7_2_prop_types_default.a.number,
    total: _prop_types_15_7_2_prop_types_default.a.number,
    animation: _prop_types_15_7_2_prop_types_default.a.bool, // 是否开启动效，由父级传入
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    parentWidth: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    parentHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    /**
     * 点击步骤时的回调
     * @param {Number} index 节点索引
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义样式
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool
}, step_item__class.defaultProps = {
    shape: 'circle',
    index: 0,
    total: 1,
    onClick: function onClick() {}
}, step_item__temp);
step_item_StepItem.displayName = 'StepItem';

/* harmony default export */ var step_item = (config_provider.config(step_item_StepItem));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/step/index.js






step_Step.Item = step_item;

/* harmony default export */ var es_step = (config_provider.config(step_Step, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'shape', 'Step');

            var _props = props,
                type = _props.type,
                direction = _props.direction,
                labelPlacement = _props.labelPlacement,
                others = objectWithoutProperties_default()(_props, ['type', 'direction', 'labelPlacement']);

            direction = direction === 'vertical' ? 'ver' : direction === 'horizontal' ? 'hoz' : direction;
            labelPlacement = labelPlacement === 'vertical' ? 'ver' : labelPlacement === 'horizontal' ? 'hoz' : labelPlacement;
            props = extends_default()({ shape: type, direction: direction, labelPlacement: labelPlacement }, others);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/switch/index.js






var switch__class, switch__temp;







/** Switch*/
var switch_Switch = (switch__temp = switch__class = function (_React$Component) {
    inherits_default()(Switch, _React$Component);

    function Switch(props, context) {
        classCallCheck_default()(this, Switch);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        var checked = props.checked || props.defaultChecked;
        _this.onChange = _this.onChange.bind(_this);
        _this.onKeyDown = _this.onKeyDown.bind(_this);
        _this.state = {
            checked: checked
        };
        return _this;
    }

    Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('checked' in nextProps) {
            var checked = nextProps.checked;
            if (checked === undefined) {
                checked = false;
            }
            this.setState({
                checked: checked
            });
        }
    };

    Switch.prototype.onChange = function onChange(ev) {
        var checked = !this.state.checked;

        if (!('checked' in this.props)) {
            this.setState({
                checked: checked
            });
        }
        this.props.onChange(checked, ev);
        this.props.onClick && this.props.onClick(ev);
    };

    Switch.prototype.onKeyDown = function onKeyDown(e) {
        if (e.keyCode === KEYCODE.ENTER || e.keyCode === KEYCODE.SPACE) {
            this.onChange(e);
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };

    Switch.prototype.render = function render() {
        var _classNames;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            disabled = _props.disabled,
            size = _props.size,
            checkedChildren = _props.checkedChildren,
            unCheckedChildren = _props.unCheckedChildren,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'disabled', 'size', 'checkedChildren', 'unCheckedChildren', 'rtl']),
            status = this.state.checked ? 'on' : 'off';

        var children = this.state.checked ? checkedChildren : unCheckedChildren;

        var _size = size;
        if (_size !== 'small' && _size !== 'medium') {
            _size = 'medium';
        }

        var classes = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'switch'] = true, _classNames[prefix + 'switch-' + status] = true, _classNames[prefix + 'switch-' + _size] = true, _classNames[className] = className, _classNames));
        var attrs = void 0;

        if (!disabled) {
            attrs = {
                onClick: this.onChange,
                tabIndex: 0,
                onKeyDown: this.onKeyDown,
                disabled: disabled
            };
        } else {
            attrs = {
                disabled: disabled
            };
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ role: 'switch', tabIndex: '0' }, others, { className: classes }, attrs, { 'aria-checked': this.state.checked }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: this.props.prefix + 'switch-children' },
                children
            )
        );
    };

    return Switch;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), switch__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, switch__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内敛样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 打开时的内容
     */
    checkedChildren: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 关闭时的内容
     */
    unCheckedChildren: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 开关状态改变是触发此事件
     * @param {Boolean} checked 是否为打开状态
     * @param {Event} e DOM事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 开关当前的值(针对受控组件)
     */
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 开关默认值 (针对非受控组件)
     */
    defaultChecked: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 表示开关被禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * switch的尺寸
     * @enumdesc 正常大小, 缩小版大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['medium', 'small']),
    /**
     * 鼠标点击事件
     * @param {Event} e DOM事件对象
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 键盘按键事件
     * @param {Event} e DOM事件对象
     */
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func
}, switch__class.defaultProps = {
    prefix: 'next-',
    disabled: false,
    size: 'medium',
    onChange: function onChange() {}
}, switch__temp);
switch_Switch.displayName = 'Switch';


/* harmony default export */ var es_switch = (config_provider.config(switch_Switch));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/tabs/utils.js


var triggerEvents = {
    CLICK: 'click',
    HOVER: 'hover'
};

function getOffsetWH(node, tabPosition) {
    var prop = 'width';
    if (tabPosition === 'left' || tabPosition === 'right') {
        prop = 'height';
    }
    return node ? node.getBoundingClientRect()[prop] : 0;
}

function getOffsetLT(node, tabPosition) {
    var prop = 'left';
    if (tabPosition === 'left' || tabPosition === 'right') {
        prop = 'top';
    }
    return node.getBoundingClientRect()[prop];
}

function isTransformSupported(style) {
    return 'transform' in style || 'webkitTransform' in style || 'MozTransform' in style;
}

function toArray(children) {
    var ret = [];
    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(children, function (child, index) {
        if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(child)) {
            ret.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                key: child.key || index
            }));
        }
    });
    return ret;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/tabs/nav.js





var tabs_nav__class, tabs_nav__temp;












var nav_noop = function noop() {};
var floatRight = { float: 'right', zIndex: 1 };
var floatLeft = { float: 'left', zIndex: 1 };
var nav_Popup = es_overlay.Popup;
var tabs_nav_Nav = (tabs_nav__temp = tabs_nav__class = function (_React$Component) {
    inherits_default()(Nav, _React$Component);

    function Nav(props, context) {
        classCallCheck_default()(this, Nav);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.removeTab = function (key, e) {
            e && e.stopPropagation(); // stop bubble, so that it won't trigger upstream listener
            _this.props.onClose(key);
        };

        _this.defaultTabTemplateRender = function (key, _ref) {
            var prefix = _ref.prefix,
                title = _ref.title,
                closeable = _ref.closeable;

            var tail = closeable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close', onClick: function onClick(e) {
                    return _this.removeTab(key, e);
                }, className: prefix + 'tabs-tab-close' }) : null;
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: _this.props.prefix + 'tabs-tab-inner' },
                title,
                tail
            );
        };

        _this.scrollToActiveTab = function () {
            if (!_this.activeTab || _this.props.excessMode !== 'slide') {
                return;
            }

            var activeTabWH = getOffsetWH(_this.activeTab);
            var wrapperWH = getOffsetWH(_this.wrapper);
            var activeTabOffset = getOffsetLT(_this.activeTab);
            var wrapperOffset = getOffsetLT(_this.wrapper);

            var target = _this.offset;
            if (activeTabOffset >= wrapperOffset + wrapperWH || activeTabOffset + activeTabWH <= wrapperOffset) {
                return;
            }
            // if (activeTabOffset < wrapperOffset) {
            //     target += wrapperOffset - activeTabOffset;
            //     this.setOffset(target);
            // }
            if (wrapperOffset + wrapperWH < activeTabOffset + activeTabWH) {
                target -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH);
                _this.setOffset(target, true, false);
            }
        };

        _this.onPrevClick = function () {
            var wrapperWH = getOffsetWH(_this.wrapper);
            _this.setOffset(_this.offset + wrapperWH);
        };

        _this.onNextClick = function () {
            var wrapperWH = getOffsetWH(_this.wrapper);
            _this.setOffset(_this.offset - wrapperWH);
        };

        _this.onSelectMenuItem = function (keys) {
            var _this$props = _this.props,
                onTriggerEvent = _this$props.onTriggerEvent,
                triggerType = _this$props.triggerType;

            onTriggerEvent(triggerType, keys[0]);
        };

        _this.onWindowResized = function () {
            if (_this.updateTimer) {
                clearTimeout(_this.updateTimer);
            }

            _this.updateTimer = setTimeout(function () {
                _this.setSlideBtn();
                _this.getDropdownItems(_this.props);
            }, 100);
        };

        _this.navRefHandler = function (ref) {
            _this.nav = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(ref);
        };

        _this.wrapperRefHandler = function (ref) {
            _this.wrapper = ref;
        };

        _this.navbarRefHandler = function (ref) {
            _this.navbar = ref;
        };

        _this.activeTabRefHandler = function (ref) {
            _this.activeTab = ref;
        };

        _this.state = {
            next: false,
            prev: false,
            dropdownTabs: []
        };
        _this.offset = 0;
        return _this;
    }

    Nav.prototype.componentDidMount = function componentDidMount() {
        this.setSlideBtn();
        this.getDropdownItems(this.props);

        util_events.on(window, 'resize', this.onWindowResized);
    };

    Nav.prototype.componentDidUpdate = function componentDidUpdate() {
        var ctx = this;

        // 此处通过延时处理，屏蔽动画带来的定位不准确问题（由于要支持ie9，因此无法使用transitionend）
        clearTimeout(ctx.scrollTimer);
        ctx.scrollTimer = setTimeout(function () {
            ctx.scrollToActiveTab();
        }, 400);

        clearTimeout(ctx.slideTimer);
        ctx.slideTimer = setTimeout(function () {
            ctx.setSlideBtn();
        }, 200);
        if (this.activeTab && Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this).contains(document.activeElement)) {
            this.activeTab.focus();
        }
    };

    Nav.prototype.componentWillUnmount = function componentWillUnmount() {
        util_events.off(window, 'resize', this.onWindowResized);
    };

    /**
     * The key method about move
     * @param {number} target position to slide to
     * @param {bool} checkSlideBtn need to check the slide button status or not
     * @param {bool} setActive need to check the active status or not
     */


    Nav.prototype.setOffset = function setOffset(target) {
        var checkSlideBtn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var setActive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var tabPosition = this.props.tabPosition;

        var navWH = getOffsetWH(this.nav, tabPosition);
        var wrapperWH = getOffsetWH(this.wrapper);

        // target should not be great than 0, i.e. should not over slide to left-most
        target = target >= 0 ? 0 : target;
        // when need to slide, should not slide to exceed right-most
        target = target <= wrapperWH - navWH && wrapperWH - navWH < 0 ? wrapperWH - navWH : target;

        var relativeOffset = target - this.offset;
        if (this.activeTab && this.props.excessMode === 'slide' && setActive) {
            var activeTabWH = getOffsetWH(this.activeTab);
            var activeTabOffset = getOffsetLT(this.activeTab) + relativeOffset;
            var wrapperOffset = getOffsetLT(this.wrapper);

            if (wrapperOffset + wrapperWH < activeTabOffset + activeTabWH && activeTabOffset < wrapperOffset + wrapperWH) {
                target -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH);
            }
        }

        if (this.offset !== target) {
            this.offset = target;

            var navOffset = {};
            var navStyle = this.nav.style;

            var canTransform = isTransformSupported(navStyle);
            if (tabPosition === 'left' || tabPosition === 'right') {
                navOffset = canTransform ? {
                    value: 'translate3d(0, ' + target + 'px, 0)'
                } : {
                    name: 'top',
                    value: target + 'px'
                };
            } else {
                navOffset = canTransform ? {
                    value: 'translate3d(' + target + 'px, 0, 0)'
                } : {
                    name: 'left',
                    value: target + 'px'
                };
            }

            if (canTransform) {
                extends_default()(navStyle, {
                    transform: navOffset.value,
                    webkitTransform: navOffset.value,
                    mozTransform: navOffset.value
                });
            } else {
                navStyle[navOffset.name] = navOffset.value;
            }

            if (checkSlideBtn) {
                this.setSlideBtn();
            }
        }
    };

    Nav.prototype.setSlideBtn = function setSlideBtn() {
        var tabPosition = this.props.tabPosition;

        // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决

        var navWH = getOffsetWH(this.nav, tabPosition);
        var wrapperWH = getOffsetWH(this.wrapper, tabPosition);
        var navbarWH = getOffsetWH(this.navbar, tabPosition);
        var minOffset = wrapperWH - navWH;

        var next = void 0;
        var prev = void 0;
        if (minOffset >= 0 || navWH <= navbarWH) {
            next = false;
            prev = false;
            this.setOffset(0, false); // no need to check slide again since this call is invoked from inside setSlideBtn
        } else if (this.offset < 0 && this.offset <= minOffset) {
            prev = true;
            next = false;
        } else if (this.offset >= 0) {
            prev = false;
            next = true;
        } else {
            prev = true;
            next = true;
        }

        if (next !== this.state.next || prev !== this.state.prev) {
            this.setState({
                next: next,
                prev: prev
            });
        }
    };

    Nav.prototype.getDropdownItems = function getDropdownItems(_ref2) {
        var excessMode = _ref2.excessMode,
            tabs = _ref2.tabs;

        if (excessMode !== 'dropdown') {
            return;
        }

        var wrapperWidth = this.wrapper.offsetWidth;
        var childNodes = this.nav.childNodes;

        var index = void 0;
        var tabsWidth = 0;
        for (index = 0; index < tabs.length; index++) {
            tabsWidth += childNodes[index].offsetWidth;
            if (tabsWidth > wrapperWidth) {
                break;
            }
        }

        if (index > 1) {
            index = index - 1;
            this.setState({
                dropdownTabs: tabs.slice(index)
            });
        }
    };

    Nav.prototype.renderTabList = function renderTabList(props) {
        var _this2 = this;

        var prefix = props.prefix,
            tabs = props.tabs,
            activeKey = props.activeKey,
            tabRender = props.tabRender;

        var tabTemplateFn = tabRender || this.defaultTabTemplateRender;

        var rst = [];
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(tabs, function (child) {
            var _classnames;

            var _child$props = child.props,
                disabled = _child$props.disabled,
                className = _child$props.className,
                onClick = _child$props.onClick,
                onMouseEnter = _child$props.onMouseEnter,
                onMouseLeave = _child$props.onMouseLeave,
                style = _child$props.style;
            /*eslint-disable eqeqeq*/

            var active = activeKey == child.key;
            var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'tabs-tab'] = true, _classnames.disabled = disabled, _classnames.active = active, _classnames), className);

            var events = {};

            if (!disabled) {
                events = {
                    onClick: _this2.onNavItemClick.bind(_this2, child.key, onClick),
                    onMouseEnter: _this2.onNavItemMouseEnter.bind(_this2, child.key, onMouseEnter),
                    onMouseLeave: _this2.onNavItemMouseLeave.bind(_this2, child.key, onMouseLeave)
                };
            }

            rst.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'li',
                extends_default()({
                    role: 'tab',
                    key: child.key,
                    ref: active ? _this2.activeTabRefHandler : null,
                    'aria-hidden': disabled ? 'true' : 'false',
                    'aria-selected': active ? 'true' : 'false',
                    tabIndex: active ? 0 : -1,
                    className: cls,
                    style: style
                }, events),
                tabTemplateFn(child.key, child.props)
            ));
        });
        return rst;
    };

    Nav.prototype.onNavItemClick = function onNavItemClick(key, callback, e) {
        this.props.onTriggerEvent(triggerEvents.CLICK, key);
        if (callback) {
            return callback(key, e);
        }
    };

    Nav.prototype.onNavItemMouseEnter = function onNavItemMouseEnter(key, callback, e) {
        this.props.onTriggerEvent(triggerEvents.HOVER, key);
        if (callback) {
            return callback(key, e);
        }
    };

    Nav.prototype.onNavItemMouseLeave = function onNavItemMouseLeave(key, callback, e) {
        if (callback) {
            return callback(key, e);
        }
    };

    Nav.prototype.renderDropdownTabs = function renderDropdownTabs() {
        var _this3 = this;

        var tabs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (!tabs.length) {
            return null;
        }

        var _props = this.props,
            prefix = _props.prefix,
            activeKey = _props.activeKey,
            triggerType = _props.triggerType,
            popupProps = _props.popupProps;

        var trigger = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'button',
            { className: prefix + 'tabs-btn-down' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-down' })
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            nav_Popup,
            extends_default()({ triggerType: triggerType, trigger: trigger, container: function container(target) {
                    return target.parentNode;
                } }, popupProps),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu,
                { selectedKeys: [activeKey], onSelect: this.onSelectMenuItem, selectMode: 'single' },
                tabs.map(function (tab) {
                    var _tab$props = tab.props,
                        disabled = _tab$props.disabled,
                        onClick = _tab$props.onClick,
                        onMouseEnter = _tab$props.onMouseEnter,
                        onMouseLeave = _tab$props.onMouseLeave;

                    var events = {};
                    if (!disabled) {
                        events = {
                            onClick: _this3.onNavItemClick.bind(_this3, tab.key, onClick),
                            onMouseEnter: _this3.onNavItemMouseEnter.bind(_this3, tab.key, onMouseEnter),
                            onMouseLeave: _this3.onNavItemMouseLeave.bind(_this3, tab.key, onMouseLeave)
                        };
                    }
                    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        es_menu.Item,
                        extends_default()({ key: tab.key }, events),
                        tab.props.title
                    );
                })
            )
        );
    };

    Nav.prototype.render = function render() {
        var _classnames4, _classnames5;

        var _props2 = this.props,
            prefix = _props2.prefix,
            tabPosition = _props2.tabPosition,
            excessMode = _props2.excessMode,
            extra = _props2.extra,
            onKeyDown = _props2.onKeyDown,
            animation = _props2.animation,
            style = _props2.style,
            className = _props2.className,
            rtl = _props2.rtl;

        var state = this.state;

        var nextButton = void 0;
        var prevButton = void 0;
        var restButton = void 0;

        var showNextPrev = state.prev || state.next;

        if (excessMode === 'dropdown' && state.next && state.dropdownTabs.length) {
            restButton = this.renderDropdownTabs(state.dropdownTabs);
            prevButton = null;
            nextButton = null;
        } else if (showNextPrev) {
            var _classnames2, _classnames3;

            var prevBtnCls = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'tabs-btn-prev'] = 1, _classnames2.disabled = !state.prev, _classnames2));
            var nextBtnCls = _classnames_2_2_6_classnames_default()((_classnames3 = {}, _classnames3[prefix + 'tabs-btn-next'] = 1, _classnames3.disabled = !state.next, _classnames3));

            prevButton = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    onClick: state.prev ? this.onPrevClick : nav_noop,
                    className: prevBtnCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left' })
            );

            nextButton = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'button',
                {
                    onClick: state.next ? this.onNextClick : nav_noop,
                    className: nextBtnCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' })
            );
            restButton = null;
        } else {
            nextButton = null;
            prevButton = null;
            restButton = null;
        }

        var containerCls = _classnames_2_2_6_classnames_default()((_classnames4 = {}, _classnames4[prefix + 'tabs-nav-container'] = true, _classnames4[prefix + 'tabs-nav-container-scrolling'] = showNextPrev, _classnames4));

        var navCls = prefix + 'tabs-nav';
        var tabList = this.renderTabList(this.props);

        var container = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: containerCls, key: 'nav-container' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'tabs-nav-wrap', ref: this.wrapperRefHandler },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'tabs-nav-scroll' },
                    animation ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        es_animate,
                        { role: 'tablist', 'aria-multiselectable': false, component: 'ul', className: navCls, animation: navCls, singleMode: false, ref: this.navRefHandler },
                        tabList
                    ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'ul',
                        { className: navCls, ref: this.navRefHandler },
                        tabList
                    )
                )
            ),
            prevButton,
            nextButton,
            restButton
        );

        var navChildren = [container];

        if (extra) {
            var extraProps = {
                className: prefix + 'tabs-nav-extra',
                key: 'nav-extra'
            };
            if (tabPosition === 'top' || tabPosition === 'bottom') {
                var _style = rtl ? floatLeft : floatRight;
                navChildren.unshift(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    extends_default()({}, extraProps, { style: _style }),
                    extra
                ));
            } else {
                navChildren.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    extraProps,
                    extra
                ));
            }
        }

        var navbarCls = _classnames_2_2_6_classnames_default()((_classnames5 = {}, _classnames5[prefix + 'tabs-bar'] = true, _classnames5), className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: navbarCls, style: style, onKeyDown: onKeyDown, ref: this.navbarRefHandler },
            navChildren
        );
    };

    return Nav;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), tabs_nav__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    activeKey: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    excessMode: _prop_types_15_7_2_prop_types_default.a.string,
    extra: _prop_types_15_7_2_prop_types_default.a.any,
    tabs: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.array, _prop_types_15_7_2_prop_types_default.a.object]),
    tabPosition: _prop_types_15_7_2_prop_types_default.a.string,
    tabRender: _prop_types_15_7_2_prop_types_default.a.func,
    triggerType: _prop_types_15_7_2_prop_types_default.a.string,
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    onTriggerEvent: _prop_types_15_7_2_prop_types_default.a.func,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func,
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, tabs_nav__temp);
tabs_nav_Nav.displayName = 'Nav';


/* harmony default export */ var tabs_nav = (tabs_nav_Nav);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/tabs/content.js






var content__class, content__temp;





var content_TabContent = (content__temp = content__class = function (_PureComponent) {
    inherits_default()(TabContent, _PureComponent);

    function TabContent() {
        classCallCheck_default()(this, TabContent);

        return possibleConstructorReturn_default()(this, _PureComponent.apply(this, arguments));
    }

    TabContent.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            activeKey = _props.activeKey,
            lazyLoad = _props.lazyLoad,
            unmountInactiveTabs = _props.unmountInactiveTabs,
            children = _props.children,
            className = _props.className,
            others = objectWithoutProperties_default()(_props, ['prefix', 'activeKey', 'lazyLoad', 'unmountInactiveTabs', 'children', 'className']);

        var formatChildren = [];
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(children, function (child) {
            /* eslint-disable eqeqeq */
            var active = activeKey == child.key;
            formatChildren.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                prefix: prefix,
                active: active,
                lazyLoad: lazyLoad,
                unmountInactiveTabs: unmountInactiveTabs
            }));
        });

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'tabs-content'] = true, _classnames), className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: classNames }),
            formatChildren
        );
    };

    return TabContent;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["PureComponent"]), content__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    activeKey: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.number]),
    lazyLoad: _prop_types_15_7_2_prop_types_default.a.bool,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, content__temp);


/* harmony default export */ var tabs_content = (content_TabContent);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/tabs/tab-item.js




var tab_item__class, tab_item__temp;





/** Tab.Item */
var tab_item_TabItem = (tab_item__temp = tab_item__class = function (_React$Component) {
    inherits_default()(TabItem, _React$Component);

    function TabItem() {
        classCallCheck_default()(this, TabItem);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    TabItem.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            active = _props.active,
            lazyLoad = _props.lazyLoad,
            unmountInactiveTabs = _props.unmountInactiveTabs,
            children = _props.children;


        this._actived = this._actived || active;
        if (lazyLoad && !this._actived) {
            return null;
        }

        if (unmountInactiveTabs && !active) {
            return null;
        }

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'tabs-tabpane'] = true, _classnames['' + (active ? 'active' : 'hidden')] = true, _classnames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { role: 'tabpanel', 'aria-hidden': active ? 'false' : 'true', className: cls },
            children
        );
    };

    return TabItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), tab_item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 选项卡标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 单个选项卡是否可关闭
     */
    closeable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 选项卡是否被禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    active: _prop_types_15_7_2_prop_types_default.a.bool,
    lazyLoad: _prop_types_15_7_2_prop_types_default.a.bool,
    unmountInactiveTabs: _prop_types_15_7_2_prop_types_default.a.bool,
    children: _prop_types_15_7_2_prop_types_default.a.any
}, tab_item__class.defaultProps = {
    prefix: 'next-',
    closeable: false
}, tab_item__temp);
tab_item_TabItem.displayName = 'TabItem';


/* harmony default export */ var tab_item = (tab_item_TabItem);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/tab.js






var tab__class, tab__temp;










var tab_noop = function noop() {};

/** Tab */
var tab_Tab = (tab__temp = tab__class = function (_Component) {
    inherits_default()(Tab, _Component);

    function Tab(props, context) {
        classCallCheck_default()(this, Tab);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this.handleTriggerEvent = function (eventType, key) {
            var _this$props = _this.props,
                triggerType = _this$props.triggerType,
                onClick = _this$props.onClick,
                onChange = _this$props.onChange;

            if (triggerType === eventType) {
                onClick(key);
                _this.setActiveKey(key);
                if (_this.state.activeKey !== key) {
                    onChange(key);
                }
            }
        };

        _this.onNavKeyDown = function (e) {
            var keyCode = e.keyCode;
            if (keyCode >= KEYCODE.LEFT && keyCode <= KEYCODE.DOWN) {
                e.preventDefault();
            }
            var newKey = void 0;
            if (keyCode === KEYCODE.RIGHT || keyCode === KEYCODE.DOWN) {
                newKey = _this.getNextActiveKey(true);
                _this.handleTriggerEvent(_this.props.triggerType, newKey);
            } else if (keyCode === KEYCODE.LEFT || keyCode === KEYCODE.UP) {
                newKey = _this.getNextActiveKey(false);
                _this.handleTriggerEvent(_this.props.triggerType, newKey);
            }
        };

        _this.state = {
            activeKey: _this.getDefaultActiveKey(props)
        };
        return _this;
    }

    Tab.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.activeKey && this.state.activeKey !== nextProps.activeKey) {
            this.setState({
                activeKey: nextProps.activeKey
            });
        }
    };

    Tab.prototype.getDefaultActiveKey = function getDefaultActiveKey(props) {
        var activeKey = props.activeKey || props.defaultActiveKey;
        if (!activeKey) {
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(props.children, function (child, index) {
                if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(child)) {
                    /* eslint-disable eqeqeq */
                    if (activeKey == undefined && !child.props.disabled) {
                        activeKey = child.key || index;
                    }
                }
            });
        }
        return activeKey;
    };

    Tab.prototype.getNextActiveKey = function getNextActiveKey(isNext) {
        var _this2 = this;

        var children = [];
        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(this.props.children, function (child) {
            if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(child)) {
                if (!child.props.disabled) {
                    if (isNext) {
                        children.push(child);
                    } else {
                        children.unshift(child);
                    }
                }
            }
        });

        var length = children.length;
        var key = length && children[0].key;
        children.forEach(function (child, i) {
            if (child.key === _this2.state.activeKey) {
                if (i === length - 1) {
                    key = children[0].key;
                } else {
                    key = children[i + 1].key;
                }
            }
        });
        return key;
    };

    Tab.prototype.setActiveKey = function setActiveKey(key) {
        var activeKey = this.state.activeKey;

        // 如果 key 没变，或者受控状态下，则跳过

        if (key === activeKey || 'activeKey' in this.props) {
            return;
        }
        this.setState({
            activeKey: key
        });
    };

    Tab.prototype.render = function render() {
        var _classnames;

        var _props = this.props,
            prefix = _props.prefix,
            animation = _props.animation,
            shape = _props.shape,
            size = _props.size,
            extra = _props.extra,
            excessMode = _props.excessMode,
            tabPosition = _props.tabPosition,
            tabRender = _props.tabRender,
            triggerType = _props.triggerType,
            lazyLoad = _props.lazyLoad,
            unmountInactiveTabs = _props.unmountInactiveTabs,
            popupProps = _props.popupProps,
            navStyle = _props.navStyle,
            navClassName = _props.navClassName,
            contentStyle = _props.contentStyle,
            contentClassName = _props.contentClassName,
            className = _props.className,
            onClose = _props.onClose,
            children = _props.children,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'animation', 'shape', 'size', 'extra', 'excessMode', 'tabPosition', 'tabRender', 'triggerType', 'lazyLoad', 'unmountInactiveTabs', 'popupProps', 'navStyle', 'navClassName', 'contentStyle', 'contentClassName', 'className', 'onClose', 'children', 'rtl']);

        var activeKey = this.state.activeKey;


        var tabs = toArray(children);

        var classNames = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'tabs'] = true, _classnames[prefix + 'tabs-' + shape] = shape, _classnames[prefix + 'tabs-vertical'] = shape === 'wrapped' && ['left', 'right'].indexOf(tabPosition) >= 0, _classnames[prefix + 'tabs-' + tabPosition] = shape === 'wrapped', _classnames['' + (prefix + size)] = size, _classnames), className);

        var navProps = {
            prefix: prefix,
            rtl: rtl,
            animation: animation,
            activeKey: activeKey,
            excessMode: excessMode,
            extra: extra,
            tabs: tabs,
            tabPosition: tabPosition,
            tabRender: tabRender,
            triggerType: triggerType,
            popupProps: popupProps,
            onClose: onClose,
            onTriggerEvent: this.handleTriggerEvent,
            onKeyDown: this.onNavKeyDown,
            style: navStyle,
            className: navClassName
        };

        var contentProps = {
            prefix: prefix,
            activeKey: activeKey,
            lazyLoad: lazyLoad,
            unmountInactiveTabs: unmountInactiveTabs,
            style: contentStyle,
            className: contentClassName
        };

        var tabChildren = [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(tabs_nav, extends_default()({ key: 'tab-nav' }, navProps)), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            tabs_content,
            extends_default()({ key: 'tab-content' }, contentProps),
            tabs
        )];

        if (tabPosition === 'bottom') {
            tabChildren.reverse();
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ dir: rtl ? 'rtl' : undefined, className: classNames }, util_obj.pickOthers(Tab.propTypes, others)),
            tabChildren
        );
    };

    return Tab;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tab__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 被激活的选项卡的 key, 赋值则tab为受控组件, 用户无法切换
     */
    activeKey: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 初始化时被激活的选项卡的 key
     */
    defaultActiveKey: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 外观形态
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['pure', 'wrapped', 'text', 'capsule']),
    /**
     * 是否开启动效
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 选项卡过多时的滑动模式
     */
    excessMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['slide', 'dropdown']),
    /**
     * 导航选项卡的位置，只适用于包裹型（wrapped）选项卡
     */
    tabPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['top', 'bottom', 'left', 'right']),
    /**
     * 尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium']),
    /**
     * 激活选项卡的触发方式
     */
    triggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['hover', 'click']),
    /**
     * 是否提前渲染好所有 TabPane 的内容
     */
    lazyLoad: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否自动卸载未处于激活状态的选项卡
     */
    unmountInactiveTabs: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 导航条的自定义样式
     */
    navStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 导航条的自定义样式类
     */
    navClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 内容区容器的自定义样式
     */
    contentStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 内容区容器的自定义样式类
     */
    contentClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 导航栏附加内容
     */
    extra: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 点击单个选项卡时触发的回调
     */
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选项卡发生切换时的事件回调
     * @param {String|Number} key 改变后的 key
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 选项卡被关闭时的事件回调
     * @param {String|Number} key   关闭的选项卡的 key
     */
    onClose: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义选项卡模板渲染函数
     * @param {String} key 当前 Tab.Item 的 key 值
     * @param {Object} props 传给 Tab.Item 的所有属性键值对
     * @return {ReactNode} 返回自定义组件
     */
    tabRender: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, tab__class.defaultProps = {
    prefix: 'next-',
    shape: 'pure',
    size: 'medium',
    animation: true,
    tabPosition: 'top',
    excessMode: 'slide',
    triggerType: 'click',
    lazyLoad: true,
    unmountInactiveTabs: false,
    onClick: tab_noop,
    onChange: tab_noop,
    onClose: tab_noop
}, tab__temp);
tab_Tab.displayName = 'Tab';



tab_Tab.Item = tab_item;
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tab/index.js





/* harmony default export */ var es_tab = (config_provider.config(tab_Tab, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'shape', 'Tab');

            var _props = props,
                type = _props.type,
                others = objectWithoutProperties_default()(_props, ['type']);

            props = extends_default()({ shape: type }, others);
        }
        if ('resDirection' in props) {
            var _props2 = props,
                resDirection = _props2.resDirection,
                _others = objectWithoutProperties_default()(_props2, ['resDirection']);

            var excessMode = void 0;
            if (resDirection === 'horizontal') {
                deprecated('resDirection=horizontal', 'excessMode=slide', 'Tab');

                excessMode = 'slide';
            } else if (resDirection === 'vertical') {
                deprecated('resDirection=vertical', 'excessMode=dropdown', 'Tab');

                excessMode = 'dropdown';
            }
            props = extends_default()({ excessMode: excessMode }, _others);
        }
        if ('tabBarExtraContent' in props) {
            deprecated('tabBarExtraContent', 'extra', 'Tab');

            var _props3 = props,
                tabBarExtraContent = _props3.tabBarExtraContent,
                _others2 = objectWithoutProperties_default()(_props3, ['tabBarExtraContent']);

            props = extends_default()({ extra: tabBarExtraContent }, _others2);
        }

        return props;
    }
}));
// EXTERNAL MODULE: ./node_modules/_shallow-element-equals@1.0.1@shallow-element-equals/index.js
var _shallow_element_equals_1_0_1_shallow_element_equals = __webpack_require__(56);
var _shallow_element_equals_1_0_1_shallow_element_equals_default = /*#__PURE__*/__webpack_require__.n(_shallow_element_equals_1_0_1_shallow_element_equals);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/util.js
var blackList = ['defaultProps', 'propTypes', 'contextTypes', 'childContextTypes', 'displayName'];

var statics = function statics(Target, Component) {
    Object.keys(Component).forEach(function (property) {
        if (blackList.indexOf(property) === -1) {
            Target[property] = Component[property];
        }
    });
};

var fetchDataByPath = function fetchDataByPath(object, path) {
    if (!object || !path) {
        return false;
    }
    path = path.toString();
    var field = path.split('.');
    var val = void 0,
        key = void 0;
    if (field.length) {
        key = field[0];
        // lists[1].name
        if (key.indexOf('[') >= 0) {
            key = key.match(/(.*)\[(.*)\]/);
            if (key) {
                val = object[key[1]][key[2]];
            }
        } else {
            val = object[field[0]];
        }
        if (val) {
            for (var colIndex = 1; colIndex < field.length; colIndex++) {
                val = val[field[colIndex]];
                if (typeof val === 'undefined') {
                    break;
                }
            }
        }
    }
    return val;
};
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/row.js






var base_row__class, row__temp2;








var row_noop = function noop() {};

var base_row_Row = (row__temp2 = base_row__class = function (_React$Component) {
    inherits_default()(Row, _React$Component);

    function Row() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Row);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onClick = function (e) {
            var _this$props = _this.props,
                record = _this$props.record,
                rowIndex = _this$props.rowIndex;

            _this.props.onClick(record, rowIndex, e);
        }, _this.onMouseEnter = function (e) {
            var _this$props2 = _this.props,
                record = _this$props2.record,
                rowIndex = _this$props2.rowIndex;

            _this.onRowHover(record, rowIndex, true, e);
        }, _this.onMouseLeave = function (e) {
            var _this$props3 = _this.props,
                record = _this$props3.record,
                rowIndex = _this$props3.rowIndex;

            _this.onRowHover(record, rowIndex, false, e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        if (nextProps.pure) {
            var isEqual = util_obj.shallowEqual(this.props, nextProps);
            return !isEqual;
        }

        return true;
    };

    Row.prototype.onRowHover = function onRowHover(record, index, isEnter, e) {
        var _props = this.props,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            currentRow = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);

        if (isEnter) {
            onMouseEnter(record, index, e);
            currentRow && dom.addClass(currentRow, 'hovered');
        } else {
            onMouseLeave(record, index, e);
            currentRow && dom.removeClass(currentRow, 'hovered');
        }
    };

    Row.prototype.renderCells = function renderCells(record) {
        var _this2 = this;

        var _props2 = this.props,
            Cell = _props2.Cell,
            columns = _props2.columns,
            getCellProps = _props2.getCellProps,
            cellRef = _props2.cellRef,
            prefix = _props2.prefix,
            rowIndex = _props2.rowIndex,
            primaryKey = _props2.primaryKey,
            pure = _props2.pure,
            locale = _props2.locale;
        var lockType = this.context.lockType;

        return columns.map(function (child, colIndex) {
            var _classnames;

            /* eslint-disable no-unused-vars, prefer-const */
            var dataIndex = child.dataIndex,
                align = child.align,
                alignHeader = child.alignHeader,
                width = child.width,
                others = objectWithoutProperties_default()(child, ['dataIndex', 'align', 'alignHeader', 'width']);

            var value = fetchDataByPath(record, dataIndex);
            var attrs = getCellProps(rowIndex, colIndex, dataIndex, record) || {};

            if (_this2.context.notRenderCellIndex) {
                var matchCellIndex = _this2.context.notRenderCellIndex.map(function (cellIndex) {
                    return cellIndex.toString();
                }).indexOf([rowIndex, colIndex].toString());
                if (matchCellIndex > -1) {
                    _this2.context.notRenderCellIndex.splice(matchCellIndex, 1);
                    return null;
                }
            }
            if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {
                _this2._getNotRenderCellIndex(colIndex, rowIndex, attrs.colSpan || 1, attrs.rowSpan || 1);
            }

            var cellClass = attrs.className;
            var className = _classnames_2_2_6_classnames_default()((_classnames = {
                first: lockType !== 'right' && colIndex === 0,
                last: lockType !== 'left' && (colIndex === columns.length - 1 || colIndex + attrs.colSpan === columns.length) }, _classnames[child.className] = child.className, _classnames[cellClass] = cellClass, _classnames));

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Cell, extends_default()({ key: colIndex
            }, others, attrs, {
                ref: function ref(cell) {
                    return cellRef(rowIndex, colIndex, cell);
                },
                prefix: prefix,
                pure: pure,
                primaryKey: primaryKey,
                record: record,
                className: className,
                value: value,
                colIndex: colIndex,
                rowIndex: rowIndex,
                align: align,
                locale: locale,
                width: width
            }));
        });
    };

    Row.prototype._getNotRenderCellIndex = function _getNotRenderCellIndex(colIndex, rowIndex, colSpan, rowSpan) {
        var maxColIndex = colSpan;
        var maxRowIndex = rowSpan;
        var notRenderCellIndex = [];
        for (var i = 0; i < maxColIndex; i++) {
            for (var j = 0; j < maxRowIndex; j++) {
                notRenderCellIndex.push([rowIndex + j, colIndex + i]);
            }
        }
        [].push.apply(this.context.notRenderCellIndex, notRenderCellIndex);
    };

    Row.prototype.render = function render() {
        var _classnames2;

        /* eslint-disable no-unused-vars*/
        var _props3 = this.props,
            prefix = _props3.prefix,
            className = _props3.className,
            onClick = _props3.onClick,
            onMouseEnter = _props3.onMouseEnter,
            onMouseLeave = _props3.onMouseLeave,
            columns = _props3.columns,
            Cell = _props3.Cell,
            getCellProps = _props3.getCellProps,
            rowIndex = _props3.rowIndex,
            record = _props3.record,
            children = _props3.children,
            primaryKey = _props3.primaryKey,
            cellRef = _props3.cellRef,
            colGroup = _props3.colGroup,
            pure = _props3.pure,
            locale = _props3.locale,
            others = objectWithoutProperties_default()(_props3, ['prefix', 'className', 'onClick', 'onMouseEnter', 'onMouseLeave', 'columns', 'Cell', 'getCellProps', 'rowIndex', 'record', 'children', 'primaryKey', 'cellRef', 'colGroup', 'pure', 'locale']);

        var cls = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'table-row'] = true, _classnames2[className] = className, _classnames2));
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'tr',
            extends_default()({ className: cls, role: 'row' }, others, {
                onClick: this.onClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }),
            this.renderCells(record),
            children
        );
    };

    return Row;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), base_row__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    columns: _prop_types_15_7_2_prop_types_default.a.array,
    record: _prop_types_15_7_2_prop_types_default.a.any,
    Cell: _prop_types_15_7_2_prop_types_default.a.func,
    rowIndex: _prop_types_15_7_2_prop_types_default.a.number,
    getCellProps: _prop_types_15_7_2_prop_types_default.a.func,
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    cellRef: _prop_types_15_7_2_prop_types_default.a.func,
    colGroup: _prop_types_15_7_2_prop_types_default.a.object,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, base_row__class.defaultProps = {
    prefix: 'next-',
    primaryKey: 'id',
    columns: [],
    record: {},
    getCellProps: row_noop,
    onClick: row_noop,
    onMouseEnter: row_noop,
    onMouseLeave: row_noop,
    cellRef: row_noop,
    colGroup: {}
}, base_row__class.contextTypes = {
    notRenderCellIndex: _prop_types_15_7_2_prop_types_default.a.array,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, row__temp2);
base_row_Row.displayName = 'Row';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/cell.js






var cell__class, cell__temp;






var cell_Cell = (cell__temp = cell__class = function (_React$Component) {
    inherits_default()(Cell, _React$Component);

    function Cell() {
        classCallCheck_default()(this, Cell);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    Cell.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        if (nextProps.pure) {
            var isEqual = util_obj.shallowEqual(this.props, nextProps);
            return !isEqual;
        }
        return true;
    };

    Cell.prototype.render = function render() {
        var _classnames;

        /* eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            cell = _props.cell,
            value = _props.value,
            resizable = _props.resizable,
            colIndex = _props.colIndex,
            rowIndex = _props.rowIndex,
            record = _props.record,
            context = _props.context,
            align = _props.align,
            _props$style = _props.style,
            style = _props$style === undefined ? {} : _props$style,
            Tag = _props.component,
            children = _props.children,
            title = _props.title,
            width = _props.width,
            innerStyle = _props.innerStyle,
            primaryKey = _props.primaryKey,
            __normalized = _props.__normalized,
            filterMode = _props.filterMode,
            filters = _props.filters,
            sortable = _props.sortable,
            lock = _props.lock,
            pure = _props.pure,
            locale = _props.locale,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'cell', 'value', 'resizable', 'colIndex', 'rowIndex', 'record', 'context', 'align', 'style', 'component', 'children', 'title', 'width', 'innerStyle', 'primaryKey', '__normalized', 'filterMode', 'filters', 'sortable', 'lock', 'pure', 'locale']);

        var tagStyle = extends_default()({}, style);
        var cellProps = { value: value, index: rowIndex, record: record, context: context };
        var content = cell;
        if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(content)) {
            content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(content, cellProps);
        } else if (typeof content === 'function') {
            content = content(value, rowIndex, record, context);
        }
        if (align) {
            tagStyle.textAlign = align;
        }
        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-cell'] = true, _classnames[className] = className, _classnames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({}, others, { className: cls, style: tagStyle, role: 'gridcell' }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'table-cell-wrapper', style: innerStyle },
                content,
                children
            )
        );
    };

    return Cell;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), cell__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    record: _prop_types_15_7_2_prop_types_default.a.any,
    value: _prop_types_15_7_2_prop_types_default.a.any,
    colIndex: _prop_types_15_7_2_prop_types_default.a.number,
    rowIndex: _prop_types_15_7_2_prop_types_default.a.number,
    title: _prop_types_15_7_2_prop_types_default.a.any,
    width: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    context: _prop_types_15_7_2_prop_types_default.a.any,
    cell: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
    align: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'center', 'right']),
    component: _prop_types_15_7_2_prop_types_default.a.oneOf(['td', 'th', 'div']),
    children: _prop_types_15_7_2_prop_types_default.a.any,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    innerStyle: _prop_types_15_7_2_prop_types_default.a.object,
    filterMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
    filters: _prop_types_15_7_2_prop_types_default.a.array,
    sortable: _prop_types_15_7_2_prop_types_default.a.bool,
    lock: _prop_types_15_7_2_prop_types_default.a.any,
    type: _prop_types_15_7_2_prop_types_default.a.oneOf(['header', 'body']),
    resizable: _prop_types_15_7_2_prop_types_default.a.bool,
    __normalized: _prop_types_15_7_2_prop_types_default.a.bool
}, cell__class.defaultProps = {
    component: 'td',
    type: 'body',
    cell: function cell(value) {
        return value;
    },
    prefix: 'next-'
}, cell__temp);
cell_Cell.displayName = 'Cell';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/body.js






var body__class, body__temp2;







var body_noop = function noop() {};

var body_Body = (body__temp2 = body__class = function (_React$Component) {
    inherits_default()(Body, _React$Component);

    function Body() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Body);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getRowRef = function (i, row) {
            _this.props.rowRef(i, row);
        }, _this.onRowClick = function (record, index, e) {
            _this.props.onRowClick(record, index, e);
        }, _this.onRowMouseEnter = function (record, index, e) {
            _this.props.onRowMouseEnter(record, index, e);
        }, _this.onRowMouseLeave = function (record, index, e) {
            _this.props.onRowMouseLeave(record, index, e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Body.prototype.render = function render() {
        var _this2 = this;

        /*eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            children = _props.children,
            Tag = _props.component,
            colGroup = _props.colGroup,
            loading = _props.loading,
            emptyContent = _props.emptyContent,
            components = _props.components,
            getCellProps = _props.getCellProps,
            primaryKey = _props.primaryKey,
            getRowProps = _props.getRowProps,
            dataSource = _props.dataSource,
            cellRef = _props.cellRef,
            columns = _props.columns,
            rowRef = _props.rowRef,
            onRowClick = _props.onRowClick,
            onRowMouseEnter = _props.onRowMouseEnter,
            onRowMouseLeave = _props.onRowMouseLeave,
            locale = _props.locale,
            pure = _props.pure,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'children', 'component', 'colGroup', 'loading', 'emptyContent', 'components', 'getCellProps', 'primaryKey', 'getRowProps', 'dataSource', 'cellRef', 'columns', 'rowRef', 'onRowClick', 'onRowMouseEnter', 'onRowMouseLeave', 'locale', 'pure']);

        var _components$Row = components.Row,
            Row = _components$Row === undefined ? base_row_Row : _components$Row,
            _components$Cell = components.Cell,
            Cell = _components$Cell === undefined ? cell_Cell : _components$Cell;

        var empty = loading ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            null,
            '\xA0'
        ) : emptyContent || locale.empty;
        var rows = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'tr',
            null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'td',
                { colSpan: columns.length },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'table-empty' },
                    empty
                )
            )
        );
        if (Tag === 'div') {
            rows = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'table',
                { role: 'table' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'tbody',
                    null,
                    rows
                )
            );
        }
        if (dataSource.length) {
            rows = dataSource.map(function (record, index) {
                var _classnames;

                var rowProps = getRowProps(record, index) || {};
                var rowClass = rowProps.className;
                var className = _classnames_2_2_6_classnames_default()((_classnames = {
                    first: index === 0,
                    last: index === dataSource.length - 1
                }, _classnames[rowClass] = rowClass, _classnames));
                var expanded = record.__expanded ? 'expanded' : '';
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Row, extends_default()({ key: '' + (record[primaryKey] || index) + expanded
                }, rowProps, {
                    ref: _this2.getRowRef.bind(_this2, index),
                    colGroup: colGroup,
                    columns: columns,
                    primaryKey: primaryKey,
                    record: record,
                    rowIndex: index,
                    prefix: prefix,
                    pure: pure,
                    cellRef: cellRef,
                    getCellProps: getCellProps,
                    className: className,
                    Cell: Cell,
                    onClick: _this2.onRowClick,
                    locale: locale,
                    onMouseEnter: _this2.onRowMouseEnter,
                    onMouseLeave: _this2.onRowMouseLeave
                }));
            });
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({ className: className }, others),
            rows,
            children
        );
    };

    return Body;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), body__class.propTypes = {
    loading: _prop_types_15_7_2_prop_types_default.a.bool,
    emptyContent: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    components: _prop_types_15_7_2_prop_types_default.a.object,
    getCellProps: _prop_types_15_7_2_prop_types_default.a.func,
    cellRef: _prop_types_15_7_2_prop_types_default.a.func,
    primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
    getRowProps: _prop_types_15_7_2_prop_types_default.a.func,
    rowRef: _prop_types_15_7_2_prop_types_default.a.func,
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    component: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.object,
    columns: _prop_types_15_7_2_prop_types_default.a.array,
    onRowClick: _prop_types_15_7_2_prop_types_default.a.func,
    onRowMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onRowMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, body__class.defaultProps = {
    loading: false,
    prefix: 'next-',
    components: {},
    getCellProps: body_noop,
    cellRef: body_noop,
    primaryKey: 'id',
    getRowProps: body_noop,
    rowRef: body_noop,
    dataSource: [],
    component: 'tbody',
    columns: []
}, body__temp2);
body_Body.displayName = 'Body';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/filter.js




var filter__class, filter__temp, filter__initialiseProps;









// 共享状态的组件需要变成非受控组件
var filter_Filter = (filter__temp = filter__class = function (_React$Component) {
    inherits_default()(Filter, _React$Component);

    function Filter(props) {
        classCallCheck_default()(this, Filter);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        filter__initialiseProps.call(_this);

        var filterParams = props.filterParams || {};
        var filterConfig = filterParams[props.dataIndex] || {};
        _this.state = {
            visible: filterConfig.visible || false,
            selectedKeys: filterConfig.selectedKeys || []
        };
        _this._selectedKeys = [].concat(_this.state.selectedKeys);
        return _this;
    }

    Filter.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.hasOwnProperty('filterParams') && typeof nextProps.filterParams !== 'undefined') {
            var dataIndex = nextProps.dataIndex || this.props.dataIndex;
            var filterParams = nextProps.filterParams || {};
            var filterConfig = filterParams[dataIndex] || {};
            var selectedKeys = filterConfig.selectedKeys || [];
            this.setState({
                selectedKeys: selectedKeys
            });
            this._selectedKeys = [].concat(selectedKeys);
        }
    };

    Filter.prototype.render = function render() {
        var _props = this.props,
            filters = _props.filters,
            prefix = _props.prefix,
            locale = _props.locale,
            filterMode = _props.filterMode;
        var _state = this.state,
            visible = _state.visible,
            selectedKeys = _state.selectedKeys;


        function renderMenuItem(item) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu.Item,
                { key: item.value },
                item.label
            );
        }

        function renderSubMenu(parent, children) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu.SubMenu,
                { label: parent.label, key: parent.value, selectable: false },
                renderMenuContent(children)
            );
        }

        function renderMenuContent(list) {
            return list.map(function (item) {
                if (item.children) {
                    return renderSubMenu(item, item.children);
                } else {
                    return renderMenuItem(item);
                }
            });
        }

        var content = renderMenuContent(filters),
            footer = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'table-filter-footer' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                { type: 'primary', onClick: this.onFilterConfirm },
                locale.ok
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                { onClick: this.onFilterClear },
                locale.reset
            )
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            dropdown,
            { trigger: external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { role: 'button',
                        'aria-label': locale.filter,
                        onKeyDown: this.filterKeydown,
                        tabIndex: '0',
                        className: prefix + 'table-filter' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'filter', size: 'small' })
                ),
                triggerType: 'click',
                visible: visible,
                autoFocus: true,
                container: function container(node) {
                    return node.parentNode;
                },
                onVisibleChange: this.onFilterVisible },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_menu,
                { footer: footer,
                    selectedKeys: selectedKeys,
                    selectMode: filterMode,
                    onSelect: this.onFilterSelect },
                content
            )
        );
    };

    return Filter;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), filter__class.propTypes = {
    dataIndex: _prop_types_15_7_2_prop_types_default.a.string,
    filters: _prop_types_15_7_2_prop_types_default.a.array,
    filterMode: _prop_types_15_7_2_prop_types_default.a.string,
    filterParams: _prop_types_15_7_2_prop_types_default.a.object,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    onFilter: _prop_types_15_7_2_prop_types_default.a.func,
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, filter__class.defaultProps = {
    onFilter: function onFilter() {}
}, filter__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.filterKeydown = function (e) {
        e.preventDefault();
        e.stopPropagation();

        if (e.keyCode === KEYCODE.ENTER) {
            _this2.setState({
                visible: !_this2.state.visible
            });
        }
    };

    this.onFilterVisible = function (visible) {
        _this2.setState({
            visible: visible
        });

        if (!visible) {
            var selectedKeys = [].concat(_this2._selectedKeys);

            _this2.setState({
                selectedKeys: selectedKeys
            });
        }
    };

    this.onFilterSelect = function (selectedKeys) {
        _this2.setState({
            visible: true,
            selectedKeys: selectedKeys
        });
    };

    this.onFilterConfirm = function () {
        var selectedKeys = _this2.state.selectedKeys;
        var filterParams = {},
            dataIndex = _this2.props.dataIndex;

        filterParams[dataIndex] = {
            visible: false,
            selectedKeys: selectedKeys
        };
        _this2._selectedKeys = [].concat(selectedKeys);
        _this2.setState({
            visible: false
        });
        // 兼容之前的格式
        _this2.props.onFilter(filterParams);
    };

    this.onFilterClear = function () {
        var filterParams = {},
            dataIndex = _this2.props.dataIndex;

        filterParams[dataIndex] = {
            visible: false,
            selectedKeys: []
        };
        _this2._selectedKeys = [];
        _this2.setState({
            selectedKeys: [],
            visible: false
        });
        // 兼容之前的格式
        _this2.props.onFilter(filterParams);
    };
}, filter__temp);
filter_Filter.displayName = 'Filter';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/sort.js




var sort__class, sort__temp2;






/* eslint-disable react/prefer-stateless-function */
var sort_Sort = (sort__temp2 = sort__class = function (_React$Component) {
    inherits_default()(Sort, _React$Component);

    function Sort() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Sort);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function () {
            var _this$props = _this.props,
                sort = _this$props.sort,
                dataIndex = _this$props.dataIndex;

            _this.onSort(dataIndex, sort[dataIndex] === 'desc' ? 'asc' : 'desc');
        }, _this.keydownHandler = function (e) {
            e.preventDefault();
            e.stopPropagation();

            if (e.keyCode === KEYCODE.ENTER) {
                _this.handleClick();
            }
        }, _this.onSort = function (dataIndex, order) {
            var sort = {};
            sort[dataIndex] = order;

            _this.props.onSort(dataIndex, order, sort);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    // 渲染排序
    Sort.prototype.renderSort = function renderSort() {
        var _props = this.props,
            prefix = _props.prefix,
            sort = _props.sort,
            dataIndex = _props.dataIndex,
            locale = _props.locale,
            sortStatus = sort[dataIndex],
            map = {
            desc: 'descending',
            asc: 'ascending'
        };


        var icons = ['asc', 'desc'].map(function (sortOrder) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                { href: 'javascript:;',
                    key: sortOrder,
                    className: sortStatus === sortOrder ? 'current' : '' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: map[sortOrder], size: 'small' })
            );
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { role: 'button',
                tabIndex: '0',
                'aria-label': locale[sortStatus],
                className: prefix + 'table-sort',
                onClick: this.handleClick.bind(this),
                onKeyDown: this.keydownHandler },
            icons
        );
    };

    Sort.prototype.render = function render() {
        return this.renderSort();
    };

    return Sort;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), sort__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    sort: _prop_types_15_7_2_prop_types_default.a.object,
    onSort: _prop_types_15_7_2_prop_types_default.a.func,
    dataIndex: _prop_types_15_7_2_prop_types_default.a.string,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, sort__class.defaultProps = {
    sort: {} }, sort__temp2);
sort_Sort.displayName = 'Sort';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/resize.js




var resize__class, resize__temp2;





var resize_Resize = (resize__temp2 = resize__class = function (_React$Component) {
    inherits_default()(Resize, _React$Component);

    function Resize() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Resize);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onMouseDown = function (e) {
            _this.lastPageX = e.pageX;
            util_events.on(document, 'mousemove', _this.onMouseMove);
            util_events.on(document, 'mouseup', _this.onMouseUp);
            _this.unSelect();
        }, _this.onMouseMove = function (e) {
            var pageX = e.pageX;
            var changedPageX = pageX - _this.lastPageX;
            _this.props.onChange(_this.props.dataIndex, changedPageX);
            _this.lastPageX = pageX;
        }, _this.onMouseUp = function () {
            _this.destory();
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Resize.prototype.componentWillUnmount = function componentWillUnmount() {
        this.destory();
    };

    Resize.prototype.destory = function destory() {
        util_events.off(document, 'mousemove', this.onMouseMove);
        util_events.off(document, 'mouseup', this.onMouseMove);
        this.select();
    };

    Resize.prototype.unSelect = function unSelect() {
        dom.setStyle(document.body, {
            userSelect: 'none',
            cursor: 'ew-resize'
        });
        document.body.setAttribute('unselectable', 'on');
    };

    Resize.prototype.select = function select() {
        dom.setStyle(document.body, {
            userSelect: '',
            cursor: ''
        });
        document.body.removeAttribute('unselectable');
    };

    Resize.prototype.render = function render() {
        var prefix = this.props.prefix;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('a', { className: prefix + 'table-resize-handler', onMouseDown: this.onMouseDown });
    };

    return Resize;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), resize__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    dataIndex: _prop_types_15_7_2_prop_types_default.a.string
}, resize__class.defaultProps = {
    onChange: function onChange() {}
}, resize__temp2);
resize_Resize.displayName = 'Resize';


/* harmony default export */ var base_resize = (resize_Resize);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/header.js






var header__class, header__temp2;









var header_noop = function noop() {};
var header_Header = (header__temp2 = header__class = function (_React$Component) {
    inherits_default()(Header, _React$Component);

    function Header() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Header);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getCellRef = function (i, j, cell) {
            _this.props.headerCellRef(i, j, cell);
        }, _this.onSort = function (dataIndex, order, sort) {
            _this.props.onSort(dataIndex, order, sort);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Header.prototype.render = function render() {
        var _this2 = this;

        /*eslint-disable no-unused-vars */
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            children = _props.children,
            Tag = _props.component,
            colGroup = _props.colGroup,
            columns = _props.columns,
            locale = _props.locale,
            filterParams = _props.filterParams,
            onFilter = _props.onFilter,
            components = _props.components,
            affixRef = _props.affixRef,
            headerCellRef = _props.headerCellRef,
            onSort = _props.onSort,
            sort = _props.sort,
            onResizeChange = _props.onResizeChange,
            pure = _props.pure,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'children', 'component', 'colGroup', 'columns', 'locale', 'filterParams', 'onFilter', 'components', 'affixRef', 'headerCellRef', 'onSort', 'sort', 'onResizeChange', 'pure']);

        var _components$Cell = components.Cell,
            Cell = _components$Cell === undefined ? cell_Cell : _components$Cell,
            _components$Filter = components.Filter,
            Filter = _components$Filter === undefined ? filter_Filter : _components$Filter,
            _components$Sort = components.Sort,
            Sort = _components$Sort === undefined ? sort_Sort : _components$Sort,
            _components$Resize = components.Resize,
            Resize = _components$Resize === undefined ? base_resize : _components$Resize;

        var rowSpan = columns.length;

        var header = columns.map(function (cols, index) {
            var col = cols.map(function (col, j) {
                var _classnames;

                /* eslint-disable no-unused-vars, prefer-const */
                var title = col.title,
                    colSpan = col.colSpan,
                    sortable = col.sortable,
                    resizable = col.resizable,
                    dataIndex = col.dataIndex,
                    filters = col.filters,
                    filterMode = col.filterMode,
                    width = col.width,
                    align = col.align,
                    alignHeader = col.alignHeader,
                    className = col.className,
                    __normalized = col.__normalized,
                    lock = col.lock,
                    others = objectWithoutProperties_default()(col, ['title', 'colSpan', 'sortable', 'resizable', 'dataIndex', 'filters', 'filterMode', 'width', 'align', 'alignHeader', 'className', '__normalized', 'lock']);

                className = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-header-node'] = true, _classnames[prefix + 'table-header-resizable'] = resizable, _classnames[className] = className, _classnames));
                var attrs = {},
                    sortElement = void 0,
                    filterElement = void 0,
                    resizeElement = void 0;
                if (col.children && col.children.length) {
                    attrs.colSpan = colSpan;
                } else {
                    if (sortable) {
                        sortElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Sort, { prefix: prefix,
                            dataIndex: dataIndex,
                            onSort: _this2.onSort,
                            sort: sort,
                            locale: locale });
                    }
                    if (resizable) {
                        resizeElement = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Resize, { prefix: prefix, dataIndex: dataIndex, onChange: onResizeChange });
                    }

                    if (filters) {
                        filterElement = filters.length ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Filter, { dataIndex: dataIndex,
                            filters: filters,
                            prefix: prefix,
                            locale: locale,
                            filterParams: filterParams,
                            filterMode: filterMode,
                            onFilter: onFilter }) : null;
                    }
                    attrs.rowSpan = rowSpan - index;
                }
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    Cell,
                    extends_default()({}, others, attrs, {
                        key: j,
                        prefix: prefix,
                        pure: pure,
                        cell: title,
                        component: 'th',
                        align: alignHeader ? alignHeader : align,
                        className: className,
                        ref: _this2.getCellRef.bind(_this2, index, j),
                        type: 'header' }),
                    sortElement,
                    filterElement,
                    resizeElement
                );
            });
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { key: index },
                col
            );
        });

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            extends_default()({ className: className }, others),
            header,
            children
        );
    };

    return Header;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), header__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    component: _prop_types_15_7_2_prop_types_default.a.string,
    columns: _prop_types_15_7_2_prop_types_default.a.array,
    colGroup: _prop_types_15_7_2_prop_types_default.a.object,
    headerCellRef: _prop_types_15_7_2_prop_types_default.a.func,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    filterParams: _prop_types_15_7_2_prop_types_default.a.object,
    onFilter: _prop_types_15_7_2_prop_types_default.a.func,
    components: _prop_types_15_7_2_prop_types_default.a.object,
    sort: _prop_types_15_7_2_prop_types_default.a.object,
    onSort: _prop_types_15_7_2_prop_types_default.a.func,
    onResizeChange: _prop_types_15_7_2_prop_types_default.a.func
}, header__class.defaultProps = {
    component: 'thead',
    columns: [],
    headerCellRef: header_noop,
    onFilter: header_noop,
    components: {},
    onSort: header_noop,
    onResizeChange: header_noop
}, header__temp2);
header_Header.displayName = 'Header';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base/wrapper.js






/* eslint-disable react/prefer-stateless-function */

var wrapper_Wrapper = function (_Component) {
    inherits_default()(Wrapper, _Component);

    function Wrapper() {
        classCallCheck_default()(this, Wrapper);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    Wrapper.prototype.render = function render() {
        var _props = this.props,
            colGroup = _props.colGroup,
            children = _props.children,
            Tag = _props.component;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            Tag,
            { role: 'table' },
            colGroup,
            children
        );
    };

    return Wrapper;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]);

wrapper_Wrapper.displayName = 'Wrapper';



wrapper_Wrapper.defaultProps = {
    component: 'table'
};

wrapper_Wrapper.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.any,
    component: _prop_types_15_7_2_prop_types_default.a.string
};
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/column.js




var column__class, column__temp;




/**
 * Table.Column
 * @order 0
 **/
var column_Column = (column__temp = column__class = function (_React$Component) {
  inherits_default()(Column, _React$Component);

  function Column() {
    classCallCheck_default()(this, Column);

    return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
  }

  Column.prototype.render = function render() {
    return null;
  };

  return Column;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), column__class.propTypes = {
  /**
   * 指定列对应的字段，支持`a.b`形式的快速取值
   */
  dataIndex: _prop_types_15_7_2_prop_types_default.a.string,
  /**
   * 行渲染的逻辑
   * value, rowIndex, record, context四个属性只可读不可被更改
   * Function(value, index, record) => Element
   */
  cell: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
  /**
   * 表头显示的内容
   * value, rowIndex, record, context四个属性只可读不可被更改
   */
  title: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
  /**
   * 是否支持排序
   */
  sortable: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 列宽，注意在锁列的情况下一定需要配置宽度
   */
  width: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
  /**
   * 单元格的对齐方式
   */
  align: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'center', 'right']),
  /**
   * 单元格标题的对齐方式, 不配置默认读取align值
   */
  alignHeader: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'center', 'right']),
  /**
   * 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`
   */
  filters: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.shape({
    label: _prop_types_15_7_2_prop_types_default.a.string,
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.string])
  })),
  /**
   * 过滤的模式是单选还是多选
   */
  filterMode: _prop_types_15_7_2_prop_types_default.a.oneOf(['single', 'multiple']),
  /**
   * 是否支持锁列,可选值为`left`,`right`, `true`
   */
  lock: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.string]),
  /**
   * 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.
   */
  resizable: _prop_types_15_7_2_prop_types_default.a.bool
}, column__class.contextTypes = {
  parent: _prop_types_15_7_2_prop_types_default.a.any
}, column__class.defaultProps = {
  cell: function cell(value) {
    return value;
  },
  filterMode: 'multiple',
  resizable: false
}, column__class._typeMark = 'column', column__temp);
column_Column.displayName = 'Column';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/column-group.js




var column_group__class, column_group__temp;




/**
 * Table.ColumnGroup
 * @order 1
 **/
var column_group_ColumnGroup = (column_group__temp = column_group__class = function (_React$Component) {
    inherits_default()(ColumnGroup, _React$Component);

    function ColumnGroup() {
        classCallCheck_default()(this, ColumnGroup);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    ColumnGroup.prototype.getChildContext = function getChildContext() {
        return {
            parent: this
        };
    };

    ColumnGroup.prototype.render = function render() {
        return null;
    };

    return ColumnGroup;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), column_group__class.propTypes = {
    /**
     * 表头显示的内容
     */
    title: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func])
}, column_group__class.childContextTypes = {
    parent: _prop_types_15_7_2_prop_types_default.a.any
}, column_group__class.defaultProps = {
    title: 'column-group'
}, column_group__class._typeMark = 'columnGroup', column_group__temp);
column_group_ColumnGroup.displayName = 'ColumnGroup';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/base.js






var table_base__class, table_base__temp;


















var Children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children,
    table_base_noop = function noop() {};

//<Table>
//    <Table.Column/>
//    <Table.ColumnGroup>
//      <Table.Column/>
//      <Table.Column/>
//    </Table.ColumnGroup>
//</Table>

/** Table */
var base_Table = (table_base__temp = table_base__class = function (_React$Component) {
    inherits_default()(Table, _React$Component);

    function Table(props, context) {
        classCallCheck_default()(this, Table);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

        _this.state = {
            sort: _this.props.sort || {}
        };

        _this.onSort = function (dataIndex, order, sort) {
            if (typeof _this.props.sort === 'undefined') {
                _this.setState({
                    sort: sort
                }, function () {
                    _this.props.onSort(dataIndex, order, sort);
                });
            } else {
                _this.props.onSort(dataIndex, order, sort);
            }
        };

        _this.onFilter = function (filterParams) {
            _this.props.onFilter(filterParams);
        };

        _this.onResizeChange = function (dataIndex, value) {
            _this.props.onResizeChange(dataIndex, value);
        };

        _this.getWrapperRef = function (wrapper) {
            if (!wrapper) {
                return _this.wrapper;
            }
            _this.wrapper = wrapper;
        };

        _this.getAffixRef = function (affixRef) {
            if (!affixRef) {
                return _this.affixRef;
            }
            _this.affixRef = affixRef;
        };

        _this.getHeaderCellRef = function (i, j, cell) {
            var cellRef = 'header_cell_' + i + '_' + j;
            if (!cell) {
                return _this[cellRef];
            }
            _this[cellRef] = cell;
        };

        _this.getRowRef = function (i, row) {
            var rowRef = 'row_' + i;
            if (!row) {
                return _this[rowRef];
            }
            _this[rowRef] = row;
        };

        _this.getCellRef = function (i, j, cell) {
            var cellRef = 'cell_' + i + '_' + j;
            if (!cell) {
                return _this[cellRef];
            }
            _this[cellRef] = cell;
        };

        var _this$context = _this.context,
            getTableInstance = _this$context.getTableInstance,
            getTableInstanceForVirtual = _this$context.getTableInstanceForVirtual;

        getTableInstance && getTableInstance(props.lockType, _this);
        getTableInstanceForVirtual && getTableInstanceForVirtual(props.lockType, _this);
        _this.notRenderCellIndex = [];
        return _this;
    }

    Table.prototype.getChildContext = function getChildContext() {
        return {
            notRenderCellIndex: this.notRenderCellIndex,
            lockType: this.props.lockType
        };
    };

    Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (typeof this.props.sort !== 'undefined') {
            this.setState({
                sort: nextProps.sort
            });
        }
    };

    Table.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {
        if (nextProps.pure) {
            var isEqual = _shallow_element_equals_1_0_1_shallow_element_equals_default()(nextProps, this.props) && util_obj.shallowEqual(nextState, this.state) && util_obj.shallowEqual(nextContext, this.context);
            return !isEqual;
        }

        return true;
    };

    Table.prototype.componentWillUpdate = function componentWillUpdate() {
        this.notRenderCellIndex = [];
    };

    Table.prototype.normalizeChildrenState = function normalizeChildrenState(props) {
        var columns = props.columns;
        if (props.children) {
            columns = this.normalizeChildren(props);
        }
        return this.fetchInfoFromBinaryChildren(columns);
    };

    // 将React结构化数据提取props转换成数组


    Table.prototype.normalizeChildren = function normalizeChildren(props) {
        var columns = props.columns;

        var getChildren = function getChildren(children) {
            var ret = [];
            Children.forEach(children, function (child) {
                if (child) {
                    var _props = extends_default()({}, child.props);

                    if (!(child && typeof child.type === 'function' && (child.type._typeMark === 'column' || child.type._typeMark === 'columnGroup'))) {
                        log.warning('Use <Table.Column/>, <Table.ColumnGroup/> as child.');
                    }
                    ret.push(_props);
                    if (child.props.children) {
                        _props.children = getChildren(child.props.children);
                    }
                }
            });
            return ret;
        };
        if (props.children) {
            columns = getChildren(props.children);
        }
        return columns;
    };

    Table.prototype.fetchInfoFromBinaryChildren = function fetchInfoFromBinaryChildren(children) {
        var hasGroupHeader = false;
        var flatChildren = [],
            groupChildren = [],
            getChildren = function getChildren(propsChildren, level) {
            groupChildren[level] = groupChildren[level] || [];
            propsChildren.forEach(function (child) {
                if (child.children) {
                    hasGroupHeader = true;
                    getChildren(child.children, level + 1);
                } else {
                    flatChildren.push(child);
                }
                groupChildren[level].push(child);
            });
        },
            getColSpan = function getColSpan(children, colSpan) {
            colSpan = colSpan || 0;
            children.forEach(function (child) {
                if (child.children) {
                    colSpan = getColSpan(child.children, colSpan);
                } else {
                    colSpan += 1;
                }
            });
            return colSpan;
        };

        getChildren(children, 0);

        groupChildren.forEach(function (groupChild, i) {
            groupChild.forEach(function (child, j) {
                var colSpan = void 0;
                var children = child.children;

                if (children) {
                    colSpan = getColSpan(children);
                    child.colSpan = colSpan;
                    groupChildren[i][j] = child;
                }
            });
        });

        return {
            flatChildren: flatChildren,
            groupChildren: groupChildren,
            hasGroupHeader: hasGroupHeader
        };
    };

    Table.prototype.renderColGroup = function renderColGroup(flatChildren) {
        var cols = flatChildren.map(function (col, index) {
            var width = col.width;
            var style = {};
            if (width) {
                style = {
                    width: width
                };
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('col', { style: style, key: index });
        });
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'colgroup',
            { key: 'table-colgroup' },
            cols
        );
    };

    // 通过头部和扁平的结构渲染表格
    Table.prototype.renderTable = function renderTable(groupChildren, flatChildren) {
        if (flatChildren.length || !flatChildren.length && !this.props.lockType) {
            var _props2 = this.props,
                hasHeader = _props2.hasHeader,
                components = _props2.components,
                prefix = _props2.prefix,
                wrapperContent = _props2.wrapperContent,
                filterParams = _props2.filterParams,
                locale = _props2.locale,
                dataSource = _props2.dataSource,
                emptyContent = _props2.emptyContent,
                loading = _props2.loading,
                getCellProps = _props2.getCellProps,
                primaryKey = _props2.primaryKey,
                getRowProps = _props2.getRowProps,
                onRowClick = _props2.onRowClick,
                onRowMouseEnter = _props2.onRowMouseEnter,
                onRowMouseLeave = _props2.onRowMouseLeave,
                pure = _props2.pure;
            var sort = this.state.sort;
            var _components$Header = components.Header,
                Header = _components$Header === undefined ? header_Header : _components$Header,
                _components$Wrapper = components.Wrapper,
                Wrapper = _components$Wrapper === undefined ? wrapper_Wrapper : _components$Wrapper,
                _components$Body = components.Body,
                Body = _components$Body === undefined ? body_Body : _components$Body;

            var colGroup = this.renderColGroup(flatChildren);

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                Wrapper,
                {
                    colGroup: colGroup,
                    ref: this.getWrapperRef,
                    prefix: prefix
                },
                hasHeader ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Header, {
                    prefix: prefix,
                    pure: pure,
                    affixRef: this.getAffixRef,
                    colGroup: colGroup,
                    className: prefix + 'table-header',
                    filterParams: filterParams,
                    columns: groupChildren,
                    locale: locale,
                    headerCellRef: this.getHeaderCellRef,
                    components: components,
                    onFilter: this.onFilter,
                    sort: sort,
                    onResizeChange: this.onResizeChange,
                    onSort: this.onSort
                }) : null,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Body, {
                    prefix: prefix,
                    pure: pure,
                    colGroup: colGroup,
                    className: prefix + 'table-body',
                    components: components,
                    loading: loading,
                    emptyContent: emptyContent,
                    getCellProps: getCellProps,
                    primaryKey: primaryKey,
                    getRowProps: getRowProps,
                    columns: flatChildren,
                    rowRef: this.getRowRef,
                    cellRef: this.getCellRef,
                    onRowClick: onRowClick,
                    onRowMouseEnter: onRowMouseEnter,
                    onRowMouseLeave: onRowMouseLeave,
                    dataSource: dataSource,
                    locale: locale
                }),
                wrapperContent
            );
        } else {
            return null;
        }
    };

    Table.prototype.render = function render() {
        var _classnames;

        var ret = this.normalizeChildrenState(this.props);
        this.groupChildren = ret.groupChildren;
        this.flatChildren = ret.flatChildren;
        /* eslint-disable no-unused-vars, prefer-const */
        var table = this.renderTable(ret.groupChildren, ret.flatChildren),
            _props3 = this.props,
            className = _props3.className,
            hasBorder = _props3.hasBorder,
            isZebra = _props3.isZebra,
            loading = _props3.loading,
            hasHeader = _props3.hasHeader,
            prefix = _props3.prefix,
            dataSource = _props3.dataSource,
            entireDataSource = _props3.entireDataSource,
            onSort = _props3.onSort,
            onResizeChange = _props3.onResizeChange,
            onRowClick = _props3.onRowClick,
            onRowMouseEnter = _props3.onRowMouseEnter,
            onRowMouseLeave = _props3.onRowMouseLeave,
            onFilter = _props3.onFilter,
            getRowProps = _props3.getRowProps,
            getCellProps = _props3.getCellProps,
            primaryKey = _props3.primaryKey,
            components = _props3.components,
            wrapperContent = _props3.wrapperContent,
            lockType = _props3.lockType,
            locale = _props3.locale,
            refs = _props3.refs,
            pure = _props3.pure,
            rtl = _props3.rtl,
            emptyContent = _props3.emptyContent,
            filterParams = _props3.filterParams,
            _props3$loadingCompon = _props3.loadingComponent,
            LoadingComponent = _props3$loadingCompon === undefined ? es_loading : _props3$loadingCompon,
            others = objectWithoutProperties_default()(_props3, ['className', 'hasBorder', 'isZebra', 'loading', 'hasHeader', 'prefix', 'dataSource', 'entireDataSource', 'onSort', 'onResizeChange', 'onRowClick', 'onRowMouseEnter', 'onRowMouseLeave', 'onFilter', 'getRowProps', 'getCellProps', 'primaryKey', 'components', 'wrapperContent', 'lockType', 'locale', 'refs', 'pure', 'rtl', 'emptyContent', 'filterParams', 'loadingComponent']),
            cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table'] = true, _classnames['only-bottom-border'] = !hasBorder, _classnames['no-header'] = !hasHeader, _classnames.zebra = isZebra, _classnames[className] = className, _classnames));


        if (rtl) {
            others.dir = 'rtl';
        }
        var content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ className: cls }, others),
            table
        );
        if (loading) {
            var loadingClassName = prefix + 'table-loading';
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                LoadingComponent,
                { className: loadingClassName },
                content
            );
        }
        return content;
    };

    return Table;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), table_base__class.Column = column_Column, table_base__class.ColumnGroup = column_group_ColumnGroup, table_base__class.Header = header_Header, table_base__class.Body = body_Body, table_base__class.Wrapper = wrapper_Wrapper, table_base__class.Row = base_row_Row, table_base__class.Cell = cell_Cell, table_base__class.Filter = filter_Filter, table_base__class.Sort = sort_Sort, table_base__class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 表格展示的数据源
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    entireDataSource: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 点击表格每一行触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 悬浮在表格每一行的时候触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 离开表格每一行的时候触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowMouseLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击列排序触发的事件
     * @param {String} dataIndex 指定的排序的字段
     * @param {String} order 排序对应的顺序, 有`desc`和`asc`两种
     */
    onSort: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击过滤确认按钮触发的事件
     * @param {Object} filterParams 过滤的字段信息
     */
    onFilter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 重设列尺寸的时候触发的事件
     * @param {String} dataIndex 指定重设的字段
     * @param {Number} value 列宽变动的数值
     */
    onResizeChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @returns {Object} 需要设置的行属性
     */
    getRowProps: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置单元格的属性，通过该属性可以进行合并单元格
     * @param {Number} rowIndex 该行所对应的序列
     * @param {Number} colIndex 该列所对应的序列
     * @param {String} dataIndex 该列所对应的字段名称
     * @param {Object} record 该行对应的记录
     * @returns {Object} 返回td元素的所支持的属性对象
     */
    getCellProps: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 表格是否具有边框
     */
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 表格是否具有头部
     */
    hasHeader: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 表格是否是斑马线
     */
    isZebra: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 表格是否在加载中
     */
    loading: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义 Loading 组件
     * @type {Function}
     */
    loadingComponent: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}
     * 示例:
     * 假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中
     * `<Table filterParams={{id: {selectedKeys: ['one']}}}/>`
     */
    filterParams: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}
     */
    sort: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 自定义国际化文案对象
     * @property {String} ok 过滤器中确认按钮文案
     * @property {String} reset 过滤器中重置按钮文案
     * @property {String} empty 没有数据情况下 table内的文案
     * @property {String} asc 排序升序状态下的文案
     * @property {String} desc 排序将序状态下的文案
     * @property {String} expanded 可折叠行，展开状态下的文案
     * @property {String} folded 可折叠行，折叠状态下的文案
     * @property {String} filter 过滤器文案
     * @property {String} selectAll header里全选的按钮文案
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    components: _prop_types_15_7_2_prop_types_default.a.object,
    columns: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 设置数据为空的时候的表格内容展现
     */
    emptyContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中
     */
    primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
    wrapperContent: _prop_types_15_7_2_prop_types_default.a.any,
    refs: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 额外渲染行的渲染函数
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @returns {Element} 渲染内容
     */
    expandedRowRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 额外渲染行的缩进
     */
    expandedRowIndent: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态
     */
    openRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 是否显示点击展开额外渲染行的+号按钮
     */
    hasExpandedRowCtrl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 设置额外渲染行的属性
     */
    getExpandedColProps: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 在额外渲染行或者Tree展开或者收起的时候触发的事件
     * @param {Array} openRowKeys 展开的渲染行的key
     * @param {String} currentRowKey 当前点击的渲染行的key
     * @param {Boolean} expanded 当前点击是展开还是收起
     * @param {Object} currentRecord 当前点击额外渲染行的记录
     */
    onRowOpen: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击额外渲染行触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onExpandedRowClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条
     */
    fixedHeader: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条
     */
    maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    /**
     * 是否启用选择模式
     * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性
     * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。
     * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调
     * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调
     * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值
     * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`
     */
    rowSelection: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 表头是否是sticky
     */
    stickyHeader: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 距离窗口顶部达到指定偏移量后触发
     */
    offsetTop: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * affix组件的的属性
     */
    affixProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效
     */
    indent: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table
     */
    isTree: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否开启虚拟滚动
     */
    useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 设置行高
     */
    rowHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 在内容区域滚动的时候触发的函数
     */
    onBodyScroll: _prop_types_15_7_2_prop_types_default.a.func
}, table_base__class.defaultProps = {
    dataSource: [],
    onRowClick: table_base_noop,
    onRowMouseEnter: table_base_noop,
    onRowMouseLeave: table_base_noop,
    onSort: table_base_noop,
    onFilter: table_base_noop,
    onResizeChange: table_base_noop,
    getRowProps: table_base_noop,
    getCellProps: table_base_noop,
    prefix: 'next-',
    hasBorder: true,
    hasHeader: true,
    isZebra: false,
    loading: false,
    primaryKey: 'id',
    components: {},
    locale: zh_cn.Table
}, table_base__class.childContextTypes = {
    notRenderCellIndex: _prop_types_15_7_2_prop_types_default.a.array,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, table_base__class.contextTypes = {
    getTableInstance: _prop_types_15_7_2_prop_types_default.a.func,
    getTableInstanceForVirtual: _prop_types_15_7_2_prop_types_default.a.func
}, table_base__temp);
base_Table.displayName = 'Table';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/lock/row.js





var lock_row__class, lock_row__temp2;





var row_LockRow = (lock_row__temp2 = lock_row__class = function (_React$Component) {
    inherits_default()(LockRow, _React$Component);

    function LockRow() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, LockRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onMouseEnter = function (record, index, e) {
            var onRowMouseEnter = _this.context.onRowMouseEnter;
            var onMouseEnter = _this.props.onMouseEnter;

            onRowMouseEnter && onRowMouseEnter(record, index, e);
            onMouseEnter(record, index, e);
        }, _this.onMouseLeave = function (record, index, e) {
            var onRowMouseLeave = _this.context.onRowMouseLeave;
            var onMouseLeave = _this.props.onMouseLeave;

            onRowMouseLeave && onRowMouseLeave(record, index, e);
            onMouseLeave(record, index, e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    LockRow.prototype.render = function render() {
        /* eslint-disable no-unused-vars*/
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(base_row_Row, extends_default()({}, this.props, { onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }));
    };

    return LockRow;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), lock_row__class.propTypes = extends_default()({}, base_row_Row.propTypes), lock_row__class.contextTypes = {
    onRowMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
    onRowMouseLeave: _prop_types_15_7_2_prop_types_default.a.func
}, lock_row__class.defaultProps = extends_default()({}, base_row_Row.defaultProps), lock_row__temp2);
row_LockRow.displayName = 'LockRow';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/expanded/row.js





var expanded_row__class, expanded_row__temp;






var row_ExpandedRow = (expanded_row__temp = expanded_row__class = function (_React$Component) {
    inherits_default()(ExpandedRow, _React$Component);

    function ExpandedRow() {
        classCallCheck_default()(this, ExpandedRow);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    ExpandedRow.prototype.renderExpandedRow = function renderExpandedRow(record, index, colSpan) {
        var _context = this.context,
            expandedRowRender = _context.expandedRowRender,
            expandedRowIndent = _context.expandedRowIndent,
            openRowKeys = _context.openRowKeys,
            lockType = _context.lockType;
        var _props = this.props,
            columns = _props.columns,
            cellRef = _props.cellRef;

        if (expandedRowRender) {
            var _props2 = this.props,
                primaryKey = _props2.primaryKey,
                prefix = _props2.prefix,
                leftIndent = expandedRowIndent[0],
                rightIndent = expandedRowIndent[1],
                totalIndent = leftIndent + rightIndent,
                renderCols = function renderCols(number) {
                var ret = [];

                var _loop = function _loop(i) {
                    ret.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'td',
                        { key: i, ref: function ref(cell) {
                                return cellRef(index, i, cell);
                            } },
                        '\xA0'
                    ));
                };

                for (var i = 0; i < number; i++) {
                    _loop(i);
                }
                return ret;
            };

            var content = void 0;

            if (totalIndent > colSpan && !lockType) {
                log.warning('It\'s not allowed expandedRowIndent is more than the number of columns.');
            }
            if (leftIndent < columns.length && lockType === 'left') {
                log.warning('expandedRowIndent left is less than the number of left lock columns.');
            }
            if (rightIndent < columns.length && lockType === 'right') {
                log.warning('expandedRowIndent right is less than the number of right lock columns.');
            }
            if (lockType) {
                return openRowKeys.indexOf(record[primaryKey]) > -1 ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'tr',
                    { className: prefix + 'table-expanded-row', key: 'expanded-' + index },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'td',
                        { colSpan: colSpan, ref: function ref(cell) {
                                return cellRef(index, 0, cell);
                            } },
                        '\xA0'
                    )
                ) : null;
            }
            content = expandedRowRender(record, index);
            if (!external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(content)) {
                content = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'table-cell-wrapper' },
                    content
                );
            }
            return openRowKeys.indexOf(record[primaryKey]) > -1 ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tr',
                { className: prefix + 'table-expanded-row', key: 'expanded-' + (record[primaryKey] || index) },
                renderCols(leftIndent),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'td',
                    { colSpan: colSpan - totalIndent },
                    content
                ),
                renderCols(rightIndent)
            ) : null;
        } else {
            return null;
        }
    };

    ExpandedRow.prototype.render = function render() {
        /* eslint-disable no-unused-vars*/
        var _props3 = this.props,
            record = _props3.record,
            rowIndex = _props3.rowIndex,
            columns = _props3.columns;

        if (record.__expanded) {
            return this.renderExpandedRow(record, rowIndex, columns.length);
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(row_LockRow, this.props);
    };

    return ExpandedRow;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), expanded_row__class.propTypes = extends_default()({}, row_LockRow.propTypes), expanded_row__class.defaultProps = extends_default()({}, row_LockRow.defaultProps), expanded_row__class.contextTypes = {
    openRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
    expandedRowRender: _prop_types_15_7_2_prop_types_default.a.func,
    expandedRowIndent: _prop_types_15_7_2_prop_types_default.a.array,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, expanded_row__temp);
row_ExpandedRow.displayName = 'ExpandedRow';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/selection/row.js





var selection_row__class, selection_row__temp;






/* eslint-disable react/prefer-stateless-function */
var row_SelectionRow = (selection_row__temp = selection_row__class = function (_React$Component) {
    inherits_default()(SelectionRow, _React$Component);

    function SelectionRow() {
        classCallCheck_default()(this, SelectionRow);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    SelectionRow.prototype.render = function render() {
        var _classnames;

        /* eslint-disable no-unused-vars*/
        var _props = this.props,
            className = _props.className,
            record = _props.record,
            primaryKey = _props.primaryKey;
        var selectedRowKeys = this.context.selectedRowKeys;

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {
            selected: selectedRowKeys.indexOf(record[primaryKey]) > -1
        }, _classnames[className] = className, _classnames));
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(row_ExpandedRow, extends_default()({}, this.props, { className: cls }));
    };

    return SelectionRow;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), selection_row__class.propTypes = extends_default()({}, row_ExpandedRow.propTypes), selection_row__class.defaultProps = extends_default()({}, row_ExpandedRow.defaultProps), selection_row__class.contextTypes = {
    selectedRowKeys: _prop_types_15_7_2_prop_types_default.a.array
}, selection_row__temp);
row_SelectionRow.displayName = 'SelectionRow';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/tree/row.js






var tree_row__class, tree_row__temp;






/* eslint-disable react/prefer-stateless-function */
var row_TreeRow = (tree_row__temp = tree_row__class = function (_React$Component) {
    inherits_default()(TreeRow, _React$Component);

    function TreeRow() {
        classCallCheck_default()(this, TreeRow);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    TreeRow.prototype.render = function render() {
        var _classnames;

        /* eslint-disable no-unused-vars*/
        var _props = this.props,
            className = _props.className,
            record = _props.record,
            primaryKey = _props.primaryKey,
            prefix = _props.prefix,
            others = objectWithoutProperties_default()(_props, ['className', 'record', 'primaryKey', 'prefix']);

        var _context = this.context,
            treeStatus = _context.treeStatus,
            openRowKeys = _context.openRowKeys;

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {
            hidden: !(treeStatus.indexOf(record[primaryKey]) > -1) && record.__level !== 0
        }, _classnames[prefix + 'table-row-level-' + record.__level] = true, _classnames.opened = openRowKeys.indexOf(record[primaryKey]) > -1, _classnames[className] = className, _classnames));
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(row_SelectionRow, extends_default()({}, others, { record: record, className: cls, primaryKey: primaryKey, prefix: prefix }));
    };

    return TreeRow;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), tree_row__class.propTypes = extends_default()({}, row_SelectionRow.propTypes), tree_row__class.defaultProps = extends_default()({}, row_SelectionRow.defaultProps), tree_row__class.contextTypes = {
    treeStatus: _prop_types_15_7_2_prop_types_default.a.array,
    openRowKeys: _prop_types_15_7_2_prop_types_default.a.array
}, tree_row__temp);
row_TreeRow.displayName = 'TreeRow';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/tree/cell.js





var tree_cell__class, cell__temp2;







var cell_TreeCell = (cell__temp2 = tree_cell__class = function (_React$Component) {
    inherits_default()(TreeCell, _React$Component);

    function TreeCell() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, TreeCell);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onTreeNodeClick = function (record, e) {
            e.stopPropagation();
            _this.context.onTreeNodeClick(record);
        }, _this.expandedKeydown = function (record, e) {
            e.preventDefault();
            e.stopPropagation();

            if (e.keyCode === KEYCODE.ENTER) {
                _this.onTreeNodeClick(record, e);
            }
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    TreeCell.prototype.render = function render() {
        var _this2 = this;

        var _props = this.props,
            colIndex = _props.colIndex,
            record = _props.record,
            prefix = _props.prefix,
            primaryKey = _props.primaryKey,
            locale = _props.locale;
        var _context = this.context,
            openRowKeys = _context.openTreeRowKeys,
            indent = _context.indent,
            isTree = _context.isTree,
            rowSelection = _context.rowSelection;

        var treeArrowNodeIndex = rowSelection ? 1 : 0;
        var firstCellStyle = void 0,
            treeArrowNode = void 0;
        if (colIndex === treeArrowNodeIndex) {
            var treeArrowType = void 0;
            if (isTree) {
                firstCellStyle = {
                    paddingLeft: indent * (record.__level + 1)
                };
                treeArrowNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { size: 'xs', className: prefix + 'table-tree-placeholder' });
                if (record.children && record.children.length) {
                    var hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;

                    treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';

                    treeArrowNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, {
                        className: prefix + 'table-tree-arrow',
                        type: treeArrowType,
                        size: 'xs',
                        onClick: function onClick(e) {
                            return _this2.onTreeNodeClick(record, e);
                        },
                        onKeyDown: function onKeyDown(e) {
                            return _this2.expandedKeydown(record, e);
                        },
                        role: 'button',
                        tabIndex: '0',
                        'aria-expanded': hasExpanded,
                        'aria-label': hasExpanded ? locale.expanded : locale.folded });
                }
            }
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            cell_Cell,
            extends_default()({}, this.props, { innerStyle: firstCellStyle }),
            treeArrowNode
        );
    };

    return TreeCell;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), tree_cell__class.propTypes = extends_default()({
    indent: _prop_types_15_7_2_prop_types_default.a.number,
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, cell_Cell.propTypes), tree_cell__class.defaultProps = extends_default()({}, cell_Cell.defaultProps, {
    component: 'td',
    indent: 20
}), tree_cell__class.contextTypes = {
    openTreeRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
    indent: _prop_types_15_7_2_prop_types_default.a.number,
    onTreeNodeClick: _prop_types_15_7_2_prop_types_default.a.func,
    isTree: _prop_types_15_7_2_prop_types_default.a.bool,
    rowSelection: _prop_types_15_7_2_prop_types_default.a.object
}, cell__temp2);
cell_TreeCell.displayName = 'TreeCell';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/tree.js











var tree_noop = function noop() {};

function tree(BaseComponent) {
    var _class, _temp;

    var TreeTable = (_temp = _class = function (_React$Component) {
        inherits_default()(TreeTable, _React$Component);

        function TreeTable(props, context) {
            classCallCheck_default()(this, TreeTable);

            var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

            _this.onTreeNodeClick = function (record) {
                var primaryKey = _this.props.primaryKey,
                    id = record[primaryKey],
                    dataSource = _this.ds,
                    openRowKeys = [].concat(_this.state.openRowKeys),
                    index = openRowKeys.indexOf(id),
                    getChildrenKeyById = function getChildrenKeyById(id) {
                    var ret = [id];
                    var loop = function loop(data) {
                        data.forEach(function (item) {
                            ret.push(item[primaryKey]);
                            if (item.children) {
                                loop(item.children);
                            }
                        });
                    };
                    dataSource.forEach(function (item) {
                        if (item[primaryKey] === id) {
                            if (item.children) {
                                loop(item.children);
                            }
                        }
                    });
                    return ret;
                };


                if (index > -1) {
                    // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey
                    var ids = getChildrenKeyById(id);
                    ids.forEach(function (id) {
                        var i = openRowKeys.indexOf(id);
                        if (i > -1) {
                            openRowKeys.splice(i, 1);
                        }
                    });
                } else {
                    openRowKeys.push(id);
                }

                if (!('openRowKeys' in _this.props)) {
                    _this.setState({
                        openRowKeys: openRowKeys
                    });
                }
                _this.props.onRowOpen(openRowKeys, id, index === -1, record);
            };

            _this.state = {
                openRowKeys: props.openRowKeys || []
            };
            return _this;
        }

        TreeTable.prototype.getChildContext = function getChildContext() {
            return {
                openTreeRowKeys: this.state.openRowKeys,
                indent: this.props.indent,
                treeStatus: this.getTreeNodeStatus(this.ds),
                onTreeNodeClick: this.onTreeNodeClick,
                isTree: this.props.isTree
            };
        };

        TreeTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if ('openRowKeys' in nextProps) {
                var openRowKeys = nextProps.openRowKeys;

                this.setState({
                    openRowKeys: openRowKeys
                });
            }
        };

        TreeTable.prototype.normalizeDataSource = function normalizeDataSource(dataSource) {
            var ret = [],
                loop = function loop(dataSource, level) {
                dataSource.forEach(function (item) {
                    item.__level = level;
                    ret.push(item);
                    if (item.children) {
                        loop(item.children, level + 1);
                    }
                });
            };
            loop(dataSource, 0);
            this.ds = ret;
            return ret;
        };

        TreeTable.prototype.getTreeNodeStatus = function getTreeNodeStatus() {
            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var openRowKeys = this.state.openRowKeys,
                primaryKey = this.props.primaryKey,
                ret = [];


            openRowKeys.forEach(function (openKey) {
                dataSource.forEach(function (item) {
                    if (item[primaryKey] === openKey) {
                        if (item.children) {
                            item.children.forEach(function (child) {
                                ret.push(child[primaryKey]);
                            });
                        }
                    }
                });
            });
            return ret;
        };

        TreeTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars, prefer-const */
            var _props = this.props,
                components = _props.components,
                isTree = _props.isTree,
                dataSource = _props.dataSource,
                indent = _props.indent,
                others = objectWithoutProperties_default()(_props, ['components', 'isTree', 'dataSource', 'indent']);

            if (isTree) {
                components = extends_default()({}, components);
                if (!components.Row) {
                    components.Row = row_TreeRow;
                }
                if (!components.Cell) {
                    components.Cell = cell_TreeCell;
                }

                dataSource = this.normalizeDataSource(dataSource);
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { dataSource: dataSource, components: components }));
        };

        return TreeTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.TreeRow = row_TreeRow, _class.TreeCell = cell_TreeCell, _class.propTypes = extends_default()({
        /**
         * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作
         */
        openRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
        /**
         * 点击tree展开或者关闭的时候触发的事件
         * @param {Array} openRowKeys tree模式下展开的key
         * @param {String} currentRowKey 当前点击行的key
         * @param {Boolean} opened 当前点击是展开还是收起
         * @param {Object} currentRecord 当前点击行的记录
         */
        onRowOpen: _prop_types_15_7_2_prop_types_default.a.func,
        /**
         * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中
         */
        primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
        /**
         * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效
         */
        indent: _prop_types_15_7_2_prop_types_default.a.number,
        /**
         * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table
         */
        isTree: _prop_types_15_7_2_prop_types_default.a.bool,
        locale: _prop_types_15_7_2_prop_types_default.a.object
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps, {
        primaryKey: 'id',
        onRowOpen: tree_noop,
        components: {},
        indent: 12
    }), _class.childContextTypes = {
        openTreeRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
        indent: _prop_types_15_7_2_prop_types_default.a.number,
        treeStatus: _prop_types_15_7_2_prop_types_default.a.array,
        onTreeNodeClick: _prop_types_15_7_2_prop_types_default.a.func,
        isTree: _prop_types_15_7_2_prop_types_default.a.bool
    }, _temp);
    TreeTable.displayName = 'TreeTable';

    statics(TreeTable, BaseComponent);
    return TreeTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/fixed/header.js






var fixed_header__class, header__temp;






/* eslint-disable react/prefer-stateless-function */
var header_FixedHeader = (header__temp = fixed_header__class = function (_React$Component) {
    inherits_default()(FixedHeader, _React$Component);

    function FixedHeader() {
        classCallCheck_default()(this, FixedHeader);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    FixedHeader.prototype.componentDidMount = function componentDidMount() {
        this.context.getNode('header', Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this));
    };

    FixedHeader.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            colGroup = _props.colGroup,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'colGroup']);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: className },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'table-header-inner' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'table',
                    null,
                    colGroup,
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(header_Header, extends_default()({}, others, { prefix: prefix }))
                )
            )
        );
    };

    return FixedHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), fixed_header__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.any
}, fixed_header__class.contextTypes = {
    getNode: _prop_types_15_7_2_prop_types_default.a.func,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, header__temp);
header_FixedHeader.displayName = 'FixedHeader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/fixed/body.js






var fixed_body__class, fixed_body__temp2;






/* eslint-disable react/prefer-stateless-function */
var body_FixedBody = (fixed_body__temp2 = fixed_body__class = function (_React$Component) {
    inherits_default()(FixedBody, _React$Component);

    function FixedBody() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, FixedBody);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onBodyScroll = function () {
            var onBodyScroll = _this.context.onBodyScroll;

            onBodyScroll && onBodyScroll();
            _this.props.onScroll();
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    FixedBody.prototype.componentDidMount = function componentDidMount() {
        var getNode = this.context.getNode;

        getNode && getNode('body', Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this));
    };

    FixedBody.prototype.render = function render() {
        var _props = this.props,
            className = _props.className,
            colGroup = _props.colGroup,
            others = objectWithoutProperties_default()(_props, ['className', 'colGroup']);

        var _context = this.context,
            maxBodyHeight = _context.maxBodyHeight,
            fixedHeader = _context.fixedHeader;

        var style = {};
        if (fixedHeader) {
            style.maxHeight = maxBodyHeight;
        }
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { style: style, className: className, onScroll: this.onBodyScroll },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'table',
                null,
                colGroup,
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(body_Body, extends_default()({}, others, { colGroup: colGroup }))
            )
        );
    };

    return FixedBody;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), fixed_body__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.any,
    onScroll: _prop_types_15_7_2_prop_types_default.a.func
}, fixed_body__class.defaultProps = {
    onScroll: function onScroll() {}
}, fixed_body__class.contextTypes = {
    fixedHeader: _prop_types_15_7_2_prop_types_default.a.bool,
    maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    onBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
    getNode: _prop_types_15_7_2_prop_types_default.a.func
}, fixed_body__temp2);
body_FixedBody.displayName = 'FixedBody';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/fixed/wrapper.js




var wrapper__class, wrapper__temp;




/* eslint-disable react/prefer-stateless-function */
var wrapper_FixedWrapper = (wrapper__temp = wrapper__class = function (_React$Component) {
    inherits_default()(FixedWrapper, _React$Component);

    function FixedWrapper() {
        classCallCheck_default()(this, FixedWrapper);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    FixedWrapper.prototype.render = function render() {
        var _props = this.props,
            children = _props.children,
            wrapperContent = _props.wrapperContent,
            prefix = _props.prefix;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'table-inner' },
            children,
            wrapperContent
        );
    };

    return FixedWrapper;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), wrapper__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.any,
    wrapperContent: _prop_types_15_7_2_prop_types_default.a.any
}, wrapper__temp);
wrapper_FixedWrapper.displayName = 'FixedWrapper';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/fixed.js














function fixed_fixed(BaseComponent) {
    var _class, _temp2;

    /** Table */
    var FixedTable = (_temp2 = _class = function (_React$Component) {
        inherits_default()(FixedTable, _React$Component);

        function FixedTable() {
            var _temp, _this, _ret;

            classCallCheck_default()(this, FixedTable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getNode = function (type, node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this['' + type + lockType + 'Node'] = node;
                if (type === 'header' && !lockType) {
                    _this.innerHeaderNode = _this.headerNode.querySelector('div');
                }
            }, _this.onBodyScroll = function () {
                _this.scrollTo(_this.bodyNode.scrollLeft, _this.bodyNode.scrollTop);
            }, _temp), possibleConstructorReturn_default()(_this, _ret);
        }

        FixedTable.prototype.getChildContext = function getChildContext() {
            return {
                fixedHeader: this.props.fixedHeader,
                maxBodyHeight: this.props.maxBodyHeight,
                onBodyScroll: this.onBodyScroll,
                getNode: this.getNode
            };
        };

        FixedTable.prototype.componentDidMount = function componentDidMount() {
            this.adjustFixedHeaderSize();
        };

        FixedTable.prototype.componentDidUpdate = function componentDidUpdate() {
            this.adjustFixedHeaderSize();
        };

        FixedTable.prototype.adjustFixedHeaderSize = function adjustFixedHeaderSize() {
            var _props = this.props,
                hasHeader = _props.hasHeader,
                fixedHeader = _props.fixedHeader,
                maxBodyHeight = _props.maxBodyHeight;

            if (hasHeader && fixedHeader && !this.props.lockType) {
                if (this.bodyNode.scrollHeight <= maxBodyHeight) {
                    dom.setStyle(this.headerNode, 'paddingRight', 0);
                } else {
                    dom.setStyle(this.headerNode, 'paddingRight', dom.scrollbar().width);
                }
            }
        };

        FixedTable.prototype.scrollTo = function scrollTo(x) {
            if (this.innerHeaderNode) {
                this.innerHeaderNode.scrollLeft = x;
            }
        };

        FixedTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars, prefer-const */
            var _props2 = this.props,
                components = _props2.components,
                className = _props2.className,
                prefix = _props2.prefix,
                fixedHeader = _props2.fixedHeader,
                maxBodyHeight = _props2.maxBodyHeight,
                others = objectWithoutProperties_default()(_props2, ['components', 'className', 'prefix', 'fixedHeader', 'maxBodyHeight']);

            if (fixedHeader) {
                var _classnames;

                components = extends_default()({}, components);
                if (!components.Header) {
                    components.Header = header_FixedHeader;
                }
                if (!components.Body) {
                    components.Body = body_FixedBody;
                }
                if (!components.Wrapper) {
                    components.Wrapper = wrapper_FixedWrapper;
                }
                className = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-fixed'] = true, _classnames[className] = className, _classnames));
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { components: components, className: className, prefix: prefix }));
        };

        return FixedTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.FixedHeader = header_FixedHeader, _class.FixedBody = body_FixedBody, _class.FixedWrapper = wrapper_FixedWrapper, _class.propTypes = extends_default()({
        /**
          * 是否具有表头
          */
        hasHeader: _prop_types_15_7_2_prop_types_default.a.bool,
        /**
          * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条
          */
        fixedHeader: _prop_types_15_7_2_prop_types_default.a.bool,
        /**
         * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条
         */
        maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string])
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps, {
        hasHeader: true,
        fixedHeader: false,
        maxBodyHeight: 200,
        components: {},
        refs: {},
        prefix: 'next-'
    }), _class.childContextTypes = {
        fixedHeader: _prop_types_15_7_2_prop_types_default.a.bool,
        maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
        onBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
        getNode: _prop_types_15_7_2_prop_types_default.a.func
    }, _temp2);
    FixedTable.displayName = 'FixedTable';

    statics(FixedTable, BaseComponent);
    return FixedTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/selection.js















var selection_makeChain = func.makeChain;


var unique = function unique(arr) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'this';

    var temp = {},
        ret = [];
    arr.forEach(function (item) {
        var value = void 0;
        if (key === 'this') {
            value = item;
        } else {
            value = item[key];
        }
        if (!temp[value]) {
            ret.push(item);
            temp[value] = true;
        }
    });
    return ret;
};

function selection(BaseComponent) {
    var _class, _temp;

    /** Table */
    var SelectionTable = (_temp = _class = function (_React$Component) {
        inherits_default()(SelectionTable, _React$Component);

        function SelectionTable(props, context) {
            classCallCheck_default()(this, SelectionTable);

            var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

            _this.renderSelectionHeader = function () {
                var onChange = _this.selectAllRow,
                    attrs = {},
                    _this$props = _this.props,
                    rowSelection = _this$props.rowSelection,
                    primaryKey = _this$props.primaryKey,
                    dataSource = _this$props.dataSource,
                    entireDataSource = _this$props.entireDataSource,
                    locale = _this$props.locale,
                    selectedRowKeys = _this.state.selectedRowKeys,
                    mode = rowSelection.mode ? rowSelection.mode : 'multiple';

                var checked = !!selectedRowKeys.length;
                var indeterminate = false;

                var source = entireDataSource || dataSource;

                _this.flatDataSource(source).filter(function (record, index) {
                    if (!rowSelection.getProps) {
                        return true;
                    } else {
                        return !(rowSelection.getProps(record, index) || {}).disabled;
                    }
                }).map(function (record) {
                    return record[primaryKey];
                }).forEach(function (id) {
                    if (selectedRowKeys.indexOf(id) === -1) {
                        checked = false;
                    } else {
                        indeterminate = true;
                    }
                });
                attrs.onClick = selection_makeChain(function (e) {
                    e.stopPropagation();
                }, attrs.onClick);

                if (checked) {
                    indeterminate = false;
                }
                return mode === 'multiple' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_checkbox, extends_default()({ indeterminate: indeterminate, 'aria-label': locale.selectAll, checked: checked, onChange: onChange }, attrs)) : null;
            };

            _this.renderSelectionBody = function (value, index, record) {
                var _this$props2 = _this.props,
                    rowSelection = _this$props2.rowSelection,
                    primaryKey = _this$props2.primaryKey;
                var selectedRowKeys = _this.state.selectedRowKeys;

                var mode = rowSelection.mode ? rowSelection.mode : 'multiple';
                var checked = selectedRowKeys.indexOf(record[primaryKey]) > -1;
                var onChange = _this.selectOneRow.bind(_this, index, record);
                var attrs = rowSelection.getProps ? rowSelection.getProps(record, index) || {} : {};

                attrs.onClick = selection_makeChain(function (e) {
                    e.stopPropagation();
                }, attrs.onClick);
                return mode === 'multiple' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_checkbox, extends_default()({ checked: checked, onChange: onChange }, attrs)) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_radio, extends_default()({ checked: checked, onChange: onChange }, attrs));
            };

            _this.selectAllRow = function (checked, e) {
                var ret = [].concat(_this.state.selectedRowKeys),
                    _this$props3 = _this.props,
                    rowSelection = _this$props3.rowSelection,
                    primaryKey = _this$props3.primaryKey,
                    dataSource = _this$props3.dataSource,
                    entireDataSource = _this$props3.entireDataSource,
                    selectedRowKeys = _this.state.selectedRowKeys,
                    getProps = rowSelection.getProps;

                var attrs = {},
                    records = [];

                var source = entireDataSource ? entireDataSource : dataSource;

                _this.flatDataSource(source).forEach(function (record, index) {
                    var id = record[primaryKey];
                    if (getProps) {
                        attrs = getProps(record, index) || {};
                    }
                    // 反选和全选的时候不要丢弃禁用项的选中状态
                    if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {
                        ret.push(id);
                        records.push(record);
                    } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {
                        ret.push(id);
                        records.push(record);
                    } else {
                        var i = ret.indexOf(id);
                        i > -1 && ret.splice(i, 1);
                    }
                });

                records = unique(records, primaryKey);
                if (typeof rowSelection.onSelectAll === 'function') {
                    rowSelection.onSelectAll(checked, records);
                }
                _this.triggerSelection(rowSelection, unique(ret), records);
                e.stopPropagation();
            };

            _this.state = {
                selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? props.rowSelection.selectedRowKeys || [] : []
            };
            return _this;
        }

        SelectionTable.prototype.getChildContext = function getChildContext() {
            return {
                rowSelection: this.props.rowSelection,
                selectedRowKeys: this.state.selectedRowKeys
            };
        };

        SelectionTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {
                var selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];
                this.setState({
                    selectedRowKeys: selectedRowKeys
                });
            }
        };

        SelectionTable.prototype.normalizeChildren = function normalizeChildren(children) {
            var _props = this.props,
                prefix = _props.prefix,
                rowSelection = _props.rowSelection;

            if (rowSelection) {
                children = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, index) {
                    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                        key: index
                    });
                });
                children.unshift(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(column_Column, { key: 'selection', title: this.renderSelectionHeader.bind(this),
                    cell: this.renderSelectionBody.bind(this),
                    width: 50,
                    className: prefix + 'table-selection', __normalized: true }));
                return children;
            }
            return children;
        };

        SelectionTable.prototype.selectOneRow = function selectOneRow(index, record, checked, e) {
            var selectedRowKeys = [].concat(this.state.selectedRowKeys),
                i = void 0;
            var _props2 = this.props,
                primaryKey = _props2.primaryKey,
                rowSelection = _props2.rowSelection,
                dataSource = _props2.dataSource,
                mode = rowSelection.mode ? rowSelection.mode : 'multiple',
                id = record[primaryKey];

            if (!id) {
                log.warning('Can\'t get value from record using given ' + primaryKey + ' as primaryKey.');
            }
            if (mode === 'multiple') {
                if (checked) {
                    selectedRowKeys.push(id);
                } else {
                    i = selectedRowKeys.indexOf(id);
                    selectedRowKeys.splice(i, 1);
                }
            } else if (checked) {
                selectedRowKeys = [id];
            }
            var records = unique(dataSource.filter(function (item) {
                return selectedRowKeys.indexOf(item[primaryKey]) > -1;
            }), primaryKey);
            if (typeof rowSelection.onSelect === 'function') {
                rowSelection.onSelect(checked, record, records);
            }

            this.triggerSelection(rowSelection, selectedRowKeys, records);

            e.stopPropagation();
        };

        SelectionTable.prototype.triggerSelection = function triggerSelection(rowSelection, selectedRowKeys, records) {
            if (!('selectedRowKeys' in rowSelection)) {
                this.setState({
                    selectedRowKeys: selectedRowKeys
                });
            }
            if (typeof rowSelection.onChange === 'function') {
                rowSelection.onChange(selectedRowKeys, records);
            }
        };

        SelectionTable.prototype.flatDataSource = function flatDataSource(dataSource) {
            var ret = dataSource;
            var listHeader = this.context.listHeader;


            if (listHeader) {
                ret = [];
                var hasChildrenSelection = listHeader.hasChildrenSelection,
                    hasSelection = listHeader.hasSelection;

                dataSource.forEach(function (item) {
                    var children = item.children;
                    // 如果需要渲染selection才将这条记录插入到dataSource
                    // 或者没有孩子节点
                    if (hasSelection) {
                        ret.push(item);
                    }
                    if (children && hasChildrenSelection) {
                        ret = ret.concat(children);
                    }
                });
            }
            return ret;
        };

        SelectionTable.prototype.render = function render() {
            /* eslint-disable prefer-const */
            var _props3 = this.props,
                rowSelection = _props3.rowSelection,
                components = _props3.components,
                children = _props3.children,
                others = objectWithoutProperties_default()(_props3, ['rowSelection', 'components', 'children']);

            if (rowSelection) {
                children = this.normalizeChildren(children);
                components = extends_default()({}, components);
                components.Row = components.Row || row_SelectionRow;
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                BaseComponent,
                extends_default()({}, others, { components: components }),
                children
            );
        };

        return SelectionTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.SelectionRow = row_SelectionRow, _class.propTypes = extends_default()({
        /**
        * 是否启用选择模式
        * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性
        * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。
        * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调
        * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调
        * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值
        * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`
        */
        rowSelection: _prop_types_15_7_2_prop_types_default.a.object,
        primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
        dataSource: _prop_types_15_7_2_prop_types_default.a.array,
        entireDataSource: _prop_types_15_7_2_prop_types_default.a.array
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps, {
        locale: zh_cn.Table,
        primaryKey: 'id',
        prefix: 'next-'
    }), _class.contextTypes = {
        listHeader: _prop_types_15_7_2_prop_types_default.a.any
    }, _class.childContextTypes = {
        rowSelection: _prop_types_15_7_2_prop_types_default.a.object,
        selectedRowKeys: _prop_types_15_7_2_prop_types_default.a.array
    }, _temp);
    SelectionTable.displayName = 'SelectionTable';

    statics(SelectionTable, BaseComponent);
    return SelectionTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/expanded.js














var expanded_noop = function noop() {};

function expanded_expanded(BaseComponent) {
    var _class, _temp2;

    /** Table */
    var ExpandedTable = (_temp2 = _class = function (_React$Component) {
        inherits_default()(ExpandedTable, _React$Component);

        function ExpandedTable() {
            var _temp, _this, _ret;

            classCallCheck_default()(this, ExpandedTable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
                openRowKeys: _this.props.openRowKeys || []
            }, _this.expandedKeydown = function (value, record, index, e) {
                e.preventDefault();
                e.stopPropagation();

                if (e.keyCode === KEYCODE.ENTER) {
                    _this.onExpandedClick(value, record, index, e);
                }
            }, _this.renderExpandedCell = function (value, index, record) {
                var _classnames;

                var _this$props = _this.props,
                    getExpandedColProps = _this$props.getExpandedColProps,
                    prefix = _this$props.prefix,
                    locale = _this$props.locale;
                var openRowKeys = _this.state.openRowKeys,
                    primaryKey = _this.props.primaryKey,
                    hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1,
                    switchNode = hasExpanded ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'minus', size: 'xs' }) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'add', size: 'xs' }),
                    attrs = getExpandedColProps(record, index) || {};

                var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-expanded-ctrl'] = true, _classnames.disabled = attrs.disabled, _classnames[attrs.className] = attrs.className, _classnames));

                if (!attrs.disabled) {
                    attrs.onClick = _this.onExpandedClick.bind(_this, value, record, index);
                }
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    extends_default()({}, attrs, {
                        role: 'button',
                        tabIndex: '0',
                        onKeyDown: _this.expandedKeydown.bind(_this, value, record, index),
                        'aria-label': hasExpanded ? locale.expanded : locale.folded,
                        'aria-expanded': hasExpanded,
                        className: cls }),
                    switchNode
                );
            }, _temp), possibleConstructorReturn_default()(_this, _ret);
        }

        ExpandedTable.prototype.getChildContext = function getChildContext() {
            return {
                openRowKeys: this.state.openRowKeys,
                expandedRowRender: this.props.expandedRowRender,
                expandedRowIndent: this.props.expandedRowIndent
            };
        };

        ExpandedTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            if ('openRowKeys' in nextProps) {
                var openRowKeys = nextProps.openRowKeys;

                this.setState({
                    openRowKeys: openRowKeys
                });
            }
        };

        ExpandedTable.prototype.onExpandedClick = function onExpandedClick(value, record, i, e) {
            var openRowKeys = [].concat(this.state.openRowKeys),
                primaryKey = this.props.primaryKey,
                id = record[primaryKey],
                index = openRowKeys.indexOf(id);

            if (index > -1) {
                openRowKeys.splice(index, 1);
            } else {
                openRowKeys.push(id);
            }
            if (!('openRowKeys' in this.props)) {
                this.setState({
                    openRowKeys: openRowKeys
                });
            }
            this.props.onRowOpen(openRowKeys, id, index === -1, record);
            e.stopPropagation();
        };

        ExpandedTable.prototype.normalizeChildren = function normalizeChildren(children) {
            var toArrayChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, index) {
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                    key: index
                });
            });
            var prefix = this.props.prefix;

            toArrayChildren.unshift(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(column_Column, { title: '', key: 'expanded', cell: this.renderExpandedCell.bind(this), width: 50, className: prefix + 'table-expanded', __normalized: true }));
            return toArrayChildren;
        };

        ExpandedTable.prototype.normalizeDataSource = function normalizeDataSource(ds) {
            var ret = [];
            ds.forEach(function (item) {
                var itemCopy = extends_default()({}, item);
                itemCopy.__expanded = true;
                ret.push(item, itemCopy);
            });
            return ret;
        };

        ExpandedTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars, prefer-const */
            var _props = this.props,
                components = _props.components,
                openRowKeys = _props.openRowKeys,
                expandedRowRender = _props.expandedRowRender,
                hasExpandedRowCtrl = _props.hasExpandedRowCtrl,
                children = _props.children,
                dataSource = _props.dataSource,
                getExpandedColProps = _props.getExpandedColProps,
                expandedRowIndent = _props.expandedRowIndent,
                onRowOpen = _props.onRowOpen,
                onExpandedRowClick = _props.onExpandedRowClick,
                others = objectWithoutProperties_default()(_props, ['components', 'openRowKeys', 'expandedRowRender', 'hasExpandedRowCtrl', 'children', 'dataSource', 'getExpandedColProps', 'expandedRowIndent', 'onRowOpen', 'onExpandedRowClick']);

            if (expandedRowRender && !components.Row) {
                components = extends_default()({}, components);
                components.Row = row_ExpandedRow;
                dataSource = this.normalizeDataSource(dataSource);
            }
            if (expandedRowRender && hasExpandedRowCtrl) {
                children = this.normalizeChildren(children);
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                BaseComponent,
                extends_default()({}, others, { dataSource: dataSource, components: components }),
                children
            );
        };

        return ExpandedTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.ExpandedRow = row_ExpandedRow, _class.propTypes = extends_default()({
        /**
         * 额外渲染行的渲染函数
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @returns {Element}
         */
        expandedRowRender: _prop_types_15_7_2_prop_types_default.a.func,
        /**
         * 额外渲染行的缩进
         */
        expandedRowIndent: _prop_types_15_7_2_prop_types_default.a.array,
        /**
         * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态
         */
        openRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
        /**
         * 是否显示点击展开额外渲染行的+号按钮
         */
        hasExpandedRowCtrl: _prop_types_15_7_2_prop_types_default.a.bool,
        /**
         * 设置额外渲染行的属性
         */
        getExpandedColProps: _prop_types_15_7_2_prop_types_default.a.func,
        /**
         * 在额外渲染行或者Tree展开或者收起的时候触发的事件
         * @param {Array} openRowKeys 展开的渲染行的key
         * @param {String} currentRowKey 当前点击的渲染行的key
         * @param {Boolean} expanded 当前点击是展开还是收起
         * @param {Object} currentRecord 当前点击额外渲染行的记录
         */
        onRowOpen: _prop_types_15_7_2_prop_types_default.a.func,
        /**
         * 点击额外渲染行触发的事件
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @param {Event} e DOM事件对象
         */
        onExpandedRowClick: _prop_types_15_7_2_prop_types_default.a.func,
        locale: _prop_types_15_7_2_prop_types_default.a.object
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps, {
        getExpandedColProps: expanded_noop,
        onRowOpen: expanded_noop,
        hasExpandedRowCtrl: true,
        components: {},
        expandedRowIndent: [1, 0],
        prefix: 'next-'
    }), _class.childContextTypes = {
        openRowKeys: _prop_types_15_7_2_prop_types_default.a.array,
        expandedRowRender: _prop_types_15_7_2_prop_types_default.a.func,
        expandedRowIndent: _prop_types_15_7_2_prop_types_default.a.array
    }, _temp2);
    ExpandedTable.displayName = 'ExpandedTable';

    statics(ExpandedTable, BaseComponent);
    return ExpandedTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/virtual/body.js






var virtual_body__class, virtual_body__temp2;






/* eslint-disable react/prefer-stateless-function */
var body_VirtualBody = (virtual_body__temp2 = virtual_body__class = function (_React$Component) {
    inherits_default()(VirtualBody, _React$Component);

    function VirtualBody() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, VirtualBody);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.tableRef = function (table) {
            _this.tableNode = table;
        }, _this.virtualScrollRef = function (virtualScroll) {
            _this.virtualScrollNode = virtualScroll;
        }, _this.onScroll = function () {
            // for fixed
            _this.context.onBodyScroll();
            // for lock
            _this.context.onLockBodyScroll();
            // for virtual
            _this.context.onVirtualScroll();
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    VirtualBody.prototype.componentDidMount = function componentDidMount() {
        var bodyNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
        // // for fixed
        this.context.getNode('body', bodyNode);
        // for virtual
        this.context.getBodyNode(bodyNode, this.context.lockType);
        // for lock
        this.context.getLockNode('body', bodyNode, this.context.lockType);
    };

    VirtualBody.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            colGroup = _props.colGroup,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'colGroup']);

        var _context = this.context,
            maxBodyHeight = _context.maxBodyHeight,
            bodyHeight = _context.bodyHeight,
            innerTop = _context.innerTop;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { style: { maxHeight: maxBodyHeight }, className: className, onScroll: this.onScroll },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { style: { height: bodyHeight, overflow: 'hidden', position: 'relative' }, ref: this.virtualScrollRef },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { style: { height: '100%', position: 'relative', transform: 'translateY(' + innerTop + 'px)' } },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'table',
                        { ref: this.tableRef },
                        colGroup,
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(body_Body, extends_default()({}, others, { prefix: prefix }))
                    )
                )
            )
        );
    };

    return VirtualBody;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), virtual_body__class.propTypes = {
    children: _prop_types_15_7_2_prop_types_default.a.any,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    colGroup: _prop_types_15_7_2_prop_types_default.a.any
}, virtual_body__class.contextTypes = {
    maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
    onBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
    onVirtualScroll: _prop_types_15_7_2_prop_types_default.a.func,
    onLockBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
    bodyHeight: _prop_types_15_7_2_prop_types_default.a.number,
    innerTop: _prop_types_15_7_2_prop_types_default.a.number,
    getNode: _prop_types_15_7_2_prop_types_default.a.func,
    getBodyNode: _prop_types_15_7_2_prop_types_default.a.func,
    getLockNode: _prop_types_15_7_2_prop_types_default.a.func,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, virtual_body__temp2);
body_VirtualBody.displayName = 'VirtualBody';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/virtual.js












var virtual_noop = function noop() {};
function virtual(BaseComponent) {
    var _class, _temp2;

    var VirtualTable = (_temp2 = _class = function (_React$Component) {
        inherits_default()(VirtualTable, _React$Component);

        function VirtualTable() {
            var _temp, _this, _ret;

            classCallCheck_default()(this, VirtualTable);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
                rowHeight: _this.props.rowHeight,
                scrollToRow: _this.props.scrollToRow,
                height: _this.props.maxBodyHeight
            }, _this.onScroll = function () {
                // 避免横向滚动带来的性能问题
                var scrollTop = _this.bodyNode.scrollTop;
                if (scrollTop === _this.lastScrollTop) {
                    return;
                }
                var start = _this.computeScrollToRow(scrollTop);
                if (!('scrollToRow' in _this.props)) {
                    _this.setState({
                        scrollToRow: start
                    });
                }
                _this.props.onBodyScroll(start);
                _this.lastScrollTop = scrollTop;
            }, _this.getBodyNode = function (node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this['body' + lockType + 'Node'] = node;
            }, _this.getTableInstance = function (type, instance) {
                type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
                _this['table' + type + 'Inc'] = instance;
            }, _temp), possibleConstructorReturn_default()(_this, _ret);
        }

        VirtualTable.prototype.getChildContext = function getChildContext() {
            return {
                onVirtualScroll: this.onScroll,
                bodyHeight: this.computeBodyHeight(),
                innerTop: this.computeInnerTop(),
                getBodyNode: this.getBodyNode,
                getTableInstanceForVirtual: this.getTableInstance,
                rowSelection: this.rowSelection
            };
        };

        VirtualTable.prototype.componentWillMount = function componentWillMount() {
            var _props = this.props,
                useVirtual = _props.useVirtual,
                dataSource = _props.dataSource;


            this.hasVirtualData = useVirtual && dataSource && dataSource.length > 0;
        };

        VirtualTable.prototype.componentDidMount = function componentDidMount() {

            if (this.hasVirtualData) {
                this.lastScrollTop = this.bodyNode.scrollTop;
            }

            this.adjustScrollTop();
            this.adjustSize();
            this.reComputeSize();
        };

        VirtualTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
            var useVirtual = nextProps.useVirtual,
                dataSource = nextProps.dataSource;


            this.hasVirtualData = useVirtual && dataSource && dataSource.length > 0;

            if ('maxBodyHeight' in nextProps) {
                if (this.state.height !== nextProps.maxBodyHeight) {
                    this.setState({
                        height: nextProps.maxBodyHeight
                    });
                }
            }

            if ('scrollToRow' in nextProps) {
                this.setState({
                    scrollToRow: nextProps.scrollToRow
                });
            }

            if (this.state.rowHeight && 'rowHeight' in nextProps) {
                var row = this.getRowNode();
                var rowClientHeight = row && row.clientHeight;
                if (rowClientHeight && rowClientHeight !== this.state.rowHeight) {
                    this.setState({
                        rowHeight: rowClientHeight
                    });
                }
            }
        };

        VirtualTable.prototype.componentDidUpdate = function componentDidUpdate() {
            this.adjustScrollTop();
            this.adjustSize();
            this.reComputeSize();
        };

        VirtualTable.prototype.reComputeSize = function reComputeSize() {
            var rowHeight = this.state.rowHeight;

            if (typeof rowHeight === 'function' && this.hasVirtualData) {
                var row = this.getRowNode();
                var rowClientHeight = row && row.clientHeight;
                if (rowClientHeight !== this.state.rowHeight) {
                    this.setState({
                        rowHeight: rowClientHeight
                    });
                }
            }
        };

        VirtualTable.prototype.computeBodyHeight = function computeBodyHeight() {
            var rowHeight = this.state.rowHeight;
            var dataSource = this.props.dataSource;

            if (typeof rowHeight === 'function') {
                return 0;
            }
            return dataSource.length * rowHeight;
        };

        VirtualTable.prototype.computeInnerTop = function computeInnerTop() {
            var rowHeight = this.state.rowHeight;

            if (typeof rowHeight === 'function') {
                return 0;
            }
            return this.start * rowHeight;
        };

        VirtualTable.prototype.getVisibleRange = function getVisibleRange(ExpectStart) {
            var _state = this.state,
                height = _state.height,
                rowHeight = _state.rowHeight;

            var len = this.props.dataSource.length;

            var end = void 0,
                visibleCount = 0;
            var start = 0;
            if (typeof rowHeight === 'function') {
                // try get cell height;
                end = 1;
            } else {
                visibleCount = parseInt(height / rowHeight, 10);

                if ('number' === typeof ExpectStart) {
                    start = ExpectStart < len ? ExpectStart : 0;
                }

                end = Math.min(+start + 1 + visibleCount + 10, len);
            }
            this.end = end;
            this.visibleCount = visibleCount;
            return {
                start: start,
                end: end
            };
        };

        VirtualTable.prototype.adjustScrollTop = function adjustScrollTop() {
            if (this.hasVirtualData) {
                this.bodyNode.scrollTop = this.lastScrollTop % this.state.rowHeight + this.state.rowHeight * this.state.scrollToRow;
            }
        };

        VirtualTable.prototype.adjustSize = function adjustSize() {
            if (this.hasVirtualData) {
                var body = this.bodyNode;
                var virtualScrollNode = body.querySelector('div');
                var clientHeight = body.clientHeight,
                    clientWidth = body.clientWidth;


                var tableInc = this.tableInc;
                var tableNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(tableInc);
                var prefix = this.props.prefix;

                var headerNode = tableNode.querySelector('.' + prefix + 'table-header table');
                var headerClientWidth = headerNode && headerNode.clientWidth;

                if (clientWidth < headerClientWidth) {
                    dom.setStyle(virtualScrollNode, 'min-width', headerClientWidth);
                    var leftNode = this.bodyLeftNode;
                    var rightNode = this.bodyRightNode;
                    leftNode && dom.setStyle(leftNode, 'max-height', clientHeight);
                    rightNode && dom.setStyle(rightNode, 'max-height', clientHeight);
                    this.hasScrollbar = true;
                } else {
                    this.hasScrollbar = false;
                }
            }
        };

        VirtualTable.prototype.computeScrollToRow = function computeScrollToRow(offset) {
            var rowHeight = this.state.rowHeight;

            var start = parseInt(offset / rowHeight);
            this.start = start;
            return start;
        };

        VirtualTable.prototype.getRowNode = function getRowNode() {
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of this.tableInc when dataSource Changed
                // use try catch for temporary
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.tableInc.getRowRef(0));
            } catch (error) {
                return null;
            }
        };

        VirtualTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars, prefer-const */
            var _props2 = this.props,
                useVirtual = _props2.useVirtual,
                components = _props2.components,
                dataSource = _props2.dataSource,
                fixedHeader = _props2.fixedHeader,
                rowHeight = _props2.rowHeight,
                scrollToRow = _props2.scrollToRow,
                onBodyScroll = _props2.onBodyScroll,
                others = objectWithoutProperties_default()(_props2, ['useVirtual', 'components', 'dataSource', 'fixedHeader', 'rowHeight', 'scrollToRow', 'onBodyScroll']);

            var entireDataSource = dataSource;

            this.rowSelection = this.props.rowSelection;
            if (this.hasVirtualData) {
                components = extends_default()({}, components);

                var _getVisibleRange = this.getVisibleRange(this.state.scrollToRow),
                    start = _getVisibleRange.start,
                    end = _getVisibleRange.end;

                dataSource = dataSource.slice(start, end);

                if (!components.Body) {
                    components.Body = body_VirtualBody;
                }
                fixedHeader = true;
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { dataSource: dataSource, entireDataSource: entireDataSource, components: components, fixedHeader: fixedHeader }));
        };

        return VirtualTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.VirtualBody = body_VirtualBody, _class.propTypes = extends_default()({
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: _prop_types_15_7_2_prop_types_default.a.bool,
        /**
         * 设置行高
         */
        rowHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.func]),
        maxBodyHeight: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.number, _prop_types_15_7_2_prop_types_default.a.string]),
        primaryKey: _prop_types_15_7_2_prop_types_default.a.string,
        dataSource: _prop_types_15_7_2_prop_types_default.a.array,
        /**
         * 在内容区域滚动的时候触发的函数
         */
        onBodyScroll: _prop_types_15_7_2_prop_types_default.a.func
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps, {
        primaryKey: 'id',
        rowHeight: virtual_noop,
        maxBodyHeight: 200,
        components: {},
        prefix: 'next-',
        onBodyScroll: virtual_noop
    }), _class.childContextTypes = {
        onVirtualScroll: _prop_types_15_7_2_prop_types_default.a.func,
        bodyHeight: _prop_types_15_7_2_prop_types_default.a.number,
        innerTop: _prop_types_15_7_2_prop_types_default.a.number,
        getBodyNode: _prop_types_15_7_2_prop_types_default.a.func,
        getTableInstanceForVirtual: _prop_types_15_7_2_prop_types_default.a.func,
        rowSelection: _prop_types_15_7_2_prop_types_default.a.object
    }, _temp2);
    VirtualTable.displayName = 'VirtualTable';

    statics(VirtualTable, BaseComponent);
    return VirtualTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/lock/body.js





var lock_body__class, lock_body__temp2;






/* eslint-disable react/prefer-stateless-function */
var body_LockBody = (lock_body__temp2 = lock_body__class = function (_React$Component) {
    inherits_default()(LockBody, _React$Component);

    function LockBody() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, LockBody);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onBodyScroll = function () {
            _this.context.onLockBodyScroll();
        }, _this.onBodyWheel = function (e) {
            _this.context.onLockBodyWheel(e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    LockBody.prototype.componentDidMount = function componentDidMount() {
        this.context.getLockNode('body', Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this), this.context.lockType);
    };

    LockBody.prototype.render = function render() {
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(body_FixedBody, extends_default()({}, this.props, { onScroll: this.onBodyScroll, onWheel: this.onBodyWheel }));
    };

    return LockBody;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), lock_body__class.propTypes = extends_default()({}, body_FixedBody.propTypes), lock_body__class.contextTypes = extends_default()({}, body_FixedBody.contextTypes, {
    getLockNode: _prop_types_15_7_2_prop_types_default.a.func,
    onLockBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
    onLockBodyWheel: _prop_types_15_7_2_prop_types_default.a.func,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}), lock_body__temp2);
body_LockBody.displayName = 'LockBody';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/lock/header.js





var lock_header__class, lock_header__temp;





var header_LockHeader = (lock_header__temp = lock_header__class = function (_FixedHeader) {
    inherits_default()(LockHeader, _FixedHeader);

    function LockHeader() {
        classCallCheck_default()(this, LockHeader);

        return possibleConstructorReturn_default()(this, _FixedHeader.apply(this, arguments));
    }

    LockHeader.prototype.componentDidMount = function componentDidMount() {
        var _context = this.context,
            getNode = _context.getNode,
            getLockNode = _context.getLockNode;

        getNode && getNode('header', Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this), this.context.lockType);
        getLockNode && getLockNode('header', Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this), this.context.lockType);
    };

    return LockHeader;
}(header_FixedHeader), lock_header__class.propTypes = extends_default()({}, header_FixedHeader.propTypes), lock_header__class.contextTypes = extends_default()({}, header_FixedHeader.contextTypes, {
    getLockNode: _prop_types_15_7_2_prop_types_default.a.func,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}), lock_header__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/lock.js

















function lock_lock(BaseComponent) {
    var _class, _temp;

    /** Table */
    var LockTable = (_temp = _class = function (_React$Component) {
        inherits_default()(LockTable, _React$Component);

        function LockTable(props, context) {
            classCallCheck_default()(this, LockTable);

            var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props, context));

            _this.getTableInstance = function (type, instance) {
                type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
                _this['table' + type + 'Inc'] = instance;
            };

            _this.getNode = function (type, node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this['' + type + lockType + 'Node'] = node;
                if (type === 'header' && !_this.innerHeaderNode && !lockType) {
                    _this.innerHeaderNode = _this.headerNode.querySelector('div');
                }
            };

            _this.onRowMouseEnter = function (record, index) {
                if (_this.isLock()) {
                    var row = _this.getRowNode(index);
                    var leftRow = _this.getRowNode(index, 'left');
                    var rightRow = _this.getRowNode(index, 'right');
                    [row, leftRow, rightRow].forEach(function (row) {
                        row && dom.addClass(row, 'hovered');
                    });
                }
            };

            _this.onRowMouseLeave = function (record, index) {
                if (_this.isLock()) {
                    var row = _this.getRowNode(index);
                    var leftRow = _this.getRowNode(index, 'left');
                    var rightRow = _this.getRowNode(index, 'right');
                    [row, leftRow, rightRow].forEach(function (row) {
                        row && dom.removeClass(row, 'hovered');
                    });
                }
            };

            _this.onLockBodyWheel = function (e) {
                var y = e.deltaY;
                var x = e.deltaX;
                var thresholdX = 15;
                var safeScrollX = x > -thresholdX && x < thresholdX;
                if (_this.isLock()) {
                    var lockRightBody = _this.bodyRightNode,
                        lockLeftBody = _this.bodyLeftNode,
                        scrollNode = _this.bodyNode,
                        scrollTop = scrollNode.scrollTop,
                        clientHeight = scrollNode.clientHeight,
                        scrollHeight = scrollNode.scrollHeight;


                    if (lockLeftBody) {
                        lockLeftBody.scrollTop = y;
                    }
                    if (lockRightBody) {
                        lockRightBody.scrollTop = y;
                    }
                    scrollNode.scrollTop = scrollTop + y;
                    var newScrollTop = scrollNode.scrollTop;

                    if (newScrollTop + clientHeight < scrollHeight && newScrollTop && safeScrollX) {
                        e.preventDefault();
                    }
                }
            };

            _this.onLockBodyScroll = function () {
                if (_this.isLock()) {
                    var lockRightBody = _this.bodyRightNode,
                        lockLeftBody = _this.bodyLeftNode,
                        lockRightTable = _this.getWrapperNode('right'),
                        lockLeftTable = _this.getWrapperNode('left'),
                        shadowClassName = 'shadow';

                    var x = _this.bodyNode.scrollLeft,
                        y = _this.bodyNode.scrollTop;

                    if (lockLeftBody) {
                        lockLeftBody.scrollTop = y;
                    }
                    if (lockRightBody) {
                        lockRightBody.scrollTop = y;
                    }
                    if (x === 0) {
                        lockLeftTable && dom.removeClass(lockLeftTable, shadowClassName);
                        lockRightTable && dom.addClass(lockRightTable, shadowClassName);
                    } else if (x === _this.bodyNode.scrollWidth - _this.bodyNode.clientWidth) {
                        lockLeftTable && dom.addClass(lockLeftTable, shadowClassName);
                        lockRightTable && dom.removeClass(lockRightTable, shadowClassName);
                    } else {
                        lockLeftTable && dom.addClass(lockLeftTable, shadowClassName);
                        lockRightTable && dom.addClass(lockRightTable, shadowClassName);
                    }
                }
            };

            _this.lockLeftChildren = [];
            _this.lockRightChildren = [];
            return _this;
        }

        LockTable.prototype.getChildContext = function getChildContext() {
            return {
                getTableInstance: this.getTableInstance,
                getLockNode: this.getNode,
                onLockBodyWheel: this.onLockBodyWheel,
                onLockBodyScroll: this.onLockBodyScroll,
                onRowMouseEnter: this.onRowMouseEnter,
                onRowMouseLeave: this.onRowMouseLeave
            };
        };

        LockTable.prototype.componentDidMount = function componentDidMount() {
            this.adjustSize = this.adjustSize.bind(this);

            this.adjustSize();
            this.scroll();

            util_events.on(window, 'resize', this.adjustSize);
        };

        LockTable.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {
            if (nextProps.pure) {
                var isEqual = _shallow_element_equals_1_0_1_shallow_element_equals_default()(nextProps, this.props);
                return !(isEqual && util_obj.shallowEqual(nextContext, this.context));
            }

            return true;
        };

        LockTable.prototype.componentWillUpdate = function componentWillUpdate() {
            this._isLock = false;
        };

        LockTable.prototype.componentDidUpdate = function componentDidUpdate() {
            this.adjustSize();
        };

        LockTable.prototype.componentWillUnmount = function componentWillUnmount() {
            util_events.off(window, 'resize', this.adjustSize);
        };

        LockTable.prototype.normalizeChildrenState = function normalizeChildrenState(props) {
            var children = props.children;

            children = this.normalizeChildren(children);
            var splitChildren = this.splitFromNormalizeChildren(children);
            var lockLeftChildren = splitChildren.lockLeftChildren,
                lockRightChildren = splitChildren.lockRightChildren;

            return {
                lockLeftChildren: lockLeftChildren,
                lockRightChildren: lockRightChildren,
                children: this.mergeFromSplitLockChildren(splitChildren)
            };
        };

        // 将React结构化数据提取props转换成数组


        LockTable.prototype.normalizeChildren = function normalizeChildren(children) {
            var isLock = false;
            var getChildren = function getChildren(children) {
                var ret = [];
                external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (child) {
                    if (child) {
                        var props = extends_default()({}, child.props);
                        if ([true, 'left', 'right'].indexOf(props.lock) > -1) {
                            isLock = true;
                            if (!('width' in props)) {
                                log.warning('Should config width for lock column named [ ' + props.dataIndex + ' ].');
                            }
                        }
                        ret.push(props);
                        if (child.props.children) {
                            props.children = getChildren(child.props.children);
                        }
                    }
                });
                return ret;
            };
            var ret = getChildren(children);
            ret.forEach(function (child) {
                // 为自定义的列特殊处理
                if (child.__normalized && isLock) {
                    child.lock = 'left';
                    delete child.__normalized;
                }
            });
            this._isLock = isLock;
            return ret;
        };

        //从数组中分离出lock的列和正常的列


        LockTable.prototype.splitFromNormalizeChildren = function splitFromNormalizeChildren(children) {
            var originChildren = deepCopy(children);
            var lockLeftChildren = deepCopy(children);
            var lockRightChildren = deepCopy(children);
            var loop = function loop(lockChildren, condition) {
                var ret = [];
                lockChildren.forEach(function (child) {
                    if (child.children) {
                        var res = loop(child.children, condition);
                        if (!res.length) {
                            ret.push(child);
                        }
                    } else {
                        var order = condition(child);
                        if (!order) {
                            ret.push(child);
                        }
                    }
                });
                ret.forEach(function (res) {
                    var index = lockChildren.indexOf(res);
                    lockChildren.splice(index, 1);
                });
                return lockChildren;
            };
            loop(lockLeftChildren, function (child) {
                if (child.lock === true || child.lock === 'left') {
                    return 'left';
                }
            });
            loop(lockRightChildren, function (child) {
                if (child.lock === 'right') {
                    return 'right';
                }
            });
            loop(originChildren, function (child) {
                return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';
            });
            return {
                lockLeftChildren: lockLeftChildren,
                lockRightChildren: lockRightChildren,
                originChildren: originChildren
            };
        };

        //将左侧的锁列树和中间的普通树及右侧的锁列树进行合并


        LockTable.prototype.mergeFromSplitLockChildren = function mergeFromSplitLockChildren(splitChildren) {
            var lockLeftChildren = splitChildren.lockLeftChildren,
                lockRightChildren = splitChildren.lockRightChildren;
            var originChildren = splitChildren.originChildren;

            Array.prototype.unshift.apply(originChildren, lockLeftChildren);
            originChildren = originChildren.concat(lockRightChildren);
            return originChildren;
        };

        LockTable.prototype.scroll = function scroll() {
            var _props = this.props,
                _props$scrollToCol = _props.scrollToCol,
                scrollToCol = _props$scrollToCol === undefined ? 0 : _props$scrollToCol,
                _props$scrollToRow = _props.scrollToRow,
                scrollToRow = _props$scrollToRow === undefined ? 0 : _props$scrollToRow;

            if (!scrollToCol && !scrollToRow) {
                return;
            }
            var colCellNode = this.getCellNode(0, scrollToCol);
            var rowCellNode = this.getCellNode(scrollToRow, 0);
            var bodyNodeOffset = this.bodyNode.getBoundingClientRect();
            if (colCellNode) {
                var cellNodeoffset = colCellNode.getBoundingClientRect();
                var scrollLeft = cellNodeoffset.left - bodyNodeOffset.left;
                this.bodyNode.scrollLeft = scrollLeft;
            }
            if (rowCellNode) {
                var _cellNodeoffset = rowCellNode.getBoundingClientRect();
                var scrollTop = _cellNodeoffset.top - bodyNodeOffset.top;
                this.bodyNode.scrollTop = scrollTop;
            }
        };

        // Table处理过后真实的lock状态
        LockTable.prototype.isLock = function isLock() {
            return this.lockLeftChildren.length || this.lockRightChildren.length;
        };

        // 用户设置的lock状态


        LockTable.prototype.isOriginLock = function isOriginLock() {
            return this._isLock;
        };

        LockTable.prototype.adjustSize = function adjustSize() {
            if (!this.adjustIfTableNotNeedLock()) {
                this.adjustHeaderSize();
                this.adjustBodySize();
                this.adjustCellSize();
                this.onLockBodyScroll();
            }
        };

        LockTable.prototype.adjustIfTableNotNeedLock = function adjustIfTableNotNeedLock() {
            var _this2 = this;

            if (this.isOriginLock() && this.tableInc.props.dataSource.length) {
                var configWidths = this.tableInc.flatChildren.map(function (item, index) {
                    var row = _this2.getCellNode(0, index);
                    return row && row.clientWidth || 0;
                }).reduce(function (a, b) {
                    return a + b;
                }, 0);

                var node = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
                var width = node.clientWidth;
                var lockLeftLen = this.lockLeftChildren.length;
                var lockRightLen = this.lockRightChildren.length;

                if (configWidths <= width && configWidths > 0) {
                    if (lockLeftLen) {
                        this._notNeedAdjustLockLeft = true;
                    }
                    if (lockRightLen) {
                        this._notNeedAdjustLockRight = true;
                    }
                    if (lockRightLen || lockLeftLen) {
                        this.forceUpdate();
                        return true;
                    }
                } else if (this._notNeedAdjustLockLeft || this._notNeedAdjustLockRight) {
                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;
                    this.forceUpdate();
                } else {
                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;
                    return false;
                }
            }

            return false;
        };

        LockTable.prototype.adjustBodySize = function adjustBodySize() {
            if (this.isLock()) {
                var body = this.bodyNode,
                    lockLeftBody = this.bodyLeftNode,
                    lockRightBody = this.bodyRightNode,
                    lockRightBodyWrapper = this.getWrapperNode('right'),
                    scrollbar = dom.scrollbar(),
                    bodyHeight = body.offsetHeight,
                    hasHozScroll = body.scrollWidth > body.clientWidth,
                    hasVerScroll = body.scrollHeight > body.clientHeight,
                    width = hasVerScroll ? scrollbar.width : 0,
                    lockBodyHeight = bodyHeight - (hasHozScroll ? scrollbar.height : 0);

                lockLeftBody && dom.setStyle(lockLeftBody, 'max-height', lockBodyHeight);
                lockRightBody && dom.setStyle(lockRightBody, 'max-height', lockBodyHeight);
                lockRightBodyWrapper && dom.setStyle(lockRightBodyWrapper, 'right', width);
            }
        };

        LockTable.prototype.adjustHeaderSize = function adjustHeaderSize() {
            var _this3 = this;

            if (this.isLock()) {
                this.tableInc.groupChildren.forEach(function (child, index) {
                    var lastIndex = _this3.tableInc.groupChildren[index].length - 1;
                    var headerRightRow = _this3.getHeaderCellNode(index, lastIndex),
                        headerLeftRow = _this3.getHeaderCellNode(index, 0),
                        headerRightLockRow = _this3.getHeaderCellNode(index, 0, 'right'),
                        headerLeftLockRow = _this3.getHeaderCellNode(index, 0, 'left');

                    if (headerRightRow && headerRightLockRow) {
                        var maxRightRowHeight = headerRightRow.offsetHeight;

                        dom.setStyle(headerRightLockRow, 'height', maxRightRowHeight);

                        setTimeout(function () {
                            _this3.tableRightInc.affixRef && _this3.tableRightInc.affixRef.getInstance().updatePosition();
                        });
                    }

                    if (headerLeftRow && headerLeftLockRow) {
                        var maxLeftRowHeight = headerLeftRow.offsetHeight;

                        dom.setStyle(headerLeftLockRow, 'height', maxLeftRowHeight);

                        setTimeout(function () {
                            _this3.tableLeftInc.affixRef && _this3.tableLeftInc.affixRef.getInstance().updatePosition();
                        });
                    }
                });
            }
        };

        LockTable.prototype.adjustCellSize = function adjustCellSize() {
            var _this4 = this;

            if (this.isLock()) {
                this.tableInc.props.dataSource.forEach(function (item, index) {
                    var lockLeftRow = _this4.getCellNode(index, 0, 'left'),
                        lockRightRow = _this4.getCellNode(index, 0, 'right'),
                        row = _this4.getFirstNormalCellNode(index),
                        rowHeight = row && parseFloat(getComputedStyle(row).height) || 0;
                    var lockLeftHeight = 0,
                        lockRightHeight = 0;

                    if (lockLeftRow) {
                        lockLeftHeight = lockLeftRow.offsetHeight;
                    }
                    if (lockRightRow) {
                        lockRightHeight = lockRightRow.offsetHeight;
                    }
                    if (lockLeftRow && rowHeight !== lockLeftHeight) {
                        dom.setStyle(lockLeftRow, 'height', rowHeight);
                    }
                    if (lockRightRow && rowHeight !== lockRightHeight) {
                        dom.setStyle(lockRightRow, 'height', rowHeight);
                    }
                });
            }
        };

        LockTable.prototype.getWrapperNode = function getWrapperNode(type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.refs['lock' + type]);
            } catch (error) {
                return null;
            }
        };

        LockTable.prototype.getFirstNormalCellNode = function getFirstNormalCellNode(index) {
            var i = 0;
            var row = void 0;
            do {
                row = this.getCellNode(index, i);
                i++;
            } while ((!row || row && row.rowSpan && row.rowSpan > 1) && this.tableInc.flatChildren.length > i);

            return row;
        };

        LockTable.prototype.getRowNode = function getRowNode(index, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this['table' + type + 'Inc'];

            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(table.getRowRef(index));
            } catch (error) {
                return null;
            }
        };

        LockTable.prototype.getHeaderCellNode = function getHeaderCellNode(index, i, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this['table' + type + 'Inc'];

            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(table.getHeaderCellRef(index, i));
            } catch (error) {
                return null;
            }
        };

        LockTable.prototype.getCellNode = function getCellNode(index, i, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this['table' + type + 'Inc'];

            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(table.getCellRef(index, i));
            } catch (error) {
                return null;
            }
        };

        LockTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars, prefer-const */
            var _props2 = this.props,
                children = _props2.children,
                prefix = _props2.prefix,
                components = _props2.components,
                className = _props2.className,
                others = objectWithoutProperties_default()(_props2, ['children', 'prefix', 'components', 'className']);

            var _normalizeChildrenSta = this.normalizeChildrenState(this.props),
                lockLeftChildren = _normalizeChildrenSta.lockLeftChildren,
                lockRightChildren = _normalizeChildrenSta.lockRightChildren,
                normalizedChildren = _normalizeChildrenSta.children;

            if (this._notNeedAdjustLockLeft) {
                lockLeftChildren = [];
            }
            if (this._notNeedAdjustLockRight) {
                lockRightChildren = [];
            }
            this.lockLeftChildren = lockLeftChildren;
            this.lockRightChildren = lockRightChildren;

            if (this.isOriginLock()) {
                var _classnames;

                components = extends_default()({}, components);
                components.Body = components.Body || body_LockBody;
                components.Header = components.Header || header_LockHeader;
                components.Wrapper = components.Wrapper || wrapper_FixedWrapper;
                components.Row = components.Row || row_LockRow;
                className = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-lock'] = true, _classnames[className] = className, _classnames));
                var content = [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { key: 'lock-left', columns: lockLeftChildren, className: prefix + 'table-lock-left', prefix: prefix, lockType: 'left', components: components, ref: 'lockLeft', loading: false })), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { key: 'lock-right', columns: lockRightChildren, className: prefix + 'table-lock-right', prefix: prefix, lockType: 'right', components: components, ref: 'lockRight', loading: false }))];
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { columns: normalizedChildren, prefix: prefix, wrapperContent: content, components: components, className: className }));
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, this.props);
        };

        return LockTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.LockRow = row_LockRow, _class.LockBody = body_LockBody, _class.LockHeader = header_LockHeader, _class.propTypes = extends_default()({
        scrollToCol: _prop_types_15_7_2_prop_types_default.a.number,
        /**
         * 指定滚动到某一行，仅在`useVirtual`的时候生效
         */
        scrollToRow: _prop_types_15_7_2_prop_types_default.a.number
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps), _class.childContextTypes = {
        getTableInstance: _prop_types_15_7_2_prop_types_default.a.func,
        getLockNode: _prop_types_15_7_2_prop_types_default.a.func,
        onLockBodyScroll: _prop_types_15_7_2_prop_types_default.a.func,
        onLockBodyWheel: _prop_types_15_7_2_prop_types_default.a.func,
        onRowMouseEnter: _prop_types_15_7_2_prop_types_default.a.func,
        onRowMouseLeave: _prop_types_15_7_2_prop_types_default.a.func
    }, _temp);
    LockTable.displayName = 'LockTable';

    statics(LockTable, BaseComponent);
    return LockTable;
}

function deepCopy(arr) {
    var copy = function copy(arr) {
        return arr.map(function (item) {
            var newItem = extends_default()({}, item);
            if (item.children) {
                item.children = copy(item.children);
            }
            return newItem;
        });
    };
    return copy(arr);
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/list-header.js




var list_header__class, list_header__temp;




/**
 * Table.GroupHeader
 * @order 2
 **/
var list_header_ListHeader = (list_header__temp = list_header__class = function (_React$Component) {
  inherits_default()(ListHeader, _React$Component);

  function ListHeader() {
    classCallCheck_default()(this, ListHeader);

    return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
  }

  ListHeader.prototype.render = function render() {
    return null;
  };

  return ListHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), list_header__class.propTypes = {
  /**
   * 行渲染的逻辑
   */
  cell: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func]),
  /**
   * 是否在Children上面渲染selection
   */
  hasChildrenSelection: _prop_types_15_7_2_prop_types_default.a.bool,
  /**
   * 是否在GroupHeader上面渲染selection
   */
  hasSelection: _prop_types_15_7_2_prop_types_default.a.bool
}, list_header__class.defaultProps = {
  cell: function cell() {
    return '';
  },
  hasSelection: true,
  hasChildrenSelection: false
}, list_header__class._typeMark = 'listHeader', list_header__temp);
list_header_ListHeader.displayName = 'ListHeader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/list-footer.js




var list_footer__class, list_footer__temp;




/* istanbul ignore file */
/**
 * Table.GroupFooter
 * @order 3
 **/
var list_footer_ListFooter = (list_footer__temp = list_footer__class = function (_React$Component) {
    inherits_default()(ListFooter, _React$Component);

    function ListFooter() {
        classCallCheck_default()(this, ListFooter);

        return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
    }

    ListFooter.prototype.render = function render() {
        return null;
    };

    return ListFooter;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), list_footer__class.propTypes = {
    /**
     * 行渲染的逻辑
     */
    cell: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.element, _prop_types_15_7_2_prop_types_default.a.node, _prop_types_15_7_2_prop_types_default.a.func])
}, list_footer__class.defaultProps = {
    cell: function cell() {
        return '';
    }
}, list_footer__class._typeMark = 'listFooter', list_footer__temp);
list_footer_ListFooter.displayName = 'ListFooter';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/list/row.js






var list_row__class, list_row__temp;







var row_GroupListRow = (list_row__temp = list_row__class = function (_Row) {
    inherits_default()(GroupListRow, _Row);

    function GroupListRow() {
        classCallCheck_default()(this, GroupListRow);

        return possibleConstructorReturn_default()(this, _Row.apply(this, arguments));
    }

    GroupListRow.prototype.render = function render() {
        var _classnames;

        /* eslint-disable no-unused-vars*/
        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            onClick = _props.onClick,
            onMouseEnter = _props.onMouseEnter,
            onMouseLeave = _props.onMouseLeave,
            columns = _props.columns,
            Cell = _props.Cell,
            rowIndex = _props.rowIndex,
            record = _props.record,
            children = _props.children,
            primaryKey = _props.primaryKey,
            colGroup = _props.colGroup,
            cellRef = _props.cellRef,
            getCellProps = _props.getCellProps,
            locale = _props.locale,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'onClick', 'onMouseEnter', 'onMouseLeave', 'columns', 'Cell', 'rowIndex', 'record', 'children', 'primaryKey', 'colGroup', 'cellRef', 'getCellProps', 'locale']);

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-row'] = true, _classnames[className] = className, _classnames));
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'table',
            extends_default()({ className: cls, role: 'row' }, others, {
                onClick: this.onClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }),
            colGroup,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'tbody',
                null,
                this.renderContent('header'),
                this.renderChildren(),
                this.renderContent('footer')
            )
        );
    };

    GroupListRow.prototype.isChildrenSelection = function isChildrenSelection() {
        return this.context.listHeader && this.context.listHeader.hasChildrenSelection;
    };

    GroupListRow.prototype.isSelection = function isSelection() {
        return this.context.listHeader && this.context.listHeader.hasSelection;
    };

    GroupListRow.prototype.renderChildren = function renderChildren() {
        var _this2 = this;

        var _props2 = this.props,
            record = _props2.record,
            primaryKey = _props2.primaryKey;
        var children = record.children;

        if (children) {
            return children.map(function (child, index) {
                var cells = _this2.renderCells(child);
                if (_this2.isChildrenSelection()) {
                    if (!child[primaryKey]) {
                        log.warning('record.children should contains primaryKey when childrenSelection is true.');
                    }
                    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'tr',
                        { key: child[primaryKey] },
                        cells
                    );
                }
                if (_this2.context.rowSelection) {
                    cells.shift();
                    cells[0] = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(cells[0], extends_default()({
                        colSpan: 2
                    }, cells[0].props));
                }
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'tr',
                    { key: index },
                    cells
                );
            });
        }
        return null;
    };

    GroupListRow.prototype.renderContent = function renderContent(type) {
        var _props3 = this.props,
            columns = _props3.columns,
            prefix = _props3.prefix,
            record = _props3.record,
            rowIndex = _props3.rowIndex;

        var cameType = type.charAt(0).toUpperCase() + type.substr(1);
        var list = this.context['list' + cameType];
        var listNode = void 0;
        if (list) {
            if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(list.cell)) {
                listNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(list.cell, { record: record, index: rowIndex });
            } else if (typeof list.cell === 'function') {
                listNode = list.cell(record, rowIndex);
            }
            if (listNode) {
                var cells = this.renderCells(record);
                if (type === 'header' && this.context.rowSelection && this.isSelection()) {
                    cells = cells.slice(0, 1);
                    cells.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'td',
                        { colSpan: columns.length - 1, key: 'listNode' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                            'div',
                            { className: prefix + 'table-cell-wrapper' },
                            listNode
                        )
                    ));
                    listNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'tr',
                        { className: prefix + 'table-group-' + type },
                        cells
                    );
                } else {
                    listNode = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'tr',
                        { className: prefix + 'table-group-' + type },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                            'td',
                            { colSpan: columns.length },
                            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                                'div',
                                { className: prefix + 'table-cell-wrapper' },
                                listNode
                            )
                        )
                    );
                }
            }
        }
        return listNode;
    };

    return GroupListRow;
}(base_row_Row), list_row__class.contextTypes = {
    listHeader: _prop_types_15_7_2_prop_types_default.a.any,
    listFooter: _prop_types_15_7_2_prop_types_default.a.any,
    rowSelection: _prop_types_15_7_2_prop_types_default.a.object,
    notRenderCellIndex: _prop_types_15_7_2_prop_types_default.a.array,
    lockType: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, list_row__temp);

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/list/body.js




function ListBody(props) {
    return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(body_Body, extends_default()({ component: 'div' }, props));
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/list.js
















function list_list(BaseComponent) {
    var _class, _temp;

    var ListTable = (_temp = _class = function (_React$Component) {
        inherits_default()(ListTable, _React$Component);

        function ListTable() {
            classCallCheck_default()(this, ListTable);

            return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
        }

        ListTable.prototype.getChildContext = function getChildContext() {
            return {
                listHeader: this.listHeader,
                listFooter: this.listFooter,
                rowSelection: this.rowSelection
            };
        };

        ListTable.prototype.normalizeDataSource = function normalizeDataSource(dataSource) {
            var ret = [];
            var loop = function loop(dataSource, level) {
                dataSource.forEach(function (item) {
                    item.__level = level;
                    ret.push(item);
                    if (item.children) {
                        loop(item.children, level + 1);
                    }
                });
            };
            loop(dataSource, 0);
            this.ds = ret;
            return ret;
        };

        ListTable.prototype.render = function render() {
            var _this2 = this;

            /* eslint-disable prefer-const */
            var _props = this.props,
                components = _props.components,
                children = _props.children,
                className = _props.className,
                prefix = _props.prefix,
                others = objectWithoutProperties_default()(_props, ['components', 'children', 'className', 'prefix']);

            var isList = false,
                ret = [];
            external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (child) {
                if (child) {
                    if (typeof child.type === 'function') {
                        if (child.type._typeMark === 'listHeader') {
                            _this2.listHeader = child.props;
                            isList = true;
                        } else if (child.type._typeMark === 'listFooter') {
                            _this2.listFooter = child.props;
                        } else {
                            ret.push(child);
                        }
                    } else {
                        ret.push(child);
                    }
                }
            });
            this.rowSelection = this.props.rowSelection;
            if (isList) {
                var _classnames;

                components = extends_default()({}, components);
                components.Row = components.Row || row_GroupListRow;
                components.Body = components.Body || ListBody;
                components.Header = components.Header || header_FixedHeader;
                components.Wrapper = components.Wrapper || wrapper_FixedWrapper;
                className = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-group'] = true, _classnames[className] = className, _classnames));
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { components: components, children: ret, className: className, prefix: prefix }));
        };

        return ListTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.ListHeader = list_header_ListHeader, _class.ListFooter = list_footer_ListFooter, _class.ListRow = row_GroupListRow, _class.ListBody = ListBody, _class.propTypes = extends_default()({}, BaseComponent.propTypes), _class.defaultProps = extends_default()({}, BaseComponent.defaultProps), _class.childContextTypes = {
        listHeader: _prop_types_15_7_2_prop_types_default.a.any,
        listFooter: _prop_types_15_7_2_prop_types_default.a.any,
        rowSelection: _prop_types_15_7_2_prop_types_default.a.object
    }, _temp);
    ListTable.displayName = 'ListTable';

    statics(ListTable, BaseComponent);
    return ListTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/sticky/header.js






var sticky_header__class, sticky_header__temp2;






/* eslint-disable react/prefer-stateless-function*/
var header_StickHeader = (sticky_header__temp2 = sticky_header__class = function (_React$Component) {
    inherits_default()(StickHeader, _React$Component);

    function StickHeader() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, StickHeader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.getAffixRef = function (ref) {
            _this.props.affixRef && _this.props.affixRef(ref);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    StickHeader.prototype.render = function render() {
        var _classnames;

        var prefix = this.props.prefix;
        var _context = this.context,
            Header = _context.Header,
            offsetTop = _context.offsetTop,
            affixProps = _context.affixProps;


        var newAffixProps = affixProps || {};

        var className = newAffixProps.className,
            others = objectWithoutProperties_default()(newAffixProps, ['className']);

        var cls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'table-affix'] = true, _classnames.className = className, _classnames));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            affix,
            extends_default()({ ref: this.getAffixRef }, others, { className: cls, offsetTop: offsetTop }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Header, this.props)
        );
    };

    return StickHeader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), sticky_header__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, sticky_header__class.contextTypes = {
    Header: _prop_types_15_7_2_prop_types_default.a.any,
    offsetTop: _prop_types_15_7_2_prop_types_default.a.number,
    affixProps: _prop_types_15_7_2_prop_types_default.a.object
}, sticky_header__temp2);
header_StickHeader.displayName = 'StickHeader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/sticky.js











function sticky(BaseComponent) {
    var _class, _temp;

    /** Table */
    var StickyTable = (_temp = _class = function (_React$Component) {
        inherits_default()(StickyTable, _React$Component);

        function StickyTable() {
            classCallCheck_default()(this, StickyTable);

            return possibleConstructorReturn_default()(this, _React$Component.apply(this, arguments));
        }

        StickyTable.prototype.getChildContext = function getChildContext() {
            return {
                Header: this.props.components.Header || header_FixedHeader,
                offsetTop: this.props.offsetTop,
                affixProps: this.props.affixProps
            };
        };

        StickyTable.prototype.render = function render() {
            /* eslint-disable no-unused-vars */
            var _props = this.props,
                stickyHeader = _props.stickyHeader,
                offsetTop = _props.offsetTop,
                affixProps = _props.affixProps,
                others = objectWithoutProperties_default()(_props, ['stickyHeader', 'offsetTop', 'affixProps']);

            var _props2 = this.props,
                components = _props2.components,
                maxBodyHeight = _props2.maxBodyHeight,
                fixedHeader = _props2.fixedHeader;

            if (stickyHeader) {
                components = extends_default()({}, components);
                components.Header = header_StickHeader;
                fixedHeader = true;
                maxBodyHeight = Math.max(maxBodyHeight, 10000);
            }
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(BaseComponent, extends_default()({}, others, { components: components, fixedHeader: fixedHeader, maxBodyHeight: maxBodyHeight }));
        };

        return StickyTable;
    }(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), _class.StickyHeader = header_StickHeader, _class.propTypes = extends_default()({
        /**
         * 表头是否是sticky
         */
        stickyHeader: _prop_types_15_7_2_prop_types_default.a.bool,
        /**
         * 距离窗口顶部达到指定偏移量后触发
         */
        offsetTop: _prop_types_15_7_2_prop_types_default.a.number,
        /**
         * affix组件的的属性
         */
        affixProps: _prop_types_15_7_2_prop_types_default.a.object,
        components: _prop_types_15_7_2_prop_types_default.a.object
    }, BaseComponent.propTypes), _class.defaultProps = extends_default()({
        components: {}
    }, BaseComponent.defaultProps), _class.childContextTypes = {
        Header: _prop_types_15_7_2_prop_types_default.a.any,
        offsetTop: _prop_types_15_7_2_prop_types_default.a.number,
        affixProps: _prop_types_15_7_2_prop_types_default.a.object
    }, _temp);
    StickyTable.displayName = 'StickyTable';

    statics(StickyTable, BaseComponent);
    return StickyTable;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/table/index.js















var ORDER_LIST = [fixed_fixed, lock_lock, selection, expanded_expanded, tree, virtual, list_list, sticky];
var table_Table = ORDER_LIST.reduce(function (ret, current) {
    ret = current(ret);
    return ret;
}, base_Table);
table_Table.Base = base_Table;
table_Table.fixed = fixed_fixed;
table_Table.lock = lock_lock;
table_Table.selection = selection;
table_Table.expanded = expanded_expanded;
table_Table.tree = tree;
table_Table.virtual = virtual;
table_Table.list = list_list;
table_Table.sticky = sticky;

table_Table.GroupHeader = list_header_ListHeader;
table_Table.GroupFooter = list_footer_ListFooter;

/* harmony default export */ var es_table = (config_provider.config(table_Table, {
    componentName: 'Table',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('expandedRowKeys' in props) {
            deprecated('expandedRowKeys', 'openRowKeys', 'Table');

            var _props = props,
                expandedRowKeys = _props.expandedRowKeys,
                others = objectWithoutProperties_default()(_props, ['expandedRowKeys']);

            props = extends_default()({ openRowKeys: expandedRowKeys }, others);
        }
        if ('onExpandedChange' in props) {
            deprecated('onExpandedChange', 'onRowOpen', 'Table');

            var _props2 = props,
                onExpandedChange = _props2.onExpandedChange,
                _others = objectWithoutProperties_default()(_props2, ['onExpandedChange']);

            props = extends_default()({ onRowOpen: onExpandedChange }, _others);
        }
        if ('isLoading' in props) {
            deprecated('isLoading', 'loading', 'Table');

            var _props3 = props,
                isLoading = _props3.isLoading,
                _others2 = objectWithoutProperties_default()(_props3, ['isLoading']);

            props = extends_default()({ loading: isLoading }, _others2);
        }
        if ('indentSize' in props) {
            deprecated('indentSize', 'indent', 'Table');

            var _props4 = props,
                indentSize = _props4.indentSize,
                _others3 = objectWithoutProperties_default()(_props4, ['indentSize']);

            props = extends_default()({ indent: indentSize }, _others3);
        }
        if ('optimization' in props) {
            deprecated('optimization', 'pure', 'Table');

            var _props5 = props,
                optimization = _props5.optimization,
                _others4 = objectWithoutProperties_default()(_props5, ['optimization']);

            props = extends_default()({ pure: optimization }, _others4);
        }
        if ('getRowClassName' in props) {
            deprecated('getRowClassName', 'getRowProps', 'Table');

            var _props6 = props,
                getRowClassName = _props6.getRowClassName,
                getRowProps = _props6.getRowProps,
                _others5 = objectWithoutProperties_default()(_props6, ['getRowClassName', 'getRowProps']);

            if (getRowClassName) {
                var newGetRowProps = function newGetRowProps() {
                    return extends_default()({
                        className: getRowClassName.apply(undefined, arguments)
                    }, getRowProps ? getRowProps.apply(undefined, arguments) : {});
                };

                props = extends_default()({ getRowProps: newGetRowProps }, _others5);
            } else {
                props = extends_default()({ getRowProps: getRowProps }, _others5);
            }
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/time-picker/time-picker.js






var time_picker__class, time_picker__temp, time_picker__initialiseProps;












var time_picker_Popup = es_overlay.Popup;
var time_picker_noop = func.noop;

var timePickerLocale = zh_cn.TimePicker;

/**
 * TimePicker
 */
var time_picker_TimePicker = (time_picker__temp = time_picker__class = function (_Component) {
    inherits_default()(TimePicker, _Component);

    function TimePicker(props, context) {
        classCallCheck_default()(this, TimePicker);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        time_picker__initialiseProps.call(_this);

        var value = utils_formatDateValue(props.value || props.defaultValue, props.format);
        _this.inputAsString = typeof (props.value || props.defaultValue) === 'string';
        _this.state = {
            value: value,
            inputStr: '',
            inputing: false,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }

    TimePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            var value = utils_formatDateValue(nextProps.value, nextProps.format || this.props.format);
            this.setState({
                value: value
            });
        }

        if ('visible' in nextProps) {
            this.setState({
                visible: nextProps.visible
            });
        }
    };

    TimePicker.prototype.onValueChange = function onValueChange(newValue) {
        var ret = this.inputAsString && newValue ? newValue.format(this.props.format) : newValue;
        this.props.onChange(ret);
    };

    TimePicker.prototype.render = function render() {
        var _classnames, _classnames2;

        var _props = this.props,
            prefix = _props.prefix,
            label = _props.label,
            state = _props.state,
            placeholder = _props.placeholder,
            size = _props.size,
            format = _props.format,
            hasClear = _props.hasClear,
            hourStep = _props.hourStep,
            minuteStep = _props.minuteStep,
            secondStep = _props.secondStep,
            disabledHours = _props.disabledHours,
            disabledMinutes = _props.disabledMinutes,
            disabledSeconds = _props.disabledSeconds,
            popupAlign = _props.popupAlign,
            popupTriggerType = _props.popupTriggerType,
            popupContainer = _props.popupContainer,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            disabled = _props.disabled,
            className = _props.className,
            locale = _props.locale,
            rtl = _props.rtl,
            others = objectWithoutProperties_default()(_props, ['prefix', 'label', 'state', 'placeholder', 'size', 'format', 'hasClear', 'hourStep', 'minuteStep', 'secondStep', 'disabledHours', 'disabledMinutes', 'disabledSeconds', 'popupAlign', 'popupTriggerType', 'popupContainer', 'popupStyle', 'popupClassName', 'popupProps', 'disabled', 'className', 'locale', 'rtl']);

        var _state = this.state,
            value = _state.value,
            inputStr = _state.inputStr,
            inputing = _state.inputing,
            visible = _state.visible;


        var triggerCls = _classnames_2_2_6_classnames_default()((_classnames = {}, _classnames[prefix + 'time-picker-trigger'] = true, _classnames));

        if (rtl) {
            others.dir = 'rtl';
        }

        var inputValue = inputing ? inputStr : value && value.format(format) || '';
        var sharedInputProps = {
            size: size,
            disabled: disabled,
            value: inputValue,
            hasClear: value && hasClear,
            onChange: this.onInputChange,
            onBlur: this.onInputBlur,
            onPressEnter: this.onInputBlur,
            hint: 'clock'
        };

        var triggerInput = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: triggerCls },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                label: label,
                state: state,
                placeholder: placeholder || locale.placeholder,
                className: prefix + 'time-picker-input' }))
        );

        var panelProps = {
            prefix: prefix,
            locale: locale,
            value: value,
            disabled: disabled,
            showHour: format.indexOf('H') > -1,
            showSecond: format.indexOf('s') > -1,
            hourStep: hourStep,
            minuteStep: minuteStep,
            secondStep: secondStep,
            disabledHours: disabledHours,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,
            onSelect: this.onTimePanelSelect
        };

        var classNames = _classnames_2_2_6_classnames_default()((_classnames2 = {}, _classnames2[prefix + 'time-picker'] = true, _classnames2[prefix + 'time-picker-' + size] = size, _classnames2[prefix + 'disabled'] = disabled, _classnames2), className);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(TimePicker.propTypes, others), { className: classNames }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                time_picker_Popup,
                extends_default()({}, popupProps, {
                    autoFocus: true,
                    visible: visible,
                    onVisibleChange: this.onVisibleChange,
                    trigger: triggerInput,
                    container: popupContainer,
                    disabled: disabled,
                    align: popupAlign,
                    triggerType: popupTriggerType,
                    style: popupStyle,
                    className: popupClassName }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { dir: others.dir, className: prefix + 'time-picker-body' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'div',
                        { className: prefix + 'time-picker-panel-header' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({}, sharedInputProps, {
                            placeholder: format,
                            className: prefix + 'time-picker-panel-input' }))
                    ),
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(time_picker_panel, panelProps)
                )
            )
        );
    };

    return TimePicker;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), time_picker__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 按钮的文案
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 输入框状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['error', 'success']),
    /**
     * 输入框提示
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 时间值（moment 对象或时间字符串，受控状态使用）
     */
    value: checkDateValue,
    /**
     * 时间初值（moment 对象或时间字符串，非受控状态使用）
     */
    defaultValue: checkDateValue,
    /**
     * 时间选择框的尺寸
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 是否允许清空时间
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 时间的格式
     * https://momentjs.com/docs/#/parsing/string-format/
     */
    format: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 小时选项步长
     */
    hourStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 分钟选项步长
     */
    minuteStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 秒钟选项步长
     */
    secondStep: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 禁用小时函数
     * @param {Number} index 时 0 - 23
     * @return {Boolean} 是否禁用
     */
    disabledHours: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 禁用分钟函数
     * @param {Number} index 分 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledMinutes: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 禁用秒钟函数
     * @param {Number} index 秒 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledSeconds: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层是否显示（受控）
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层默认是否显示（非受控）
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 弹层容器
     * @param {Object} target 目标节点
     * @return {ReactNode} 容器节点
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层对齐方式, 详情见Overlay 文档
     */
    popupAlign: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层触发方式
     */
    popupTriggerType: _prop_types_15_7_2_prop_types_default.a.oneOf(['click', 'hover']),
    /**
     * 弹层展示状态变化时的回调
     * @param {Boolean} visible 弹层是否隐藏和显示
     * @param {String} reason 触发弹层显示和隐藏的来源
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 弹层自定义样式
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 弹层自定义样式类
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 弹层属性
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 时间值改变时的回调
     * @param {Object|String} value 时间对象或时间字符串
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    className: _prop_types_15_7_2_prop_types_default.a.string
}, time_picker__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    locale: timePickerLocale,
    size: 'medium',
    format: 'HH:mm:ss',
    hasClear: true,
    disabled: false,
    popupAlign: 'tl tl',
    popupTriggerType: 'click',
    onChange: time_picker_noop,
    onVisibleChange: time_picker_noop
}, time_picker__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onClearValue = function () {
        _this2.setState({
            value: null
        });
        if (_this2.state.value) {
            _this2.onValueChange(null);
        }
    };

    this.onInputChange = function (inputValue, e, eventType) {
        if (!('value' in _this2.props)) {
            if (eventType === 'clear' || !inputValue) {
                e.stopPropagation();
                _this2.onClearValue();
            }

            _this2.setState({
                inputStr: inputValue,
                inputing: true
            });
        } else if (eventType === 'clear') {
            // 受控状态下用户点击 clear
            e.stopPropagation();
            _this2.onValueChange(null);
        }
    };

    this.onInputBlur = function () {
        var _state2 = _this2.state,
            value = _state2.value,
            inputStr = _state2.inputStr;

        if (!value && inputStr) {
            var format = _this2.props.format;

            var parsed = external___root___moment___commonjs2___moment___commonjs___moment___amd___moment___default()(inputStr, format, true);
            if (parsed.isValid()) {
                _this2.setState({
                    value: parsed,
                    inputStr: ''
                });
                _this2.onValueChange(parsed);
            }
            _this2.setState({
                inputing: false
            });
        }
    };

    this.onTimePanelSelect = function (value) {
        if (!('value' in _this2.props)) {
            _this2.setState({
                value: value,
                inputing: false
            });
        }
        if (!_this2.state.value || value.valueOf() !== _this2.state.value.valueOf()) {
            _this2.onValueChange(value);
        }
    };

    this.onVisibleChange = function (visible, reason) {
        if (!('visible' in _this2.props)) {
            _this2.setState({
                visible: visible
            });
        }
        _this2.props.onVisibleChange(visible, reason);
    };
}, time_picker__temp);
time_picker_TimePicker.displayName = 'TimePicker';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/time-picker/index.js





/* harmony default export */ var time_picker = (config_provider.config(time_picker_TimePicker, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('defaultOpen' in props) {
            deprecated('defaultOpen', 'defaultVisible', 'TimePicker');

            var _props = props,
                defaultOpen = _props.defaultOpen,
                others = objectWithoutProperties_default()(_props, ['defaultOpen']);

            props = extends_default()({ defaultVisible: defaultOpen }, others);
        }
        if ('open' in props) {
            deprecated('open', 'visible', 'TimePicker');

            var _props2 = props,
                open = _props2.open,
                _others = objectWithoutProperties_default()(_props2, ['open']);

            props = extends_default()({ visible: open }, _others);
        }
        if ('onOpenChange' in props) {
            deprecated('onOpenChange', 'onVisibleChange', 'TimePicker');

            var _props3 = props,
                onOpenChange = _props3.onOpenChange,
                _others2 = objectWithoutProperties_default()(_props3, ['onOpenChange']);

            props = extends_default()({ onVisibleChange: onOpenChange }, _others2);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/timeline/view/timeline.js






var timeline__class, timeline__temp;








/** Timeline */
var timeline_Timeline = (timeline__temp = timeline__class = function (_Component) {
    inherits_default()(Timeline, _Component);

    function Timeline(props, context) {
        classCallCheck_default()(this, Timeline);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this.state = {
            fold: props.fold
        };
        return _this;
    }

    Timeline.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('fold' in nextProps) {
            this.setState({
                fold: nextProps.fold
            });
        }
    };

    Timeline.prototype.toggleFold = function toggleFold(folderIndex, total) {
        var fold = this.state.fold.map(function (item) {
            return extends_default()({}, item);
        });

        if (folderIndex) {
            for (var i = 0; i < fold.length; i++) {
                var _fold$i = fold[i],
                    foldArea = _fold$i.foldArea,
                    foldShow = _fold$i.foldShow;


                if (foldArea[1] && folderIndex === foldArea[1] || !foldArea[1] && folderIndex === total - 1) {
                    fold[i].foldShow = !foldShow;
                }
            }

            this.setState({ fold: fold });
        }
    };

    Timeline.prototype.render = function render() {
        var _this2 = this,
            _classNames;

        var _props = this.props,
            prefix = _props.prefix,
            rtl = _props.rtl,
            className = _props.className,
            children = _props.children,
            locale = _props.locale,
            animation = _props.animation,
            others = objectWithoutProperties_default()(_props, ['prefix', 'rtl', 'className', 'children', 'locale', 'animation']);

        var fold = this.state.fold;

        // 修改子节点属性

        var childrenCount = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.count(children);
        var cloneChildren = external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, i) {
            var folderIndex = null;
            var foldNodeShow = false;

            fold.forEach(function (item) {
                var foldArea = item.foldArea,
                    foldShow = item.foldShow;


                if (foldArea[0] && i >= foldArea[0] && (i <= foldArea[1] || !foldArea[1])) {
                    folderIndex = foldArea[1] || childrenCount - 1;
                    foldNodeShow = foldShow;
                }
            });

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, {
                prefix: prefix,
                locale: locale,
                total: childrenCount,
                index: i,
                folderIndex: folderIndex,
                foldShow: foldNodeShow,
                toggleFold: folderIndex === i ? _this2.toggleFold.bind(_this2, folderIndex, childrenCount) : function () {},
                animation: animation
            });
        });

        var timelineCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'timeline'] = true, _classNames), className);

        if (rtl) {
            others.dir = 'rtl';
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            extends_default()({}, util_obj.pickOthers(Timeline.propTypes, others), { className: timelineCls }),
            cloneChildren
        );
    };

    return Timeline;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), timeline__class.propTypes = {
    /**
     * 样式的品牌前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`
     */
    fold: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 自定义类名
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.any,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    animation: _prop_types_15_7_2_prop_types_default.a.bool
}, timeline__class.defaultProps = {
    prefix: 'next-',
    rtl: false,
    fold: [],
    locale: zh_cn.Timeline,
    animation: true
}, timeline__temp);
timeline_Timeline.displayName = 'Timeline';


/* harmony default export */ var timeline = (config_provider.config(timeline_Timeline));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/timeline/view/timeline-item.js






var timeline_item__class, timeline_item__temp2;









var timeline_item_Expand = es_animate.Expand;
/*Timeline.Item */

var timeline_item_TimelineItem = (timeline_item__temp2 = timeline_item__class = function (_Component) {
    inherits_default()(TimelineItem, _Component);

    function TimelineItem() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, TimelineItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.beforeEnter = function () {
            _this['timeline-item'].style['min-height'] = 'auto';
        }, _this.beforeLeave = function () {
            _this['timeline-item'].style['min-height'] = '48px'; // timeleft 节点最小高度
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    TimelineItem.prototype.toggleFold = function toggleFold(folderIndex) {
        this.props.toggleFold(folderIndex);
    };

    TimelineItem.prototype.render = function render() {
        var _classNames,
            _classNames2,
            _classNames3,
            _classNames4,
            _this2 = this;

        var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            state = _props.state,
            icon = _props.icon,
            dot = _props.dot,
            time = _props.time,
            title = _props.title,
            timeLeft = _props.timeLeft,
            content = _props.content,
            index = _props.index,
            total = _props.total,
            folderIndex = _props.folderIndex,
            foldShow = _props.foldShow,
            locale = _props.locale,
            animation = _props.animation,
            others = objectWithoutProperties_default()(_props, ['prefix', 'className', 'state', 'icon', 'dot', 'time', 'title', 'timeLeft', 'content', 'index', 'total', 'folderIndex', 'foldShow', 'locale', 'animation']);

        var finalItemNode = dot ? dot : icon ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: prefix + 'timeline-item-icon' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: icon, size: 'xs' })
        ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: prefix + 'timeline-item-dot' });
        var itemCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'timeline-item'] = true, _classNames[prefix + 'timeline-item-first'] = index === 0, _classNames[prefix + 'timeline-item-last'] = index === total - 1, _classNames[prefix + 'timeline-item-' + state] = state, _classNames[prefix + 'timeline-item-folded'] = folderIndex, _classNames[prefix + 'timeline-item-unfolded'] = foldShow, _classNames[prefix + 'timeline-item-has-left-content'] = timeLeft, _classNames[className] = className, _classNames));
        var folderCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'timeline-item-folder'] = true, _classNames2[prefix + 'timeline-item-has-left-content'] = timeLeft, _classNames2));
        var itemNodeCls = _classnames_2_2_6_classnames_default()((_classNames3 = {}, _classNames3[prefix + 'timeline-item-node'] = true, _classNames3[prefix + 'timeline-item-node-custom'] = dot, _classNames3));
        var dotTailCls = _classnames_2_2_6_classnames_default()((_classNames4 = {}, _classNames4[prefix + 'timeline-item-dot-tail'] = true, _classNames4[prefix + 'timeline-item-dot-tail-solid'] = foldShow, _classNames4[prefix + 'timeline-hide'] = index === total - 1 && foldShow, _classNames4));

        var buttonProps = {
            text: true,
            size: 'small',
            type: 'primary',
            onClick: this.toggleFold.bind(this, folderIndex, total)
        };
        var timelineNode = folderIndex && foldShow || !folderIndex ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, util_obj.pickOthers(TimelineItem.propTypes, others), { className: itemCls, ref: function ref(e) {
                    _this2['timeline-item'] = e;
                } }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'timeline-item-left-content' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'p',
                    { className: prefix + 'timeline-item-body' },
                    timeLeft
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'timeline-item-timeline' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'timeline-item-tail' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('i', null)
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: itemNodeCls },
                    finalItemNode
                )
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'timeline-item-content' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'timeline-item-title' },
                    title
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'timeline-item-body' },
                    content
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefix + 'timeline-item-time' },
                    time
                )
            )
        ) : null;
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'li',
            { tabIndex: '0' },
            animation && folderIndex ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                timeline_item_Expand,
                {
                    animationAppear: false,
                    beforeEnter: this.beforeEnter,
                    beforeLeave: this.beforeEnter,
                    afterEnter: this.beforeLeave },
                timelineNode
            ) : timelineNode,
            folderIndex === index ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: folderCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: dotTailCls }),
                foldShow ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_button,
                    buttonProps,
                    locale.fold,
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-up' })
                ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_button,
                    buttonProps,
                    locale.expand,
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-down' })
                )
            ) : null
        );
    };

    return TimelineItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), timeline_item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    index: _prop_types_15_7_2_prop_types_default.a.number,
    total: _prop_types_15_7_2_prop_types_default.a.number,
    folderIndex: _prop_types_15_7_2_prop_types_default.a.number,
    foldShow: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 节点状态
     */
    state: _prop_types_15_7_2_prop_types_default.a.oneOf(['done', 'process', 'error', 'success']),
    /**
     * 图标
     */
    icon: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义时间轴节点
     */
    dot: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 格式化后的时间
     */
    time: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 标题
     */
    title: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 左侧时间
     */
    timeLeft: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 右侧内容
     */
    content: _prop_types_15_7_2_prop_types_default.a.node,
    toggleFold: _prop_types_15_7_2_prop_types_default.a.func,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 动画
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool

}, timeline_item__class.defaultProps = {
    prefix: 'next-',
    state: 'done',
    toggleFold: function toggleFold() {},
    animation: true
}, timeline_item__temp2);
timeline_item_TimelineItem.displayName = 'TimelineItem';

/* harmony default export */ var timeline_item = (timeline_item_TimelineItem);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/timeline/index.js



timeline.Item = timeline_item;

/* harmony default export */ var es_timeline = (timeline);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/transfer/view/transfer-item.js





var transfer_item__class, transfer_item__temp;







var transfer_item_Item = es_menu.Item,
    transfer_item_CheckboxItem = es_menu.CheckboxItem;
var transfer_item_bindCtx = func.bindCtx;
var transfer_item_pickOthers = util_obj.pickOthers;
var transfer_item_getOffset = dom.getOffset;
var transfer_item_TransferItem = (transfer_item__temp = transfer_item__class = function (_Component) {
    inherits_default()(TransferItem, _Component);

    function TransferItem(props) {
        classCallCheck_default()(this, TransferItem);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            highlight: false
        };

        transfer_item_bindCtx(_this, ['getItemDOM', 'handleClick', 'handleDragStart', 'handleDragOver', 'handleDragEnd', 'handleDrop']);
        return _this;
    }

    TransferItem.prototype.componentDidMount = function componentDidMount() {
        var _this2 = this;

        if (this.props.needHighlight) {
            this.addHighlightTimer = setTimeout(function () {
                _this2.setState({
                    highlight: true
                });
            }, 1);
            this.removeHighlightTimer = setTimeout(function () {
                _this2.setState({
                    highlight: false
                });
            }, 201);
        }
    };

    TransferItem.prototype.componentWillUnmount = function componentWillUnmount() {
        clearTimeout(this.addHighlightTimer);
        clearTimeout(this.removeHighlightTimer);
    };

    TransferItem.prototype.getItemDOM = function getItemDOM(ref) {
        this.item = ref;
    };

    TransferItem.prototype.handleClick = function handleClick() {
        var _props = this.props,
            onClick = _props.onClick,
            panelPosition = _props.panelPosition,
            item = _props.item;

        onClick(panelPosition === 'left' ? 'right' : 'left', item.value);
    };

    TransferItem.prototype.handleDragStart = function handleDragStart() {
        var _props2 = this.props,
            onDragStart = _props2.onDragStart,
            panelPosition = _props2.panelPosition,
            item = _props2.item;

        onDragStart(panelPosition, item.value);
    };

    TransferItem.prototype.getDragGap = function getDragGap(e) {
        var referenceTop = transfer_item_getOffset(e.currentTarget).top;
        var referenceHeight = e.currentTarget.offsetHeight;
        return e.pageY <= referenceTop + referenceHeight / 2 ? 'before' : 'after';
    };

    TransferItem.prototype.handleDragOver = function handleDragOver(e) {
        var _props3 = this.props,
            panelPosition = _props3.panelPosition,
            dragPosition = _props3.dragPosition,
            onDragOver = _props3.onDragOver,
            item = _props3.item;

        if (panelPosition === dragPosition) {
            e.preventDefault();

            var dragGap = this.getDragGap(e);
            if (this.dragGap !== dragGap) {
                this.dragGap = dragGap;
                onDragOver(item.value);
            }
        }
    };

    TransferItem.prototype.handleDragEnd = function handleDragEnd() {
        var onDragEnd = this.props.onDragEnd;

        onDragEnd();
    };

    TransferItem.prototype.handleDrop = function handleDrop(e) {
        e.preventDefault();

        var _props4 = this.props,
            onDrop = _props4.onDrop,
            item = _props4.item,
            panelPosition = _props4.panelPosition,
            dragValue = _props4.dragValue;

        onDrop(panelPosition, dragValue, item.value, this.dragGap);
    };

    TransferItem.prototype.render = function render() {
        var _cx;

        var _props5 = this.props,
            prefix = _props5.prefix,
            mode = _props5.mode,
            checked = _props5.checked,
            disabled = _props5.disabled,
            item = _props5.item,
            onCheck = _props5.onCheck,
            itemRender = _props5.itemRender,
            draggable = _props5.draggable,
            dragOverValue = _props5.dragOverValue,
            panelPosition = _props5.panelPosition,
            dragPosition = _props5.dragPosition;

        var others = transfer_item_pickOthers(Object.keys(TransferItem.propTypes), this.props);
        var highlight = this.state.highlight;

        var isSimple = mode === 'simple';

        var classNames = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'transfer-panel-item'] = true, _cx[prefix + 'insert-' + this.dragGap] = dragOverValue === item.value && panelPosition === dragPosition, _cx[prefix + 'focused'] = highlight, _cx[prefix + 'simple'] = isSimple, _cx));

        var itemProps = extends_default()({
            ref: this.getItemDOM,
            className: classNames,
            children: itemRender(item),
            disabled: disabled,
            draggable: draggable && !disabled,
            onDragStart: this.handleDragStart,
            onDragOver: this.handleDragOver,
            onDragEnd: this.handleDragEnd,
            onDrop: this.handleDrop
        }, others);
        if (isSimple) {
            if (!itemProps.disabled) {
                itemProps.onClick = this.handleClick;
            }

            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(transfer_item_Item, itemProps);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(transfer_item_CheckboxItem, extends_default()({ checked: checked, onChange: onCheck.bind(this, item.value) }, itemProps));
    };

    return TransferItem;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), transfer_item__class.menuChildType = transfer_item_CheckboxItem.menuChildType, transfer_item__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'simple']),
    value: _prop_types_15_7_2_prop_types_default.a.array,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    item: _prop_types_15_7_2_prop_types_default.a.object,
    onCheck: _prop_types_15_7_2_prop_types_default.a.func,
    onClick: _prop_types_15_7_2_prop_types_default.a.func,
    needHighlight: _prop_types_15_7_2_prop_types_default.a.bool,
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    draggable: _prop_types_15_7_2_prop_types_default.a.bool,
    onDragStart: _prop_types_15_7_2_prop_types_default.a.func,
    onDragOver: _prop_types_15_7_2_prop_types_default.a.func,
    onDragEnd: _prop_types_15_7_2_prop_types_default.a.func,
    onDrop: _prop_types_15_7_2_prop_types_default.a.func,
    dragPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
    dragValue: _prop_types_15_7_2_prop_types_default.a.string,
    dragOverValue: _prop_types_15_7_2_prop_types_default.a.string,
    panelPosition: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right'])
}, transfer_item__temp);
transfer_item_TransferItem.displayName = 'TransferItem';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/transfer/view/transfer-panel.js




var transfer_panel__class, transfer_panel__temp;










var transfer_panel_bindCtx = func.bindCtx;
var transfer_panel_TransferPanel = (transfer_panel__temp = transfer_panel__class = function (_Component) {
    inherits_default()(TransferPanel, _Component);

    function TransferPanel(props, context) {
        classCallCheck_default()(this, TransferPanel);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        _this.state = {
            searchedValue: '',
            dragValue: null,
            dragOverValue: null
        };

        transfer_panel_bindCtx(_this, ['handleCheck', 'handleAllCheck', 'handleSearch', 'handleItemDragStart', 'handleItemDragOver', 'handleItemDragEnd', 'handleItemDrop', 'getListDOM']);
        _this.firstRender = true;
        return _this;
    }

    TransferPanel.prototype.componentDidMount = function componentDidMount() {
        this.firstRender = false;
    };

    TransferPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (prevProps.dataSource.length !== this.props.dataSource.length && this.list) {
            if (this.list.scrollTop > 0) {
                this.list.scrollTop = 0;
            }
        }

        this.searched = false;
    };

    TransferPanel.prototype.getListDOM = function getListDOM(ref) {
        this.list = ref;
    };

    TransferPanel.prototype.handleAllCheck = function handleAllCheck(allChecked) {
        var _props = this.props,
            position = _props.position,
            onChange = _props.onChange;


        var newValue = void 0;
        if (allChecked) {
            newValue = this.enabledDatasource.map(function (item) {
                return item.value;
            });
        } else {
            newValue = [];
        }

        onChange && onChange(position, newValue);
    };

    TransferPanel.prototype.handleCheck = function handleCheck(itemValue, checked) {
        var _props2 = this.props,
            position = _props2.position,
            value = _props2.value,
            onChange = _props2.onChange;


        var newValue = [].concat(value);
        var index = value.indexOf(itemValue);
        if (checked && index === -1) {
            newValue.push(itemValue);
        } else if (!checked && index > -1) {
            newValue.splice(index, 1);
        }

        onChange && onChange(position, newValue);
    };

    TransferPanel.prototype.handleSearch = function handleSearch(searchedValue) {
        this.setState({
            searchedValue: searchedValue
        });
        this.searched = true;

        var _props3 = this.props,
            onSearch = _props3.onSearch,
            position = _props3.position;

        onSearch(searchedValue, position);
    };

    TransferPanel.prototype.handleItemDragStart = function handleItemDragStart(position, value) {
        this.setState({
            dragPosition: position,
            dragValue: value
        });
    };

    TransferPanel.prototype.handleItemDragOver = function handleItemDragOver(value) {
        this.setState({
            dragOverValue: value
        });
    };

    TransferPanel.prototype.handleItemDragEnd = function handleItemDragEnd() {
        this.setState({
            dragOverValue: null
        });
    };

    TransferPanel.prototype.handleItemDrop = function handleItemDrop() {
        var _props4;

        this.setState({
            dragOverValue: null
        });

        (_props4 = this.props).onSort.apply(_props4, arguments);
    };

    TransferPanel.prototype.renderHeader = function renderHeader() {
        var _props5 = this.props,
            title = _props5.title,
            prefix = _props5.prefix;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'transfer-panel-header' },
            title
        );
    };

    TransferPanel.prototype.renderSearch = function renderSearch() {
        var _props6 = this.props,
            prefix = _props6.prefix,
            searchPlaceholder = _props6.searchPlaceholder,
            locale = _props6.locale;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(search, { shape: 'simple', className: prefix + 'transfer-panel-search', placeholder: searchPlaceholder || locale.searchPlaceholder, onChange: this.handleSearch });
    };

    TransferPanel.prototype.renderList = function renderList(dataSource) {
        var _cx,
            _this2 = this;

        var _props7 = this.props,
            prefix = _props7.prefix,
            position = _props7.position,
            mode = _props7.mode,
            value = _props7.value,
            onMove = _props7.onMove,
            disabled = _props7.disabled,
            listClassName = _props7.listClassName,
            listStyle = _props7.listStyle,
            itemRender = _props7.itemRender,
            sortable = _props7.sortable;
        var _state = this.state,
            dragPosition = _state.dragPosition,
            dragValue = _state.dragValue,
            dragOverValue = _state.dragOverValue;

        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'transfer-panel-list'] = true, _cx[listClassName] = !!listClassName, _cx));

        return dataSource.length ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            es_menu,
            { className: newClassName, style: listStyle, ref: this.getListDOM },
            dataSource.map(function (item) {
                return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(transfer_item_TransferItem, { key: item.value,
                    prefix: prefix,
                    mode: mode,
                    checked: value.indexOf(item.value) > -1,
                    disabled: disabled || item.disabled,
                    item: item,
                    onCheck: _this2.handleCheck,
                    onClick: onMove,
                    needHighlight: !_this2.firstRender && !_this2.searched,
                    itemRender: itemRender,
                    draggable: sortable,
                    onDragStart: _this2.handleItemDragStart,
                    onDragOver: _this2.handleItemDragOver,
                    onDragEnd: _this2.handleItemDragEnd,
                    onDrop: _this2.handleItemDrop,
                    dragPosition: dragPosition,
                    dragValue: dragValue,
                    dragOverValue: dragOverValue,
                    panelPosition: position });
            })
        ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: newClassName, style: listStyle },
            this.renderNotFoundContent()
        );
    };

    TransferPanel.prototype.renderNotFoundContent = function renderNotFoundContent() {
        var _props8 = this.props,
            prefix = _props8.prefix,
            notFoundContent = _props8.notFoundContent;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'transfer-panel-not-found-container' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'transfer-panel-not-found' },
                notFoundContent
            )
        );
    };

    TransferPanel.prototype.renderFooter = function renderFooter() {
        var _props9 = this.props,
            prefix = _props9.prefix,
            position = _props9.position,
            mode = _props9.mode,
            disabled = _props9.disabled,
            locale = _props9.locale;

        if (mode === 'simple') {
            var _cx2;

            var onMoveAll = this.props.onMoveAll;

            var classNames = _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'transfer-panel-move-all'] = true, _cx2[prefix + 'disabled'] = disabled, _cx2));
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefix + 'transfer-panel-footer' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'a',
                    { className: classNames, onClick: onMoveAll.bind(this, position === 'left' ? 'right' : 'left') },
                    locale.moveAll
                )
            );
        }

        var _props10 = this.props,
            value = _props10.value,
            dataSource = _props10.dataSource;

        var checkedCount = value.length;
        var totalCount = dataSource.length;
        var totalEnabledCount = this.enabledDatasource.length;
        var checked = checkedCount > 0 && checkedCount >= totalEnabledCount;
        var indeterminate = checkedCount > 0 && checkedCount < totalEnabledCount;
        var items = totalCount > 1 ? locale.items : locale.item;
        var countLabel = checkedCount === 0 ? totalCount + ' ' + items : checkedCount + '/' + totalCount + ' ' + items;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'transfer-panel-footer' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_checkbox, { disabled: disabled, checked: checked, indeterminate: indeterminate, onChange: this.handleAllCheck }),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefix + 'transfer-panel-count' },
                countLabel
            )
        );
    };

    TransferPanel.prototype.render = function render() {
        var _props11 = this.props,
            prefix = _props11.prefix,
            title = _props11.title,
            showSearch = _props11.showSearch,
            filter = _props11.filter;
        var searchedValue = this.state.searchedValue;

        var dataSource = this.props.dataSource;
        this.enabledDatasource = dataSource.filter(function (item) {
            return !item.disabled;
        });
        if (showSearch && searchedValue) {
            dataSource = dataSource.filter(function (item) {
                return filter(searchedValue, item);
            });
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'transfer-panel' },
            title ? this.renderHeader() : null,
            showSearch ? this.renderSearch() : null,
            this.renderList(dataSource),
            this.renderFooter()
        );
    };

    return TransferPanel;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), transfer_panel__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    position: _prop_types_15_7_2_prop_types_default.a.oneOf(['left', 'right']),
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'simple']),
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    value: _prop_types_15_7_2_prop_types_default.a.array,
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    onMove: _prop_types_15_7_2_prop_types_default.a.func,
    onMoveAll: _prop_types_15_7_2_prop_types_default.a.func,
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    title: _prop_types_15_7_2_prop_types_default.a.string,
    showSearch: _prop_types_15_7_2_prop_types_default.a.bool,
    filter: _prop_types_15_7_2_prop_types_default.a.func,
    onSearch: _prop_types_15_7_2_prop_types_default.a.func,
    searchPlaceholder: _prop_types_15_7_2_prop_types_default.a.string,
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    listClassName: _prop_types_15_7_2_prop_types_default.a.string,
    listStyle: _prop_types_15_7_2_prop_types_default.a.object,
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    sortable: _prop_types_15_7_2_prop_types_default.a.bool,
    onSort: _prop_types_15_7_2_prop_types_default.a.func
}, transfer_panel__temp);
transfer_panel_TransferPanel.displayName = 'TransferPanel';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/transfer/view/transfer.js





var transfer__class, transfer__temp;











var transfer_config = config_provider.config;
var transfer_bindCtx = func.bindCtx;
var transfer_pickOthers = util_obj.pickOthers;

/**
 * Transfer
 */

var transfer_Transfer = (transfer__temp = transfer__class = function (_Component) {
    inherits_default()(Transfer, _Component);

    function Transfer(props, context) {
        classCallCheck_default()(this, Transfer);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        var value = props.value,
            defaultValue = props.defaultValue,
            defaultLeftChecked = props.defaultLeftChecked,
            defaultRightChecked = props.defaultRightChecked,
            dataSource = props.dataSource;

        var _this$filterCheckedVa = _this.filterCheckedValue(_this.normalizeValue(defaultLeftChecked), _this.normalizeValue(defaultRightChecked), dataSource),
            left = _this$filterCheckedVa.left,
            right = _this$filterCheckedVa.right;

        _this.state = {
            value: _this.normalizeValue('value' in props ? value : defaultValue),
            leftCheckedValue: left,
            rightCheckedValue: right
        };

        _this.leftValue = _this.getLeftValue(dataSource, _this.state.value);

        transfer_bindCtx(_this, ['handlePanelChange', 'handlePanelSort', 'handleMoveItem', 'handleSimpleMove', 'handleSimpleMoveAll']);
        return _this;
    }

    Transfer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var st = {};

        var newValue = void 0;
        if ('value' in nextProps) {
            var value = this.normalizeValue(nextProps.value);
            st.value = value;
            newValue = value;
        } else {
            newValue = this.state.value;
        }
        this.leftValue = this.getLeftValue(nextProps.dataSource, newValue);

        var _filterCheckedValue = this.filterCheckedValue(this.state.leftCheckedValue, this.state.rightCheckedValue, nextProps.dataSource),
            left = _filterCheckedValue.left,
            right = _filterCheckedValue.right;

        st.leftCheckedValue = left;
        st.rightCheckedValue = right;

        this.setState(st);
    };

    Transfer.prototype.normalizeValue = function normalizeValue(value) {
        if (value) {
            if (Array.isArray(value)) {
                return value;
            }

            return [value];
        }

        return [];
    };

    Transfer.prototype.filterCheckedValue = function filterCheckedValue(left, right, dataSource) {
        var result = {
            left: [],
            right: []
        };

        if (left.length || right.length) {
            var value = dataSource.map(function (item) {
                return item.value;
            });
            value.forEach(function (itemValue) {
                if (left.indexOf(itemValue) > -1) {
                    result.left.push(itemValue);
                } else if (right.indexOf(itemValue) > -1) {
                    result.right.push(itemValue);
                }
            });
        }

        return result;
    };

    Transfer.prototype.getLeftValue = function getLeftValue(dataSource, rightValue) {
        return dataSource.map(function (item) {
            return item.value;
        }).filter(function (itemValue) {
            return rightValue.indexOf(itemValue) === -1;
        });
    };

    Transfer.prototype.groupDatasource = function groupDatasource(value, itemValues, dataSource) {
        return value.reduce(function (ret, itemValue) {
            var index = itemValues.indexOf(itemValue);
            if (index > -1) {
                ret.push(dataSource[index]);
            }
            return ret;
        }, []);
    };

    Transfer.prototype.handlePanelChange = function handlePanelChange(position, value) {
        var _setState;

        var valuePropName = position === 'left' ? 'leftCheckedValue' : 'rightCheckedValue';
        this.setState((_setState = {}, _setState[valuePropName] = value, _setState));
    };

    Transfer.prototype.handlePanelSort = function handlePanelSort(position, dragValue, referenceValue, dragGap) {
        var _this2 = this;

        var value = position === 'right' ? this.state.value : this.leftValue;
        var currentIndex = value.indexOf(dragValue);
        var referenceIndex = value.indexOf(referenceValue);
        var expectIndex = dragGap === 'before' ? referenceIndex : referenceIndex + 1;
        if (currentIndex === expectIndex) {
            return;
        }

        value.splice(currentIndex, 1);
        if (currentIndex < expectIndex) {
            expectIndex = expectIndex - 1;
        }
        value.splice(expectIndex, 0, dragValue);

        this.setState({
            value: this.state.value
        }, function () {
            _this2.props.onSort(value, position);
        });
    };

    Transfer.prototype.handleMoveItem = function handleMoveItem(direction) {
        var _st;

        var rightValue = void 0;
        var leftValue = void 0;
        var movedValue = void 0;
        var valuePropName = void 0;

        var _state = this.state,
            value = _state.value,
            leftCheckedValue = _state.leftCheckedValue,
            rightCheckedValue = _state.rightCheckedValue;


        if (direction === 'right') {
            rightValue = leftCheckedValue.concat(value);
            leftValue = this.leftValue.filter(function (itemValue) {
                return leftCheckedValue.indexOf(itemValue) === -1;
            });
            movedValue = leftCheckedValue;
            valuePropName = 'leftCheckedValue';
        } else {
            rightValue = value.filter(function (itemValue) {
                return rightCheckedValue.indexOf(itemValue) === -1;
            });
            leftValue = rightCheckedValue.concat(this.leftValue);
            movedValue = rightCheckedValue;
            valuePropName = 'rightCheckedValue';
        }

        var st = (_st = {}, _st[valuePropName] = [], _st);

        this.setValueState(st, rightValue, leftValue, movedValue, direction);
    };

    Transfer.prototype.handleSimpleMove = function handleSimpleMove(direction, v) {
        var rightValue = void 0;
        var leftValue = void 0;

        var value = this.state.value;


        if (direction === 'right') {
            rightValue = [v].concat(value);
            leftValue = this.leftValue.filter(function (itemValue) {
                return itemValue !== v;
            });
        } else {
            rightValue = value.filter(function (itemValue) {
                return itemValue !== v;
            });
            leftValue = [v].concat(this.leftValue);
        }

        this.setValueState({}, rightValue, leftValue, [v], direction);
    };

    Transfer.prototype.handleSimpleMoveAll = function handleSimpleMoveAll(direction) {
        var rightValue = void 0;
        var leftValue = void 0;
        var movedValue = void 0;

        var dataSource = this.props.dataSource;
        var value = this.state.value;

        var disabledValue = dataSource.reduce(function (ret, item) {
            if (item.disabled) {
                ret.push(item.value);
            }

            return ret;
        }, []);

        if (direction === 'right') {
            movedValue = this.leftValue.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) === -1;
            });
            rightValue = movedValue.concat(value);
            leftValue = this.leftValue.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) > -1;
            });
        } else {
            movedValue = value.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) === -1;
            });
            rightValue = value.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) > -1;
            });
            leftValue = movedValue.concat(this.leftValue);
        }

        this.setValueState({}, rightValue, leftValue, movedValue, direction);
    };

    // eslint-disable-next-line max-params


    Transfer.prototype.setValueState = function setValueState(st, rightValue, leftValue, movedValue, direction) {
        var _this3 = this;

        var dataSource = this.props.dataSource;

        var callback = function callback() {
            if ('onChange' in _this3.props) {
                var itemValues = dataSource.map(function (item) {
                    return item.value;
                });
                var rightData = _this3.groupDatasource(rightValue, itemValues, dataSource);
                var leftData = _this3.groupDatasource(leftValue, itemValues, dataSource);
                var movedData = _this3.groupDatasource(movedValue, itemValues, dataSource);

                _this3.props.onChange(rightValue, rightData, {
                    leftValue: leftValue,
                    leftData: leftData,
                    movedValue: movedValue,
                    movedData: movedData,
                    direction: direction
                });
            }
        };

        if (!('value' in this.props)) {
            st.value = rightValue;
            this.leftValue = leftValue;
        }

        if (Object.keys(st).length) {
            this.setState(st, callback);
        } else {
            // eslint-disable-next-line callback-return
            callback();
        }
    };

    Transfer.prototype.renderCenter = function renderCenter() {
        var _props = this.props,
            prefix = _props.prefix,
            mode = _props.mode,
            operations = _props.operations,
            disabled = _props.disabled,
            leftDisabled = _props.leftDisabled,
            rightDisabled = _props.rightDisabled;
        var _state2 = this.state,
            leftCheckedValue = _state2.leftCheckedValue,
            rightCheckedValue = _state2.rightCheckedValue;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'transfer-operations' },
            mode === 'simple' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'transfer-move', size: 'large', type: 'switch' }) : [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                { key: 'l2r', className: prefix + 'transfer-operation', type: leftCheckedValue.length ? 'primary' : 'normal', disabled: leftDisabled || disabled || !leftCheckedValue.length, onClick: this.handleMoveItem.bind(this, 'right') },
                operations[0]
            ), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_button,
                { key: 'r2l', className: prefix + 'transfer-operation', type: rightCheckedValue.length ? 'primary' : 'normal', disabled: rightDisabled || disabled || !rightCheckedValue.length, onClick: this.handleMoveItem.bind(this, 'left') },
                operations[1]
            )]
        );
    };

    Transfer.prototype.render = function render() {
        var _props2 = this.props,
            prefix = _props2.prefix,
            mode = _props2.mode,
            disabled = _props2.disabled,
            className = _props2.className,
            dataSource = _props2.dataSource,
            locale = _props2.locale,
            showSearch = _props2.showSearch,
            filter = _props2.filter,
            onSearch = _props2.onSearch,
            leftDisabled = _props2.leftDisabled,
            rightDisabled = _props2.rightDisabled,
            searchPlaceholder = _props2.searchPlaceholder,
            notFoundContent = _props2.notFoundContent,
            titles = _props2.titles,
            listClassName = _props2.listClassName,
            listStyle = _props2.listStyle,
            itemRender = _props2.itemRender,
            sortable = _props2.sortable;
        var _state3 = this.state,
            value = _state3.value,
            leftCheckedValue = _state3.leftCheckedValue,
            rightCheckedValue = _state3.rightCheckedValue;

        var itemValues = dataSource.map(function (item) {
            return item.value;
        });
        var leftDatasource = this.groupDatasource(this.leftValue, itemValues, dataSource);
        var rightDatasource = this.groupDatasource(value, itemValues, dataSource);
        var panelProps = {
            prefix: prefix,
            mode: mode,
            locale: locale,
            showSearch: showSearch,
            filter: filter,
            onSearch: onSearch,
            searchPlaceholder: searchPlaceholder,
            notFoundContent: notFoundContent,
            listClassName: listClassName,
            listStyle: listStyle,
            itemRender: itemRender,
            onMove: this.handleSimpleMove,
            onMoveAll: this.handleSimpleMoveAll,
            onChange: this.handlePanelChange,
            sortable: sortable,
            onSort: this.handlePanelSort
        };
        var others = transfer_pickOthers(Object.keys(Transfer.propTypes), this.props);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ className: _classnames_2_2_6_classnames_default()(prefix + 'transfer', className) }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(transfer_panel_TransferPanel, extends_default()({}, panelProps, {
                position: 'left',
                dataSource: leftDatasource,
                disabled: leftDisabled || disabled,
                value: leftCheckedValue,
                title: titles[0] })),
            this.renderCenter(),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(transfer_panel_TransferPanel, extends_default()({}, panelProps, {
                position: 'right',
                dataSource: rightDatasource,
                disabled: rightDisabled || disabled,
                value: rightCheckedValue,
                title: titles[1] }))
        );
    };

    return Transfer;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), transfer__class.contextTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, transfer__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    rtl: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 移动选项模式
     */
    mode: _prop_types_15_7_2_prop_types_default.a.oneOf(['normal', 'simple']),
    /**
     * 数据源
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.object),
    /**
     * （用于受控）当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * （用于非受控）初始值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 值发生改变的时候触发的回调函数
     * @param {Array} value 右面板值
     * @param {Array} data 右面板数据
     * @param {Object} extra 额外参数
     * @param {Array} extra.leftValue 左面板值
     * @param {Array} extra.leftData 左面板数据
     * @param {Array} extra.movedValue 发生移动的值
     * @param {Object} extra.movedData 发生移动的数据
     * @param {String} extra.direction 移动的方向，值为'left'或'right'
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用左侧面板
     */
    leftDisabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁用右侧面板
     */
    rightDisabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 列表项渲染函数
     * @param {Object} data 数据
     * @return {ReactNode} 列表项内容
     */
    itemRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否显示搜索框
     */
    showSearch: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义搜索函数
     * @param {String} searchedValue 搜索的内容
     * @param {Object} data 数据
     * @return {Boolean} 是否匹配到
     * @default 根据 label 属性匹配
     */
    filter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 搜索框输入时触发的回调函数
     * @param {String} searchedValue 搜索的内容
     * @param {String} position 搜索面板的位置
     */
    onSearch: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 搜索框占位符
     */
    searchPlaceholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 列表为空显示内容
     */
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 左右面板标题
     */
    titles: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.node),
    /**
     * 向右向左移动按钮显示内容
     */
    operations: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.node),
    /**
     * 左面板默认选中值
     */
    defaultLeftChecked: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 右面板默认选中值
     */
    defaultRightChecked: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 左右面板列表自定义样式类名
     */
    listClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 左右面板列表自定义样式对象
     */
    listStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 是否允许拖拽排序
     */
    sortable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 拖拽排序时触发的回调函数
     * @param {Array} value 排序后的值
     * @param {String} position 拖拽的面板位置，值为：left 或 right
     */
    onSort: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义国际化文案对象
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object
}, transfer__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    mode: 'normal',
    dataSource: [],
    defaultValue: [],
    disabled: false,
    leftDisabled: false,
    rightDisabled: false,
    itemRender: function itemRender(data) {
        return data.label;
    },
    showSearch: false,
    filter: function filter(searchedValue, data) {
        var labelString = '';
        var loop = function loop(arg) {
            if (external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.isValidElement(arg) && arg.props.children) {
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.forEach(arg.props.children, loop);
            } else if (typeof arg === 'string') {
                labelString += arg;
            }
        };
        loop(data.label);

        if (labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1) {
            return true;
        }

        return false;
    },
    onSearch: function onSearch() {},
    notFoundContent: 'Not Found',
    titles: [],
    // eslint-disable-next-line
    operations: [external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-right' }), external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'arrow-left' })],
    defaultLeftChecked: [],
    defaultRightChecked: [],
    sortable: false,
    onSort: function onSort() {},
    locale: zh_cn.Transfer
}, transfer__temp);
transfer_Transfer.displayName = 'Transfer';


/* harmony default export */ var transfer = (transfer_config(transfer_Transfer));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/transfer/index.js


/* harmony default export */ var es_transfer = (transfer);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree/view/tree-node-input.js






var tree_node_input__class, tree_node_input__temp;






var tree_node_input_TreeNodeInput = (tree_node_input__temp = tree_node_input__class = function (_Component) {
    inherits_default()(TreeNodeInput, _Component);

    function TreeNodeInput() {
        classCallCheck_default()(this, TreeNodeInput);

        return possibleConstructorReturn_default()(this, _Component.apply(this, arguments));
    }

    TreeNodeInput.prototype.componentDidMount = function componentDidMount() {
        var inputWrapperNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this);
        inputWrapperNode.querySelector('input').focus();
    };

    TreeNodeInput.prototype.render = function render() {
        var _props = this.props,
            prefix = _props.prefix,
            others = objectWithoutProperties_default()(_props, ['prefix']);

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_input, extends_default()({ size: 'small', className: prefix + 'tree-node-input' }, others));
    };

    return TreeNodeInput;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tree_node_input__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string
}, tree_node_input__temp);
tree_node_input_TreeNodeInput.displayName = 'TreeNodeInput';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree/view/tree-node.js






var tree_node__class, tree_node__temp;











var tree_node_Expand = es_animate.Expand;
var tree_node_bindCtx = func.bindCtx;
var tree_node_isPromise = util_obj.isPromise,
    tree_node_pickOthers = util_obj.pickOthers;

var isRoot = function isRoot(pos) {
    return (/^0-(\d)+$/.test(pos)
    );
};

/**
 * Tree.Node
 */
var tree_node_TreeNode = (tree_node__temp = tree_node__class = function (_Component) {
    inherits_default()(TreeNode, _Component);

    function TreeNode(props) {
        classCallCheck_default()(this, TreeNode);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.state = {
            editing: false,
            loading: false,
            label: props.label
        };

        tree_node_bindCtx(_this, ['handleExpand', 'handleSelect', 'handleCheck', 'handleEditStart', 'handleEditFinish', 'handleRightClick', 'handleDragStart', 'handleDragEnter', 'handleDragOver', 'handleDragLeave', 'handleDragEnd', 'handleDrop', 'handleInputKeyDown', 'handleKeyDown']);
        return _this;
    }

    TreeNode.prototype.componentDidMount = function componentDidMount() {
        this.itemNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(this.refs.node);
        this.setFocus();
    };

    TreeNode.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('label' in nextProps) {
            this.setState({
                label: nextProps.label
            });
        }
    };

    TreeNode.prototype.componentDidUpdate = function componentDidUpdate() {
        this.setFocus();
    };

    TreeNode.prototype.getParentNode = function getParentNode() {
        return this.props.root.getParentNode(this.props.pos);
    };

    TreeNode.prototype.focusable = function focusable() {
        var _props = this.props,
            root = _props.root,
            disabled = _props.disabled;
        var focusable = root.props.focusable;

        return focusable && !disabled;
    };

    TreeNode.prototype.getFocused = function getFocused() {
        var _props2 = this.props,
            _key = _props2._key,
            root = _props2.root;
        var focusedKey = root.state.focusedKey;

        return focusedKey === _key;
    };

    TreeNode.prototype.setFocus = function setFocus() {
        var focused = this.getFocused();
        if (focused && this.focusable()) {
            this.itemNode.focus({ preventScroll: true });
        }
    };

    TreeNode.prototype.handleExpand = function handleExpand(e) {
        var _this2 = this;

        var _props3 = this.props,
            root = _props3.root,
            expanded = _props3.expanded,
            eventKey = _props3.eventKey;


        if (root.props.isNodeBlock) {
            e.stopPropagation();
        }

        var loading = this.state.loading;

        if (loading) {
            return;
        }

        var returnValue = root.handleExpand(!expanded, eventKey, this);
        if (tree_node_isPromise(returnValue)) {
            this.setLoading(true);
            return returnValue.then(function () {
                _this2.setLoading(false);
            }, function () {
                _this2.setLoading(false);
            });
        }
    };

    TreeNode.prototype.setLoading = function setLoading(loading) {
        this.setState({ loading: loading });
    };

    TreeNode.prototype.handleSelect = function handleSelect(e) {
        e.preventDefault();

        var _props4 = this.props,
            root = _props4.root,
            selected = _props4.selected,
            eventKey = _props4.eventKey;

        root.handleSelect(!selected, eventKey, this);
    };

    TreeNode.prototype.handleCheck = function handleCheck() {
        var _props5 = this.props,
            root = _props5.root,
            checked = _props5.checked,
            eventKey = _props5.eventKey;

        root.handleCheck(!checked, eventKey, this);
    };

    TreeNode.prototype.handleEditStart = function handleEditStart(e) {
        e.preventDefault();

        this.setState({
            editing: true
        });
    };

    TreeNode.prototype.handleEditFinish = function handleEditFinish(e) {
        var label = e.target.value;

        this.setState({
            editing: false,
            label: label
        });

        var _props6 = this.props,
            root = _props6.root,
            eventKey = _props6.eventKey;

        root.props.onEditFinish(eventKey, label, this);
    };

    TreeNode.prototype.handleRightClick = function handleRightClick(e) {
        this.props.root.props.onRightClick({
            event: e,
            node: this
        });
    };

    TreeNode.prototype.handleDragStart = function handleDragStart(e) {
        e.stopPropagation();

        this.props.root.handleDragStart(e, this);
    };

    TreeNode.prototype.handleDragEnter = function handleDragEnter(e) {
        e.preventDefault();
        e.stopPropagation();

        this.props.root.handleDragEnter(e, this);
    };

    TreeNode.prototype.handleDragOver = function handleDragOver(e) {
        if (this.props.root.canDrop(this)) {
            e.preventDefault();
            e.stopPropagation();

            this.props.root.handleDragOver(e, this);
        }
    };

    TreeNode.prototype.handleDragLeave = function handleDragLeave(e) {
        e.stopPropagation();

        this.props.root.handleDragLeave(e, this);
    };

    TreeNode.prototype.handleDragEnd = function handleDragEnd(e) {
        e.stopPropagation();

        this.props.root.handleDragEnd(e, this);
    };

    TreeNode.prototype.handleDrop = function handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();

        this.props.root.handleDrop(e, this);
    };

    TreeNode.prototype.handleInputKeyDown = function handleInputKeyDown(e) {
        if (e.keyCode === KEYCODE.ENTER) {
            this.handleEditFinish(e);
        }
    };

    TreeNode.prototype.handleKeyDown = function handleKeyDown(e) {
        var _props7 = this.props,
            _key = _props7._key,
            root = _props7.root,
            disabled = _props7.disabled;

        if (disabled) {
            return;
        }

        if (this.focusable()) {
            root.handleItemKeyDown(_key, this, e);
        }

        this.props.onKeyDown && this.props.onKeyDown(e);
    };

    TreeNode.prototype.addCallbacks = function addCallbacks(props) {
        var _props8 = this.props,
            disabled = _props8.disabled,
            root = _props8.root;

        if (!disabled) {
            var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;
            if (selectable) {
                props.onClick = this.handleSelect;
            }
            var editable = typeof this.props.editable !== 'undefined' ? this.props.editable : root.props.editable;
            if (editable) {
                props.onDoubleClick = this.handleEditStart;
            }
            var draggable = typeof this.props.draggable !== 'undefined' ? this.props.draggable : root.props.draggable;
            if (draggable) {
                props.draggable = true;
                props.onDragStart = this.handleDragStart;
                props.onDragEnd = this.handleDragEnd;
            }
            props.onContextMenu = this.handleRightClick;
        }
    };

    TreeNode.prototype.renderSwitcher = function renderSwitcher() {
        var _cx;

        var _props9 = this.props,
            prefix = _props9.prefix,
            disabled = _props9.disabled,
            expanded = _props9.expanded,
            root = _props9.root;
        var loadData = root.props.loadData;
        var loading = this.state.loading;

        var showLine = this.showLine;

        var lineState = showLine ? 'line' : 'noline';
        var className = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'tree-switcher'] = true, _cx['' + prefix + lineState] = !loading, _cx[prefix + 'close'] = !loading && !showLine && !expanded, _cx[prefix + 'disabled'] = disabled, _cx[prefix + 'loading'] = loading, _cx[prefix + 'loading-' + lineState] = loading, _cx));
        var iconType = loadData && loading ? 'loading' : showLine ? expanded ? 'minus' : 'add' : 'arrow-down';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: className, onClick: disabled ? null : this.handleExpand },
            this.renderRightAngle(),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { className: prefix + 'tree-switcher-icon', type: iconType })
        );
    };

    TreeNode.prototype.renderNoopSwitcher = function renderNoopSwitcher() {
        var _cx2;

        var _props10 = this.props,
            prefix = _props10.prefix,
            pos = _props10.pos;

        var showLine = this.showLine;

        var lineState = showLine ? 'line' : 'noline';
        var className = _classnames_2_2_6_classnames_default()((_cx2 = {}, _cx2[prefix + 'tree-switcher'] = true, _cx2[prefix + 'noop-' + lineState] = true, _cx2[prefix + 'noop-line-noroot'] = showLine && !isRoot(pos), _cx2));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: className },
            this.renderRightAngle()
        );
    };

    TreeNode.prototype.renderRightAngle = function renderRightAngle() {
        var _props11 = this.props,
            prefix = _props11.prefix,
            pos = _props11.pos;

        return this.showLine && !isRoot(pos) ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { className: prefix + 'tree-right-angle' }) : null;
    };

    TreeNode.prototype.renderCheckbox = function renderCheckbox() {
        var _props12 = this.props,
            checked = _props12.checked,
            indeterminate = _props12.indeterminate,
            disabled = _props12.disabled,
            checkboxDisabled = _props12.checkboxDisabled;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_checkbox, {
            checked: checked,
            indeterminate: indeterminate,
            disabled: disabled || checkboxDisabled,
            onChange: this.handleCheck
        });
    };

    TreeNode.prototype.renderLabel = function renderLabel() {
        var _cx3;

        var _props13 = this.props,
            prefix = _props13.prefix,
            root = _props13.root,
            disabled = _props13.disabled;
        var isNodeBlock = root.props.isNodeBlock;
        var label = this.state.label;

        var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;
        var labelProps = {
            className: _classnames_2_2_6_classnames_default()((_cx3 = {}, _cx3[prefix + 'tree-node-label'] = true, _cx3[prefix + 'tree-node-label-selectable'] = selectable && !disabled, _cx3))
        };

        if (!isNodeBlock) {
            this.addCallbacks(labelProps);
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'tree-node-label-wrapper', ref: 'labelWrapper' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                labelProps,
                label
            )
        );
    };

    TreeNode.prototype.renderInput = function renderInput() {
        var prefix = this.props.prefix;
        var label = this.state.label;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: prefix + 'tree-node-label-wrapper', ref: 'labelWrapper' },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(tree_node_input_TreeNodeInput, {
                prefix: prefix,
                defaultValue: label,
                onBlur: this.handleEditFinish,
                onKeyDown: this.handleInputKeyDown
            })
        );
    };

    TreeNode.prototype.renderChildTree = function renderChildTree(hasChildTree) {
        var _props14 = this.props,
            prefix = _props14.prefix,
            children = _props14.children,
            expanded = _props14.expanded,
            root = _props14.root;
        var animation = root.props.animation;


        var childTree = expanded && hasChildTree ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            { role: 'group', className: prefix + 'tree-child-tree' },
            children
        ) : null;
        if (animation) {
            childTree = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                tree_node_Expand,
                { animationAppear: false },
                childTree
            );
        }

        return childTree;
    };

    TreeNode.prototype.render = function render() {
        var _cx4, _cx5;

        var _props15 = this.props,
            prefix = _props15.prefix,
            className = _props15.className,
            children = _props15.children,
            isLeaf = _props15.isLeaf,
            root = _props15.root,
            pos = _props15.pos,
            selected = _props15.selected,
            disabled = _props15.disabled,
            expanded = _props15.expanded,
            dragOver = _props15.dragOver,
            dragOverGapTop = _props15.dragOverGapTop,
            dragOverGapBottom = _props15.dragOverGapBottom,
            _key = _props15._key;
        var _root$props = root.props,
            loadData = _root$props.loadData,
            isNodeBlock = _root$props.isNodeBlock,
            showLine = _root$props.showLine,
            rootDraggable = _root$props.draggable,
            filterTreeNode = _root$props.filterTreeNode;

        this.showLine = !isNodeBlock && showLine;
        var others = tree_node_pickOthers(Object.keys(TreeNode.propTypes), this.props);

        if (rootDraggable) {
            others.onDragEnter = this.handleDragEnter;
            others.onDragOver = this.handleDragOver;
            others.onDragLeave = this.handleDragLeave;
            others.onDrop = this.handleDrop;
        }
        var newClassName = _classnames_2_2_6_classnames_default()((_cx4 = {}, _cx4[prefix + 'tree-node'] = true, _cx4[prefix + 'filtered'] = !!filterTreeNode && !!root.filterTreeNode(this), _cx4[className] = !!className, _cx4));

        var innerClassName = _classnames_2_2_6_classnames_default()((_cx5 = {}, _cx5[prefix + 'tree-node-inner'] = true, _cx5[prefix + 'selected'] = selected, _cx5[prefix + 'disabled'] = disabled, _cx5[prefix + 'drag-over'] = dragOver, _cx5[prefix + 'drag-over-gap-top'] = dragOverGapTop, _cx5[prefix + 'drag-over-gap-bottom'] = dragOverGapBottom, _cx5));

        var defaultPaddingLeft = (typeof isNodeBlock === 'undefined' ? 'undefined' : typeof_default()(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.defaultPaddingLeft || 0) : 0;
        var indent = (typeof isNodeBlock === 'undefined' ? 'undefined' : typeof_default()(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.indent || 24) : 24;
        var level = pos.split('-').length - 2;
        var innerStyle = isNodeBlock ? { paddingLeft: indent * level + defaultPaddingLeft + 'px' } : null;
        var innerProps = {
            className: innerClassName,
            style: innerStyle,
            onKeyDown: this.handleKeyDown
        };
        if (isNodeBlock) {
            this.addCallbacks(innerProps);
        }

        var hasChildTree = children && external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children);
        var canExpand = hasChildTree || loadData && !isLeaf;
        var checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;
        var editing = this.state.editing;


        innerProps.tabIndex = root.tabbableKey === _key ? '0' : '-1';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'li',
            extends_default()({ className: newClassName }, others),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                extends_default()({
                    ref: 'node',
                    role: 'treeitem',
                    'aria-selected': selected,
                    'aria-disabled': disabled,
                    'aria-expanded': expanded && !!hasChildTree
                }, innerProps),
                canExpand ? this.renderSwitcher() : this.renderNoopSwitcher(),
                checkable ? this.renderCheckbox() : null,
                editing ? this.renderInput() : this.renderLabel()
            ),
            this.renderChildTree(hasChildTree)
        );
    };

    return TreeNode;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tree_node__class.propTypes = {
    _key: _prop_types_15_7_2_prop_types_default.a.string,
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 树节点
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 节点文本内容
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 单独设置是否支持选中，覆盖 Tree 的 selectable
     */
    selectable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 单独设置是否出现复选框，覆盖 Tree 的 checkable
     */
    checkable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 单独设置是否支持编辑，覆盖 Tree 的 editable
     */
    editable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 单独设置是否支持拖拽，覆盖 Tree 的 draggable
     */
    draggable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁止节点响应
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否禁止勾选节点复选框
     */
    checkboxDisabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否是叶子节点，设置loadData时生效
     */
    isLeaf: _prop_types_15_7_2_prop_types_default.a.bool,
    root: _prop_types_15_7_2_prop_types_default.a.object,
    eventKey: _prop_types_15_7_2_prop_types_default.a.string,
    pos: _prop_types_15_7_2_prop_types_default.a.string,
    expanded: _prop_types_15_7_2_prop_types_default.a.bool,
    selected: _prop_types_15_7_2_prop_types_default.a.bool,
    checked: _prop_types_15_7_2_prop_types_default.a.bool,
    indeterminate: _prop_types_15_7_2_prop_types_default.a.bool,
    dragOver: _prop_types_15_7_2_prop_types_default.a.bool,
    dragOverGapTop: _prop_types_15_7_2_prop_types_default.a.bool,
    dragOverGapBottom: _prop_types_15_7_2_prop_types_default.a.bool,
    parentNode: _prop_types_15_7_2_prop_types_default.a.object,
    onKeyDown: _prop_types_15_7_2_prop_types_default.a.func
}, tree_node__class.defaultProps = {
    label: '---',
    disabled: false,
    checkboxDisabled: false,
    isLeaf: false
}, tree_node__temp);
tree_node_TreeNode.displayName = 'TreeNode';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree/view/util.js
/* eslint-disable valid-jsdoc */
function normalizeToArray(keys) {
    if (keys !== undefined && keys !== null) {
        if (Array.isArray(keys)) {
            return [].concat(keys);
        }

        return [keys];
    }

    return [];
}
/**
 * 过滤子节点
 * @param {Array} keys
 * @param {Object} _k2n
 */
function filterChildKey(keys, _k2n) {
    var newKeys = [].concat(keys).sort(function (prev, next) {
        return getDepth(prev, _k2n) - getDepth(next, _k2n);
    });

    for (var i = 0; i < newKeys.length; i++) {
        for (var j = 0; j < newKeys.length; j++) {
            if (i !== j && isDescendantOrSelf(_k2n[newKeys[i]].pos, _k2n[newKeys[j]].pos)) {
                newKeys.splice(j, 1);
                j--;
            }
        }
    }

    return newKeys;
}

function filterParentKey(keys, _k2n) {
    var newKeys = [].concat(keys).sort(function (prev, next) {
        return getDepth(next, _k2n) - getDepth(prev, _k2n);
    });

    for (var i = 0; i < newKeys.length; i++) {
        for (var j = 0; j < newKeys.length; j++) {
            if (i !== j && isDescendantOrSelf(_k2n[newKeys[j]].pos, _k2n[newKeys[i]].pos)) {
                newKeys.splice(j, 1);
                j--;
            }
        }
    }

    return newKeys;
}

function isDescendantOrSelf(currentPos, targetPos) {
    if (!currentPos || !targetPos) {
        return false;
    }

    var currentNums = currentPos.split('-');
    var targetNums = targetPos.split('-');

    return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}

function isSiblingOrSelf(currentPos, targetPos) {
    var currentNums = currentPos.split('-').slice(0, -1);
    var targetNums = targetPos.split('-').slice(0, -1);

    return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}

// eslint-disable-next-line max-statements
function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {
    checkedKeys = normalizeToArray(checkedKeys);
    var filteredKeys = checkedKeys.filter(function (key) {
        return !!_k2n[key];
    });
    var flatKeys = filterChildKey(filteredKeys, _k2n);
    var childChecked = function childChecked(child) {
        return flatKeys.indexOf(child.key) > -1;
    };
    var removeKey = function removeKey(child) {
        return flatKeys.splice(flatKeys.indexOf(child.key), 1);
    };
    var addParentKey = function addParentKey(i, parent) {
        return flatKeys.splice(i, 0, parent.key);
    };
    var keys = [].concat(flatKeys);
    for (var i = 0; i < keys.length; i++) {
        var pos = _k2n[keys[i]].pos;
        var nums = pos.split('-');
        if (nums.length === 2) {
            break;
        }
        for (var j = nums.length - 2; j > 0; j--) {
            var parentPos = nums.slice(0, j + 1).join('-');
            var parent = _p2n[parentPos];
            var parentChecked = parent.children.every(childChecked);
            if (parentChecked) {
                parent.children.forEach(removeKey);
                addParentKey(i, parent);
            } else {
                break;
            }
        }
    }

    var newKeys = [];
    if (flatKeys.length) {
        flatKeys = flatKeys.reverse();
        var ps = Object.keys(_p2n);
        for (var _i = 0; _i < flatKeys.length; _i++) {
            var _pos = _k2n[flatKeys[_i]].pos;
            for (var _j = 0; _j < ps.length; _j++) {
                if (isDescendantOrSelf(_pos, ps[_j])) {
                    newKeys.push(_p2n[ps[_j]].key);
                    ps.splice(_j, 1);
                    _j--;
                }
            }
        }
    }

    return newKeys;
}

function getDepth(key, _k2n) {
    return _k2n[key].pos.split('-').length;
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree/view/tree.js






var tree__class, tree__temp;








var tree_bindCtx = func.bindCtx,
    view_tree_noop = func.noop;
var tree_getOffset = dom.getOffset;
var tree_pickOthers = util_obj.pickOthers,
    tree_isPlainObject = util_obj.isPlainObject;

/**
 * Tree
 */

var tree_Tree = (tree__temp = tree__class = function (_Component) {
    inherits_default()(Tree, _Component);

    function Tree(props) {
        classCallCheck_default()(this, Tree);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props));

        _this.updateCache(props);

        var _this$props = _this.props,
            focusable = _this$props.focusable,
            autoFocus = _this$props.autoFocus,
            focusedKey = _this$props.focusedKey;


        if (focusable) {
            _this.tabbableKey = _this.getFirstAvaliablelChildKey('0');
        }

        _this.indeterminateKeys = [];
        _this.state = {
            expandedKeys: _this.getExpandedKeys(props),
            selectedKeys: _this.getSelectedKeys(props),
            checkedKeys: _this.getCheckedKeys(props),
            focusedKey: 'focusedKey' in _this.props ? focusedKey : focusable && autoFocus ? _this.tabbableKey : null
        };

        tree_bindCtx(_this, ['handleExpand', 'handleSelect', 'handleCheck', 'handleBlur']);
        return _this;
    }

    Tree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.updateCache(nextProps);

        var st = {};

        if ('expandedKeys' in nextProps) {
            st.expandedKeys = this.getExpandedKeys(nextProps, true);
        }
        if ('selectedKeys' in nextProps) {
            st.selectedKeys = this.getSelectedKeys(nextProps, true);
        }
        if ('checkedKeys' in nextProps) {
            st.checkedKeys = this.getCheckedKeys(nextProps, true);
        }

        if (Object.keys(st).length) {
            this.setState(st);
        }
    };

    Tree.prototype.updateCache = function updateCache(props) {
        var _this2 = this;

        this._k2n = {};
        this._p2n = {};

        if ('dataSource' in props) {
            var loop = function loop(data) {
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
                return data.forEach(function (item, index) {
                    var pos = prefix + '-' + index;
                    var key = item.key;

                    key = key || pos;
                    var newItem = extends_default()({}, item, { key: key, pos: pos });
                    var children = item.children;

                    if (children && children.length) {
                        loop(children, pos);
                    }
                    _this2._k2n[key] = _this2._p2n[pos] = newItem;
                });
            };
            loop(props.dataSource);
        } else if ('children' in props) {
            var _loop = function _loop(children) {
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
                return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (node, index) {
                    var pos = prefix + '-' + index;
                    var key = node.key;

                    key = key || pos;
                    var newItem = extends_default()({}, node.props, { key: key, pos: pos });

                    var children = node.props.children;

                    if (children && external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children)) {
                        newItem.children = _loop(children, pos);
                    }
                    _this2._k2n[key] = _this2._p2n[pos] = newItem;
                    return newItem;
                });
            };
            _loop(props.children);
        }
    };

    Tree.prototype.setFocusKey = function setFocusKey() {
        var _state$selectedKeys = this.state.selectedKeys,
            selectedKeys = _state$selectedKeys === undefined ? [] : _state$selectedKeys;

        this.setState({
            focusedKey: selectedKeys.length > 0 ? selectedKeys[0] : this.getFirstAvaliablelChildKey('0')
        });
    };

    Tree.prototype.getExpandedKeys = function getExpandedKeys(props, willReceiveProps) {
        var _this3 = this;

        var expandedKeys = void 0;

        if (!willReceiveProps && props.defaultExpandAll) {
            expandedKeys = Object.keys(this._k2n).filter(function (key) {
                var children = _this3._k2n[key].children;
                return children && children.length;
            });
        } else {
            expandedKeys = 'expandedKeys' in props ? props.expandedKeys : willReceiveProps ? [] : props.defaultExpandedKeys;
            expandedKeys = normalizeToArray(expandedKeys);

            if (props.autoExpandParent) {
                var newExpandedKeys = [];

                var expandedPoss = expandedKeys.reduce(function (ret, key) {
                    var pos = _this3._k2n[key] && _this3._k2n[key].pos;
                    if (pos) {
                        ret.push(pos);
                        newExpandedKeys.push(key);
                    }
                    return ret;
                }, []);

                expandedPoss.forEach(function (pos) {
                    var nums = pos.split('-');
                    if (nums.length === 2) {
                        return;
                    }
                    for (var i = 1; i <= nums.length - 2; i++) {
                        var ancestorPos = nums.slice(0, i + 1).join('-');
                        var ancestorKey = _this3._p2n[ancestorPos].key;
                        if (newExpandedKeys.indexOf(ancestorKey) === -1) {
                            newExpandedKeys.push(ancestorKey);
                        }
                    }
                });

                return newExpandedKeys;
            }
        }

        return expandedKeys;
    };

    Tree.prototype.getAvailableKey = function getAvailableKey(pos, prev) {
        var _this4 = this;

        var ps = Object.keys(this._p2n).filter(function (p) {
            return _this4.isAvailablePos(pos, p);
        });
        if (ps.length > 1) {
            var index = ps.indexOf(pos);
            var targetIndex = void 0;
            if (prev) {
                targetIndex = index === 0 ? ps.length - 1 : index - 1;
            } else {
                targetIndex = index === ps.length - 1 ? 0 : index + 1;
            }

            return this._p2n[ps[targetIndex]].key;
        }

        return null;
    };

    Tree.prototype.getFirstAvaliablelChildKey = function getFirstAvaliablelChildKey(parentPos) {
        var _this5 = this;

        var pos = Object.keys(this._p2n).find(function (p) {
            return _this5.isAvailablePos(parentPos + '-0', p);
        });
        return pos ? this._p2n[pos].key : null;
    };

    Tree.prototype.isAvailablePos = function isAvailablePos(refPos, targetPos) {
        var disabled = this._p2n[targetPos].disabled;


        return this.isSibling(refPos, targetPos) && !disabled;
    };

    Tree.prototype.isSibling = function isSibling(currentPos, targetPos) {
        var currentNums = currentPos.split('-').slice(0, -1);
        var targetNums = targetPos.split('-').slice(0, -1);

        return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };

    Tree.prototype.getParentKey = function getParentKey(pos) {
        return this._p2n[pos.slice(0, pos.length - 2)].key;
    };

    Tree.prototype.getSelectedKeys = function getSelectedKeys(props, willReceiveProps) {
        var _this6 = this;

        var selectedKeys = 'selectedKeys' in props ? props.selectedKeys : willReceiveProps ? [] : props.defaultSelectedKeys;
        selectedKeys = normalizeToArray(selectedKeys);

        var newSelectKeys = selectedKeys.filter(function (key) {
            return _this6._k2n[key];
        });
        return newSelectKeys;
    };

    Tree.prototype.getCheckedKeys = function getCheckedKeys(props, willReceiveProps) {
        var checkedKeys = 'checkedKeys' in props ? props.checkedKeys : willReceiveProps ? [] : props.defaultCheckedKeys;

        var checkStrictly = this.props.checkStrictly;

        if (checkStrictly) {
            if (tree_isPlainObject(checkedKeys)) {
                var _checkedKeys = checkedKeys,
                    checked = _checkedKeys.checked,
                    indeterminate = _checkedKeys.indeterminate;

                checkedKeys = normalizeToArray(checked);
                this.indeterminateKeys = normalizeToArray(indeterminate);
            } else {
                checkedKeys = normalizeToArray(checkedKeys);
            }
        } else {
            checkedKeys = getAllCheckedKeys(checkedKeys, this._k2n, this._p2n);
            this.indeterminateKeys = this.getIndeterminateKeys(checkedKeys);
        }

        return checkedKeys;
    };

    Tree.prototype.processKey = function processKey(keys, key, add) {
        var index = keys.indexOf(key);
        if (add && index === -1) {
            keys.push(key);
        } else if (!add && index > -1) {
            keys.splice(index, 1);
        }
        return keys;
    };
    /*eslint-disable max-statements*/


    Tree.prototype.handleItemKeyDown = function handleItemKeyDown(key, item, e) {
        if ([KEYCODE.UP, KEYCODE.DOWN, KEYCODE.RIGHT, KEYCODE.LEFT, KEYCODE.ENTER, KEYCODE.ESC, KEYCODE.SPACE].indexOf(e.keyCode) > -1) {
            e.preventDefault();
            e.stopPropagation();
        }

        var focusedKey = this.state.focusedKey;

        var node = this._k2n[key];
        var pos = this._k2n[key].pos;
        var level = pos.split('-').length - 1;
        switch (e.keyCode) {
            case KEYCODE.UP:
                {
                    var avaliableKey = this.getAvailableKey(pos, true);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case KEYCODE.DOWN:
                {
                    var _avaliableKey = this.getAvailableKey(pos, false);
                    if (_avaliableKey) {
                        focusedKey = _avaliableKey;
                    }
                    break;
                }
            case KEYCODE.RIGHT:
                {
                    this.handleExpand(true, key, node);
                    var _avaliableKey2 = this.getFirstAvaliablelChildKey(pos);
                    if (_avaliableKey2) {
                        focusedKey = _avaliableKey2;
                    }
                    break;
                }
            case KEYCODE.LEFT:
            case KEYCODE.ESC:
                {
                    if (level === 1) {
                        var _avaliableKey3 = this.getAvailableKey(pos, true);
                        if (_avaliableKey3) {
                            focusedKey = _avaliableKey3;
                        }
                    } else if (level > 1) {
                        var parentKey = this.getParentKey(pos);
                        this.handleExpand(false, parentKey, node);
                        focusedKey = parentKey;
                    }
                    break;
                }

            case KEYCODE.ENTER:
            case KEYCODE.SPACE:
                {
                    var checkable = item.props.checkable === true || this.props.checkable;
                    var selectable = item.props.selectable === true || this.props.selectable;

                    if (checkable) {
                        this.handleCheck(!item.props.checked, key, node);
                    } else if (selectable) {
                        this.handleSelect(!item.props.selected, key, node);
                    }
                    break;
                }
            case KEYCODE.TAB:
                focusedKey = null;
                break;
            default:
                break;
        }

        if (focusedKey !== this.state.focusedKey) {
            if (!('focusedKey' in this.props)) {
                this.setState({
                    focusedKey: focusedKey
                });
            }
        }

        this.props.onItemKeyDown(focusedKey, item, e);
        this.props.onItemFocus(focusedKey, e);
    };

    Tree.prototype.handleBlur = function handleBlur(e) {
        this.setState({
            focusedKey: ''
        });

        this.props.onBlur && this.props.onBlur(e);
    };

    Tree.prototype.handleExpand = function handleExpand(expand, key, node) {
        var _this7 = this;

        var _props = this.props,
            onExpand = _props.onExpand,
            loadData = _props.loadData;

        var expandedKeys = this.state.expandedKeys; // 由于setState 是异步操作，所以去掉 [...this.state.expandedKeys]
        this.processKey(expandedKeys, key, expand);
        var setExpandedState = function setExpandedState() {
            if (!('expandedKeys' in _this7.props)) {
                _this7.setState({ expandedKeys: expandedKeys });
            }
            onExpand(expandedKeys, { expanded: expand, node: node });
        };

        if (expand && loadData) {
            return loadData(node).then(setExpandedState);
        } else {
            setExpandedState();
        }
    };

    Tree.prototype.handleSelect = function handleSelect(select, key, node) {
        var _props2 = this.props,
            multiple = _props2.multiple,
            onSelect = _props2.onSelect;

        var selectedKeys = [].concat(this.state.selectedKeys);
        if (multiple) {
            this.processKey(selectedKeys, key, select);
        } else if (select) {
            selectedKeys = [key];
        } else {
            selectedKeys = [];
        }

        if (!('selectedKeys' in this.props)) {
            this.setState({ selectedKeys: selectedKeys });
        }
        onSelect(selectedKeys, {
            selectedNodes: this.getNodes(selectedKeys),
            node: node,
            selected: select
        });
    };

    // eslint-disable-next-line max-statements


    Tree.prototype.handleCheck = function handleCheck(check, key, node) {
        var _this8 = this;

        var _props3 = this.props,
            checkStrictly = _props3.checkStrictly,
            checkedStrategy = _props3.checkedStrategy,
            onCheck = _props3.onCheck;

        var checkedKeys = [].concat(this.state.checkedKeys);

        if (checkStrictly) {
            this.processKey(checkedKeys, key, check);
            var _newCheckedKeys = tree_isPlainObject(this.props.checkedKeys) ? {
                checked: checkedKeys,
                indeterminate: this.indeterminateKeys
            } : checkedKeys;

            onCheck(_newCheckedKeys, {
                checkedNodes: this.getNodes(checkedKeys),
                checkedNodesPositions: checkedKeys.map(function (key) {
                    var _k2n$key = _this8._k2n[key],
                        node = _k2n$key.node,
                        pos = _k2n$key.pos;

                    return { node: node, pos: pos };
                }),
                node: node,
                indeterminateKeys: this.indeterminateKeys,
                checked: check
            });

            return;
        }

        var pos = this._k2n[key].pos;

        var ps = Object.keys(this._p2n);
        ps.forEach(function (p) {
            if (isDescendantOrSelf(pos, p)) {
                _this8.processKey(checkedKeys, _this8._p2n[p].key, check);
            }
        });

        var currentPos = pos;
        var nums = pos.split('-');
        for (var i = nums.length; i > 2; i--) {
            var parentCheck = true;

            var parentPos = nums.slice(0, i - 1).join('-');
            var parentKey = this._p2n[parentPos].key;
            var parentChecked = checkedKeys.indexOf(parentKey) > -1;
            if (!check && !parentChecked) {
                break;
            }

            for (var j = 0; j < ps.length; j++) {
                var p = ps[j];
                if (isSiblingOrSelf(currentPos, p)) {
                    var k = this._p2n[p].key;
                    if (checkedKeys.indexOf(k) === -1) {
                        parentCheck = false;
                        break;
                    }
                }
            }

            this.processKey(checkedKeys, parentKey, parentCheck);

            currentPos = parentPos;
        }

        var indeterminateKeys = this.getIndeterminateKeys(checkedKeys);
        if (!('checkedKeys' in this.props)) {
            this.setState({
                checkedKeys: checkedKeys
            });
            this.indeterminateKeys = indeterminateKeys;
        }

        var newCheckedKeys = void 0;
        switch (checkedStrategy) {
            case 'parent':
                newCheckedKeys = filterChildKey(checkedKeys, this._k2n);
                break;
            case 'child':
                newCheckedKeys = filterParentKey(checkedKeys, this._k2n);
                break;
            default:
                newCheckedKeys = checkedKeys;
                break;
        }

        onCheck(newCheckedKeys, {
            checkedNodes: this.getNodes(newCheckedKeys),
            checkedNodesPositions: newCheckedKeys.map(function (key) {
                var _k2n$key2 = _this8._k2n[key],
                    node = _k2n$key2.node,
                    pos = _k2n$key2.pos;

                return { node: node, pos: pos };
            }),
            node: node,
            indeterminateKeys: indeterminateKeys,
            checked: check
        });
    };
    /*eslint-enable*/


    Tree.prototype.getNodeProps = function getNodeProps(key) {
        var prefix = this.props.prefix;
        var _state = this.state,
            expandedKeys = _state.expandedKeys,
            selectedKeys = _state.selectedKeys,
            checkedKeys = _state.checkedKeys,
            dragOverNodeKey = _state.dragOverNodeKey;

        var pos = this._k2n[key].pos;

        return {
            prefix: prefix,
            root: this,
            eventKey: key,
            pos: pos,
            expanded: expandedKeys.indexOf(key) > -1,
            selected: selectedKeys.indexOf(key) > -1,
            checked: checkedKeys.indexOf(key) > -1,
            indeterminate: this.indeterminateKeys.indexOf(key) > -1,
            dragOver: dragOverNodeKey === key && this.dropPosition === 0,
            dragOverGapTop: dragOverNodeKey === key && this.dropPosition === -1,
            dragOverGapBottom: dragOverNodeKey === key && this.dropPosition === 1
        };
    };

    Tree.prototype.getParentNode = function getParentNode(pos) {
        var parentPos = pos.split('-').slice(0, -1).join('-');
        if (parentPos.length === 1) {
            return null;
        }

        return this._p2n[parentPos].node;
    };

    Tree.prototype.getNodes = function getNodes(keys) {
        var _this9 = this;

        return keys.map(function (key) {
            return _this9._k2n[key].node;
        });
    };

    Tree.prototype.getIndeterminateKeys = function getIndeterminateKeys(checkedKeys) {
        var _this10 = this;

        var indeterminateKeys = [];

        var poss = filterChildKey(checkedKeys, this._k2n).map(function (key) {
            return _this10._k2n[key].pos;
        });
        poss.forEach(function (pos) {
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentKey = _this10._p2n[parentPos].key;
                if (indeterminateKeys.indexOf(parentKey) === -1) {
                    indeterminateKeys.push(parentKey);
                }
            }
        });

        return indeterminateKeys;
    };

    Tree.prototype.handleDragStart = function handleDragStart(e, node) {
        var _this11 = this;

        var dragNodeKey = node.props.eventKey;
        this.dragNode = node;
        this.dragNodesKeys = Object.keys(this._k2n).filter(function (k) {
            return isDescendantOrSelf(_this11._k2n[dragNodeKey].pos, _this11._k2n[k].pos);
        });

        var expandedKeys = this.processKey([].concat(this.state.expandedKeys), dragNodeKey, false);
        this.setState({ expandedKeys: expandedKeys });

        this.props.onDragStart({
            event: e,
            node: node,
            expandedKeys: expandedKeys
        });
    };

    Tree.prototype.handleDragEnter = function handleDragEnter(e, node) {
        var dragOverNodeKey = node.props.eventKey;
        this.dropPosition = this.getDropPosition(e, node);
        if (this.dragNode.props.eventKey === dragOverNodeKey && this.dropPosition === 0) {
            this.setState({
                dragOverNodeKey: null
            });
            return;
        }

        var expandedKeys = this.processKey([].concat(this.state.expandedKeys), dragOverNodeKey, true);
        this.setState({
            dragOverNodeKey: dragOverNodeKey,
            expandedKeys: expandedKeys
        });

        this.props.onDragEnter({
            event: e,
            node: node,
            expandedKeys: expandedKeys
        });
    };

    Tree.prototype.getDropPosition = function getDropPosition(e, node) {
        var labelWrapperNode = node.refs.labelWrapper;
        var offsetTop = tree_getOffset(labelWrapperNode).top;
        var offsetHeight = labelWrapperNode.offsetHeight;
        var pageY = e.pageY;
        var gapHeight = 2;

        if (pageY > offsetTop + offsetHeight - gapHeight) {
            return 1;
        }
        if (pageY < offsetTop + gapHeight) {
            return -1;
        }
        return 0;
    };

    Tree.prototype.handleDragOver = function handleDragOver(e, node) {
        this.props.onDragOver({ event: e, node: node });
    };

    Tree.prototype.handleDragLeave = function handleDragLeave(e, node) {
        this.props.onDragLeave({ event: e, node: node });
    };

    Tree.prototype.handleDragEnd = function handleDragEnd(e, node) {
        this.setState({
            dragOverNodeKey: null
        });

        this.props.onDragEnd({ event: e, node: node });
    };

    Tree.prototype.handleDrop = function handleDrop(e, node) {
        if (isDescendantOrSelf(this._k2n[this.dragNode.props.eventKey].pos, this._k2n[node.props.eventKey].pos)) {
            return;
        }

        this.setState({
            dragOverNodeKey: null
        });

        var params = this.generateDropParams(node);
        this.props.onDrop(extends_default()({
            event: e
        }, params));
    };

    Tree.prototype.canDrop = function canDrop(node) {
        var params = this.generateDropParams(node);
        return this.props.canDrop(params);
    };

    Tree.prototype.generateDropParams = function generateDropParams(node) {
        return {
            dragNode: this.dragNode,
            dragNodesKeys: [].concat(this.dragNodesKeys),
            node: node,
            dropPosition: this.dropPosition
        };
    };

    Tree.prototype.filterTreeNode = function filterTreeNode(node) {
        return this.props.filterTreeNode.call(this, node);
    };

    Tree.prototype.renderByDataSource = function renderByDataSource() {
        var _this12 = this;

        var loop = function loop(data) {
            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

            return data.map(function (item, index) {
                var pos = prefix + '-' + index;

                var _item$key = item.key,
                    key = _item$key === undefined ? pos : _item$key,
                    children = item.children,
                    others = objectWithoutProperties_default()(item, ['key', 'children']);

                var props = extends_default()({}, others, _this12.getNodeProps('' + key), {
                    _key: key
                });
                if (children && children.length) {
                    props.children = loop(children, pos);
                }
                var node = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(tree_node_TreeNode, extends_default()({ key: key }, props));
                _this12._k2n[key].node = node;
                return node;
            });
        };

        return loop(this.props.dataSource);
    };

    Tree.prototype.renderByChildren = function renderByChildren() {
        var _this13 = this;

        var loop = function loop(children) {
            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

            return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (child, index) {
                var pos = prefix + '-' + index;
                var key = child.key || pos;
                var props = _this13.getNodeProps('' + key);
                if (child.props.children) {
                    props.children = loop(child.props.children, pos);
                }

                props._key = key;

                var node = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, props);
                _this13._k2n[key].node = node;
                return node;
            });
        };

        return loop(this.props.children);
    };

    Tree.prototype.render = function render() {
        var _cx;

        var _props4 = this.props,
            prefix = _props4.prefix,
            className = _props4.className,
            dataSource = _props4.dataSource,
            showLine = _props4.showLine,
            isNodeBlock = _props4.isNodeBlock,
            isLabelBlock = _props4.isLabelBlock;

        var others = tree_pickOthers(Object.keys(Tree.propTypes), this.props);

        var newClassName = _classnames_2_2_6_classnames_default()((_cx = {}, _cx[prefix + 'tree'] = true, _cx[prefix + 'label-block'] = isLabelBlock, _cx[prefix + 'node-block'] = isNodeBlock, _cx[prefix + 'node-indent'] = !isNodeBlock, _cx[prefix + 'show-line'] = !isNodeBlock && showLine, _cx[className] = !!className, _cx));

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'ul',
            extends_default()({ role: 'tree', onBlur: this.handleBlur, className: newClassName }, others),
            dataSource ? this.renderByDataSource() : this.renderByChildren()
        );
    };

    return Tree;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tree__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 树节点
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 数据源，该属性优先级高于 children
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 是否显示树的线
     */
    showLine: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否支持选中节点
     */
    selectable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * （用于受控）当前选中节点 key 的数组
     */
    selectedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * （用于非受控）默认选中节点 key 的数组
     */
    defaultSelectedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 选中或取消选中节点时触发的回调函数
     * @param {Array} selectedKeys 选中节点key的数组
     * @param {Object} extra 额外参数
     * @param {Array} extra.selectedNodes 选中节点的数组
     * @param {Object} extra.node 当前操作的节点
     * @param {Boolean} extra.selected 当前操作是否是选中
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否支持多选
     */
    multiple: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否支持勾选节点的复选框
     */
    checkable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象
     */
    checkedKeys: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string), _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * （用于非受控）默认勾选复选框节点 key 的数组
     */
    defaultCheckedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）
     */
    checkStrictly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 定义选中时回填的方式
     * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点
     */
    checkedStrategy: _prop_types_15_7_2_prop_types_default.a.oneOf(['all', 'parent', 'child']),
    /**
     * 勾选或取消勾选复选框时触发的回调函数
     * @param {Array} checkedKeys 勾选复选框节点key的数组
     * @param {Object} extra 额外参数
     * @param {Array} extra.checkedNodes 勾选复选框节点的数组
     * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组
     * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组
     * @param {Object} extra.node 当前操作的节点
     * @param {Boolean} extra.checked 当前操作是否是勾选
     */
    onCheck: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * （用于受控）当前展开的节点 key 的数组
     */
    expandedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * （用于非受控）默认展开的节点 key 的数组
     */
    defaultExpandedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 是否默认展开所有节点
     */
    defaultExpandAll: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否自动展开父节点
     */
    autoExpandParent: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 展开或收起节点时触发的回调函数
     * @param {Array} expandedKeys 展开的节点key的数组
     * @param {Object} extra 额外参数
     * @param {Object} extra.node 当前操作的节点
     * @param {Boolean} extra.expanded 当前操作是否是展开
     */
    onExpand: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否支持编辑节点内容
     */
    editable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 编辑节点内容完成时触发的回调函数
     * @param {String} key 编辑节点的 key
     * @param {String} label 编辑节点完成时节点的文本
     * @param {Object} node 当前编辑的节点
     */
    onEditFinish: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否支持拖拽节点
     */
    draggable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 开始拖拽节点时触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 拖拽的节点
     */
    onDragStart: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽节点进入目标节点时触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 目标节点
     * @param {Array} info.expandedKeys 当前展开的节点key的数组
     */
    onDragEnter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽节点在目标节点上移动的时候触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 目标节点
     */
    onDragOver: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽节点离开目标节点时触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 目标节点
     */
    onDragLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽节点拖拽结束时触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 目标节点
     */
    onDragEnd: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽节点放入目标节点内或前后触发的回调函数
     * @param {Object} info 拖拽信息
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 目标节点
     * @param {Object} info.dragNode 拖拽的节点
     * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组
     * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后
     */
    onDrop: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 节点是否可被作为拖拽的目标节点
     * @param {Object} info 拖拽信息
     * @param {Object} info.node 目标节点
     * @param {Object} info.dragNode 拖拽的节点
     * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组
     * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后
     * @return {Boolean} 是否可以被当作目标节点
     */
    canDrop: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 异步加载数据的函数
     * @param {Object} node 被点击展开的节点
     */
    loadData: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 按需筛选高亮节点
     * @param {Object} node 待筛选的节点
     * @return {Boolean} 是否被筛选中
     */
    filterTreeNode: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 右键点击节点时触发的回调函数
     * @param {Object} info 信息对象
     * @param {Object} info.event 事件对象
     * @param {Object} info.node 点击的节点
     */
    onRightClick: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)
     */
    isLabelBlock: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 设置节点是否占满一行
     */
    isNodeBlock: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.bool, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * 是否开启展开收起动画
     */
    animation: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前获得焦点的子菜单或菜单项 key 值
     */
    focusedKey: _prop_types_15_7_2_prop_types_default.a.string,
    focusable: _prop_types_15_7_2_prop_types_default.a.bool,
    autoFocus: _prop_types_15_7_2_prop_types_default.a.bool,
    onItemFocus: _prop_types_15_7_2_prop_types_default.a.func,
    onBlur: _prop_types_15_7_2_prop_types_default.a.func,
    onItemKeyDown: _prop_types_15_7_2_prop_types_default.a.func
}, tree__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    showLine: false,
    selectable: true,
    editable: false,
    multiple: false,
    checkable: false,
    checkStrictly: false,
    checkedStrategy: 'all',
    draggable: false,
    autoExpandParent: true,
    defaultExpandAll: false,
    defaultExpandedKeys: [],
    defaultCheckedKeys: [],
    defaultSelectedKeys: [],
    onExpand: view_tree_noop,
    onCheck: view_tree_noop,
    onSelect: view_tree_noop,
    onDragStart: view_tree_noop,
    onDragEnter: view_tree_noop,
    onDragOver: view_tree_noop,
    onDragLeave: view_tree_noop,
    onDragEnd: view_tree_noop,
    onDrop: view_tree_noop,
    canDrop: function canDrop() {
        return true;
    },
    onEditFinish: view_tree_noop,
    onRightClick: view_tree_noop,
    isLabelBlock: false,
    isNodeBlock: false,
    animation: true,
    focusable: true,
    autoFocus: false,
    onItemFocus: view_tree_noop,
    onItemKeyDown: view_tree_noop
}, tree__temp);
tree_Tree.displayName = 'Tree';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree/index.js




tree_Tree.Node = tree_node_TreeNode;

/* harmony default export */ var es_tree = (config_provider.config(tree_Tree, {
    exportNames: ['setFocusKey']
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree-select/tree-select.js






var tree_select__class, tree_select__temp;








var tree_select_noop = function noop() {};
var tree_select_TreeNode = es_tree.Node;
var tree_select_bindCtx = func.bindCtx;
var tree_select_pickOthers = util_obj.pickOthers;

/**
 * TreeSelect
 */

var tree_select_TreeSelect = (tree_select__temp = tree_select__class = function (_Component) {
    inherits_default()(TreeSelect, _Component);

    function TreeSelect(props, context) {
        classCallCheck_default()(this, TreeSelect);

        var _this = possibleConstructorReturn_default()(this, _Component.call(this, props, context));

        var defaultVisible = props.defaultVisible,
            visible = props.visible,
            defaultValue = props.defaultValue,
            value = props.value;

        _this.state = {
            visible: typeof visible === 'undefined' ? defaultVisible : visible,
            value: normalizeToArray(typeof value === 'undefined' ? defaultValue : value),
            searchedValue: '',
            expandedKeys: [],
            autoExpandParent: false
        };

        tree_select_bindCtx(_this, ['handleSelect', 'handleCheck', 'handleSearch', 'handleSearchClear', 'handleVisibleChange', 'handleChange', 'handleRemove', 'handleExpand', 'handleKeyDown', 'saveTreeRef', 'saveSelectRef']);

        _this.updateCache(props);
        return _this;
    }

    TreeSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.updateCache(nextProps);

        var st = {};
        if ('value' in nextProps) {
            st.value = normalizeToArray(nextProps.value);
        }
        if ('visible' in nextProps) {
            st.visible = nextProps.visible;
        }

        if (Object.keys(st).length) {
            this.setState(st);
        }
    };

    TreeSelect.prototype.updateCache = function updateCache(props) {
        var _this2 = this;

        this._k2n = {};
        this._p2n = {};
        this._v2n = {};

        if ('dataSource' in props) {
            var loop = function loop(data) {
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
                return data.map(function (item, index) {
                    var value = item.value,
                        children = item.children;

                    var pos = prefix + '-' + index;
                    var key = item.key || pos;
                    var newItem = extends_default()({}, item, { key: key, pos: pos });
                    if (children && children.length) {
                        newItem.children = loop(children, pos);
                    }

                    _this2._k2n[key] = _this2._p2n[pos] = _this2._v2n[value] = newItem;
                    return newItem;
                });
            };
            loop(props.dataSource);
        } else if ('children' in props) {
            var _loop = function _loop(children) {
                var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';
                return external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].map(children, function (node, index) {
                    var _node$props = node.props,
                        value = _node$props.value,
                        children = _node$props.children;

                    var pos = prefix + '-' + index;
                    var key = node.key || pos;
                    var newItem = extends_default()({}, node.props, { key: key, pos: pos });
                    if (children && external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children)) {
                        newItem.children = _loop(children, pos);
                    }

                    _this2._k2n[key] = _this2._p2n[pos] = _this2._v2n[value] = newItem;
                    return newItem;
                });
            };
            _loop(props.children);
        }
    };

    TreeSelect.prototype.getKeysByValue = function getKeysByValue(value) {
        var _this3 = this;

        return value.reduce(function (ret, v) {
            var k = _this3._v2n[v] && _this3._v2n[v].key;
            if (k) {
                ret.push(k);
            }

            return ret;
        }, []);
    };

    TreeSelect.prototype.getValueByKeys = function getValueByKeys(keys) {
        var _this4 = this;

        return keys.map(function (k) {
            return _this4._k2n[k].value;
        });
    };

    TreeSelect.prototype.getValueForSelect = function getValueForSelect(value) {
        var treeCheckedStrategy = this.props.treeCheckedStrategy;


        var keys = this.getKeysByValue(value);
        keys = getAllCheckedKeys(keys, this._k2n, this._p2n);

        switch (treeCheckedStrategy) {
            case 'parent':
                keys = filterChildKey(keys, this._k2n);
                break;
            case 'child':
                keys = filterParentKey(keys, this._k2n);
                break;
            default:
                break;
        }

        return this.getValueByKeys(keys);
    };

    TreeSelect.prototype.getData = function getData(value, forSelect) {
        var _this5 = this;

        return value.reduce(function (ret, v) {
            var k = _this5._v2n[v] && _this5._v2n[v].key;
            if (k) {
                var _k2n$k = _this5._k2n[k],
                    label = _k2n$k.label,
                    pos = _k2n$k.pos,
                    disabled = _k2n$k.disabled,
                    checkboxDisabled = _k2n$k.checkboxDisabled;

                var d = {
                    value: v,
                    label: label,
                    pos: pos
                };
                if (forSelect) {
                    d.disabled = disabled || checkboxDisabled;
                } else {
                    d.key = k;
                }
                ret.push(d);
            }

            return ret;
        }, []);
    };

    TreeSelect.prototype.saveTreeRef = function saveTreeRef(ref) {
        this.tree = ref;
    };

    TreeSelect.prototype.saveSelectRef = function saveSelectRef(ref) {
        this.select = ref;
    };

    TreeSelect.prototype.handleVisibleChange = function handleVisibleChange(visible, type) {
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }

        if (['fromTree', 'keyboard'].indexOf(type) !== -1 && !visible) {
            this.select.focusInput();
        }

        this.props.onVisibleChange(visible, type);
    };

    TreeSelect.prototype.handleSelect = function handleSelect(selectedKeys, extra) {
        var _props = this.props,
            multiple = _props.multiple,
            onChange = _props.onChange;
        var selected = extra.selected;


        if (multiple || selected) {
            var value = this.getValueByKeys(selectedKeys);
            if (!('value' in this.props)) {
                this.setState({
                    value: value
                });
            }
            if (!multiple) {
                this.handleVisibleChange(false, 'fromTree');
            }

            var data = this.getData(value);
            multiple ? onChange(value, data) : onChange(value[0], data[0]);
        } else {
            this.handleVisibleChange(false, 'fromTree');
        }
    };

    TreeSelect.prototype.handleCheck = function handleCheck(checkedKeys) {
        var onChange = this.props.onChange;


        var value = this.getValueByKeys(checkedKeys);
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }

        onChange(value, this.getData(value));
    };

    TreeSelect.prototype.handleRemove = function handleRemove(removedItem) {
        var _this6 = this;

        var removedValue = removedItem.value;
        var _props2 = this.props,
            treeCheckable = _props2.treeCheckable,
            treeCheckStrictly = _props2.treeCheckStrictly,
            treeCheckedStrategy = _props2.treeCheckedStrategy,
            onChange = _props2.onChange;


        var value = void 0;
        if (treeCheckable && !treeCheckStrictly && treeCheckedStrategy === 'all') {
            var removedPos = this._v2n[removedValue].pos;
            value = this.state.value.filter(function (v) {
                var p = _this6._v2n[v].pos;
                return !isDescendantOrSelf(removedPos, p);
            });

            var nums = removedPos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentValue = this._p2n[parentPos].value;
                var parentIndex = value.indexOf(parentValue);
                if (parentIndex > -1) {
                    value.splice(parentIndex, 1);
                } else {
                    break;
                }
            }
        } else {
            value = this.state.value.filter(function (v) {
                return v !== removedValue;
            });
        }

        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }

        var data = this.getData(value);
        onChange(value, data);
    };

    TreeSelect.prototype.handleSearch = function handleSearch(searchedValue) {
        var _this7 = this;

        var searchedKeys = [];
        var retainedKeys = [];
        Object.keys(this._k2n).forEach(function (k) {
            var _k2n$k2 = _this7._k2n[k],
                label = _k2n$k2.label,
                pos = _k2n$k2.pos;

            if (_this7.isSearched(label, searchedValue)) {
                searchedKeys.push(k);
                var posArr = pos.split('-');
                posArr.forEach(function (n, i) {
                    if (i > 0) {
                        var p = posArr.slice(0, i + 1).join('-');
                        var kk = _this7._p2n[p].key;
                        if (retainedKeys.indexOf(kk) === -1) {
                            retainedKeys.push(kk);
                        }
                    }
                });
            }
        });

        this.setState({
            searchedValue: searchedValue,
            expandedKeys: searchedKeys,
            autoExpandParent: true
        });
        this.searchedKeys = searchedKeys;
        this.retainedKeys = retainedKeys;

        this.props.onSearch(searchedValue);
    };

    TreeSelect.prototype.handleSearchClear = function handleSearchClear(triggerType) {
        this.setState({
            searchedValue: '',
            expandedKeys: []
        });
        this.props.onSearchClear(triggerType);
    };

    TreeSelect.prototype.handleExpand = function handleExpand(expandedKeys) {
        this.setState({
            expandedKeys: expandedKeys,
            autoExpandParent: false
        });
    };

    TreeSelect.prototype.handleKeyDown = function handleKeyDown(e) {
        var onKeyDown = this.props.onKeyDown;
        var visible = this.state.visible;


        if (onKeyDown) {
            onKeyDown(e);
        }

        if (!visible) {
            return;
        }

        switch (e.keyCode) {
            case KEYCODE.UP:
            case KEYCODE.DOWN:
                this.tree.setFocusKey();
                e.preventDefault();
                break;
            default:
                break;
        }
    };

    TreeSelect.prototype.handleChange = function handleChange() {
        // 单选时点击清空按钮
        var _props3 = this.props,
            hasClear = _props3.hasClear,
            multiple = _props3.multiple,
            treeCheckable = _props3.treeCheckable;

        if (hasClear && (!multiple || !treeCheckable)) {
            if (!('value' in this.props)) {
                this.setState({
                    value: []
                });
            }

            this.props.onChange(null, null);
        }
    };

    TreeSelect.prototype.isSearched = function isSearched(label, searchedValue) {
        var labelString = '';
        var loop = function loop(arg) {
            if (Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["isValidElement"])(arg) && arg.props.children) {
                external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(arg.props.children, loop);
            } else if (typeof arg === 'string') {
                labelString += arg;
            }
        };
        loop(label);

        if (labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1) {
            return true;
        }

        return false;
    };

    TreeSelect.prototype.searchNodes = function searchNodes(children) {
        var _this8 = this;

        var loop = function loop(children) {
            var retainedNodes = [];
            external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].forEach(children, function (child) {
                if (_this8.searchedKeys.indexOf(child.key) > -1) {
                    retainedNodes.push(child);
                } else if (_this8.retainedKeys.indexOf(child.key) > -1) {
                    var retainedNode = child.props.children ? Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, {}, loop(child.props.children)) : child;
                    retainedNodes.push(retainedNode);
                } else {
                    var hideNode = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, { style: { display: 'none' } });
                    retainedNodes.push(hideNode);
                }
            });
            return retainedNodes;
        };

        return loop(children);
    };

    TreeSelect.prototype.createNodesByData = function createNodesByData(data, searching) {
        var _this9 = this;

        var loop = function loop(data, isParentMatched) {
            var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';

            var retainedNodes = [];

            data.forEach(function (item, index) {
                var children = item.children,
                    others = objectWithoutProperties_default()(item, ['children']);

                var pos = prefix + '-' + index;
                var key = _this9._p2n[pos].key;
                var addNode = function addNode(isParentMatched, hide) {
                    if (hide) {
                        others.style = { display: 'none' };
                    }
                    retainedNodes.push(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        tree_select_TreeNode,
                        extends_default()({}, others, { key: key }),
                        children && children.length ? loop(children, isParentMatched, pos) : null
                    ));
                };

                if (searching) {
                    if (_this9.searchedKeys.indexOf(key) > -1 || isParentMatched) {
                        addNode(true);
                    } else if (_this9.retainedKeys.indexOf(key) > -1) {
                        addNode(false);
                    } else {
                        addNode(false, true);
                    }
                } else {
                    addNode();
                }
            });

            return retainedNodes;
        };

        return loop(data, false);
    };
    /*eslint-disable max-statements*/


    TreeSelect.prototype.renderPopupContent = function renderPopupContent() {
        var _this10 = this;

        var prefix = this.props.prefix;
        var treeSelectPrefix = prefix + 'tree-select-';

        if (!this.state.visible) {
            return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('div', { className: treeSelectPrefix + 'dropdown' });
        }

        var _props4 = this.props,
            multiple = _props4.multiple,
            treeCheckable = _props4.treeCheckable,
            treeCheckStrictly = _props4.treeCheckStrictly,
            treeCheckedStrategy = _props4.treeCheckedStrategy,
            treeDefaultExpandAll = _props4.treeDefaultExpandAll,
            treeDefaultExpandedKeys = _props4.treeDefaultExpandedKeys,
            treeLoadData = _props4.treeLoadData,
            customTreeProps = _props4.treeProps,
            showSearch = _props4.showSearch,
            dataSource = _props4.dataSource,
            children = _props4.children,
            readOnly = _props4.readOnly,
            notFoundContent = _props4.notFoundContent;
        var _state = this.state,
            value = _state.value,
            searchedValue = _state.searchedValue,
            expandedKeys = _state.expandedKeys,
            autoExpandParent = _state.autoExpandParent;


        var treeProps = {
            multiple: multiple,
            ref: this.saveTreeRef,
            loadData: treeLoadData,
            defaultExpandAll: treeDefaultExpandAll,
            defaultExpandedKeys: treeDefaultExpandedKeys
        };

        var keys = this.getKeysByValue(value);
        if (treeCheckable) {
            treeProps.checkable = treeCheckable;
            treeProps.checkStrictly = treeCheckStrictly;
            treeProps.checkedStrategy = treeCheckStrictly ? 'all' : treeCheckedStrategy;
            treeProps.checkedKeys = keys;
            if (!readOnly) {
                treeProps.onCheck = this.handleCheck;
            }
        } else {
            treeProps.selectedKeys = keys;
            if (!readOnly) {
                treeProps.onSelect = this.handleSelect;
            }
        }

        var notFound = false;
        var newChildren = void 0;
        if (showSearch && searchedValue) {
            treeProps.expandedKeys = expandedKeys;
            treeProps.autoExpandParent = autoExpandParent;
            treeProps.onExpand = this.handleExpand;
            treeProps.filterTreeNode = function (node) {
                return _this10.searchedKeys.indexOf(node.props.eventKey) > -1;
            };

            if (this.searchedKeys.length) {
                newChildren = dataSource ? this.createNodesByData(dataSource, true) : this.searchNodes(children);
            } else {
                notFound = true;
            }
        } else {
            // eslint-disable-next-line
            if (dataSource) {
                if (dataSource.length) {
                    newChildren = this.createNodesByData(dataSource);
                } else {
                    notFound = true;
                }
            } else {
                // eslint-disable-next-line
                if (external___root___React___commonjs2___react___commonjs___react___amd___react__["Children"].count(children)) {
                    newChildren = children;
                } else {
                    notFound = true;
                }
            }
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: treeSelectPrefix + 'dropdown' },
            notFound ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: treeSelectPrefix + 'not-found' },
                notFoundContent
            ) : external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                es_tree,
                extends_default()({}, customTreeProps, treeProps),
                newChildren
            )
        );
    };
    /*eslint-enable*/


    TreeSelect.prototype.render = function render() {
        var _props5 = this.props,
            prefix = _props5.prefix,
            size = _props5.size,
            placeholder = _props5.placeholder,
            disabled = _props5.disabled,
            hasArrow = _props5.hasArrow,
            hasBorder = _props5.hasBorder,
            hasClear = _props5.hasClear,
            label = _props5.label,
            readOnly = _props5.readOnly,
            autoWidth = _props5.autoWidth,
            popupStyle = _props5.popupStyle,
            popupClassName = _props5.popupClassName,
            showSearch = _props5.showSearch,
            multiple = _props5.multiple,
            treeCheckable = _props5.treeCheckable,
            treeCheckStrictly = _props5.treeCheckStrictly,
            className = _props5.className,
            popupContainer = _props5.popupContainer,
            popupProps = _props5.popupProps;

        var others = tree_select_pickOthers(Object.keys(TreeSelect.propTypes), this.props);
        var _state2 = this.state,
            value = _state2.value,
            visible = _state2.visible;


        var valueForSelect = treeCheckable && !treeCheckStrictly ? this.getValueForSelect(value) : value;
        var data = this.getData(valueForSelect, true);
        if (!multiple && !treeCheckable) {
            data = data[0];
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_select, extends_default()({ prefix: prefix,
            className: className,
            size: size,
            hasBorder: hasBorder,
            hasArrow: hasArrow,
            hasClear: hasClear,
            placeholder: placeholder,
            disabled: disabled,
            autoWidth: autoWidth,
            label: label,
            readOnly: readOnly,
            ref: this.saveSelectRef,
            mode: treeCheckable || multiple ? 'multiple' : 'single',
            value: data,
            onRemove: this.handleRemove,
            onChange: this.handleChange,
            visible: visible,
            onVisibleChange: this.handleVisibleChange,
            showSearch: showSearch,
            onSearch: this.handleSearch,
            onSearchClear: this.handleSearchClear,
            onKeyDown: this.handleKeyDown,
            popupContent: this.renderPopupContent(),
            popupContainer: popupContainer,
            popupStyle: popupStyle,
            popupClassName: popupClassName,
            popupProps: popupProps
        }, others));
    };

    return TreeSelect;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), tree_select__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    pure: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 树节点
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 选择框大小
     */
    size: _prop_types_15_7_2_prop_types_default.a.oneOf(['small', 'medium', 'large']),
    /**
     * 选择框占位符
     */
    placeholder: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否禁用
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有下拉箭头
     */
    hasArrow: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有边框
     */
    hasBorder: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否有清空按钮
     */
    hasClear: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义内联 label
     */
    label: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否只读，只读模式下可以展开弹层但不能选择
     */
    readOnly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框是否与选择器对齐
     */
    autoWidth: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 数据源，该属性优先级高于 children
     */
    dataSource: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.object),
    /**
     * （受控）当前值
     */
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * （非受控）默认值
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string)]),
    /**
     * 选中值改变时触发的回调函数
     * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
     * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 是否显示搜索框
     */
    showSearch: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 在搜索框中输入时触发的回调函数
     * @param {String} keyword 输入的关键字
     */
    onSearch: _prop_types_15_7_2_prop_types_default.a.func,
    onSearchClear: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 无数据时显示内容
     */
    notFoundContent: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 是否支持多选
     */
    multiple: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框中的树是否支持勾选节点的复选框
     */
    treeCheckable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）
     */
    treeCheckStrictly: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 定义选中时回填的方式
     * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点
     */
    treeCheckedStrategy: _prop_types_15_7_2_prop_types_default.a.oneOf(['all', 'parent', 'child']),
    /**
     * 下拉框中的树是否默认展开所有节点
     */
    treeDefaultExpandAll: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框中的树默认展开节点key的数组
     */
    treeDefaultExpandedKeys: _prop_types_15_7_2_prop_types_default.a.arrayOf(_prop_types_15_7_2_prop_types_default.a.string),
    /**
     * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/component/tree)
     * @param {ReactElement} node 被点击展开的节点
     */
    treeLoadData: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 透传到 Tree 的属性对象
     */
    treeProps: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 初始下拉框是否显示
     */
    defaultVisible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 当前下拉框是否显示
     */
    visible: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 下拉框显示或关闭时触发事件的回调函数
     * @param {Boolean} visible 是否显示
     * @param {String} type 触发显示关闭的操作类型
     */
    onVisibleChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 下拉框自定义样式对象
     */
    popupStyle: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 下拉框样式自定义类名
     */
    popupClassName: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 下拉框挂载的容器节点
     */
    popupContainer: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.string, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 透传到 Popup 的属性对象
     */
    popupProps: _prop_types_15_7_2_prop_types_default.a.object
}, tree_select__class.defaultProps = {
    prefix: 'next-',
    pure: false,
    size: 'medium',
    disabled: false,
    hasArrow: true,
    hasBorder: true,
    hasClear: false,
    autoWidth: true,
    defaultValue: null,
    onChange: tree_select_noop,
    showSearch: false,
    onSearch: tree_select_noop,
    onSearchClear: tree_select_noop,
    notFoundContent: 'Not Found',
    multiple: false,
    treeCheckable: false,
    treeCheckStrictly: false,
    treeCheckedStrategy: 'parent',
    treeDefaultExpandAll: false,
    treeDefaultExpandedKeys: [],
    treeProps: {},
    defaultVisible: false,
    onVisibleChange: tree_select_noop
}, tree_select__temp);
tree_select_TreeSelect.displayName = 'TreeSelect';



tree_select_TreeSelect.Node = tree_select_TreeNode;
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/tree-select/index.js





/* harmony default export */ var tree_select = (config_provider.config(tree_select_TreeSelect, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'hasBorder', 'TreeSelect');

            var _props = props,
                shape = _props.shape,
                others = objectWithoutProperties_default()(_props, ['shape']);

            props = extends_default()({ hasBorder: shape !== 'arrow-only' }, others);
        }

        if ('container' in props) {
            deprecated('container', 'popupContainer', 'TreeSelect');

            var _props2 = props,
                container = _props2.container,
                _others = objectWithoutProperties_default()(_props2, ['container']);

            props = extends_default()({ popupContainer: container }, _others);
        }

        return props;
    }
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/util.js
var now = +new Date();

/**
 * 生成唯一的id
 * @return {String} uid
 */
function util_uid() {
    return (now++).toString(36);
}

function fileToObject(file) {
    if (!file.uid) {
        file.uid = util_uid();
    }

    return {
        lastModified: file.lastModified,
        lastModifiedDate: file.lastModifiedDate,
        name: file.filename || file.name,
        size: file.size,
        type: file.type,
        uid: file.uid,
        error: file.error,
        percent: 0,
        originFileObj: file
    };
}

function getFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    return fileList.filter(function (item) {
        return item[matchKey] === file[matchKey];
    })[0];
}

function removeFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    var removed = fileList.filter(function (item) {
        return item[matchKey] !== file[matchKey];
    });
    if (removed.length === fileList.length) {
        return null;
    }
    return removed;
}

// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
function previewFile(file, callback) {
    var reader = new FileReader();
    reader.onloadend = function () {
        return callback(reader.result);
    };
    reader.readAsDataURL(file);
}

var errorCode = {
    EXCEED_LIMIT: 'EXCEED_LIMIT',
    BEFOREUPLOAD_REJECT: 'BEFOREUPLOAD_REJECT',
    RESPONSE_FAIL: 'RESPONSE_FAIL'
};
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/base.js





var upload_base_Base = function (_Component) {
    inherits_default()(Base, _Component);

    function Base() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Base);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.saveUploaderRef = function (ref) {
            /* istanbul ignore if */
            if (ref && typeof ref.getInstance === 'function') {
                _this.uploaderRef = ref.getInstance();
            } else {
                _this.uploaderRef = ref;
            }
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    /* istanbul ignore next */
    Base.prototype.abort = function abort(file) {
        /* istanbul ignore next */
        this.uploaderRef.abort(file);
    };
    /* istanbul ignore next */


    Base.prototype.startUpload = function startUpload() {
        /* istanbul ignore next */
        this.uploaderRef.startUpload();
    };

    /* istanbul ignore next */
    Base.prototype.isUploading = function isUploading() {
        /* istanbul ignore next */
        return this.uploaderRef.isUploading();
    };

    return Base;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]);

upload_base_Base.displayName = 'Base';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/request.js
/**
 * clone from https://github.com/react-component/upload/blob/master/src/request.js
 */

function getError(option, xhr, msg) {
    msg = msg || 'cannot post ' + option.action + ' ' + xhr.status + '\'';
    var err = new Error(msg);
    err.status = xhr.status;
    err.method = option.method;
    err.url = option.action;
    return err;
}

function getBody(xhr) {
    var text = xhr.responseText || xhr.response;
    if (!text) {
        return text;
    }

    try {
        return JSON.parse(text);
    } catch (e) {
        return text;
    }
}

// option {
//  onProgress: (event: { percent: number }): void,
//  onError: (event: Error, body?: Object): void,
//  onSuccess: (body: Object): void,
//  data: Object,
//  filename: String,
//  file: File,
//  withCredentials: Boolean,
//  action: String,
//  headers: Object,
//  method: String
//  timeout: Number
// }
function request_upload(option) {
    var xhr = new XMLHttpRequest();

    if (option.onProgress && xhr.upload) {
        xhr.upload.onprogress = function progress(e) {
            if (e.total > 0) {
                e.percent = e.loaded / e.total * 100;
            }
            option.onProgress(e);
        };
    }

    var formData = new FormData();

    if (option.data) {
        Object.keys(option.data).forEach(function (key) {
            formData.append(key, option.data[key]);
        });
    }

    formData.append(option.filename, option.file);

    xhr.onerror = function error(e) {
        option.onError(e);
    };

    xhr.onload = function onload() {
        // allow success when 2xx status
        // see https://github.com/react-component/upload/issues/34
        if (xhr.status < 200 || xhr.status >= 300) {
            return option.onError(getError(option, xhr), getBody(xhr));
        }

        option.onSuccess(getBody(xhr), xhr);
    };

    var timeout = option.timeout;


    if (typeof timeout === 'number' && timeout > 0) {
        xhr.timeout = timeout;
        xhr.ontimeout = function () {
            var msg = 'Upload abort for exceeding time (timeout: ' + timeout + 'ms)';
            option.onError(getError(option, xhr, msg), getBody(xhr));
        };
    }

    option.method = option.method || 'POST';
    xhr.open(option.method, option.action, true);

    // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179
    if (option.withCredentials && 'withCredentials' in xhr) {
        xhr.withCredentials = true;
    }

    var headers = option.headers || {};

    // when set headers['X-Requested-With'] = null , can close default XHR header
    // see https://github.com/react-component/upload/issues/33
    if (headers['X-Requested-With'] !== null) {
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }

    for (var h in headers) {
        if (headers.hasOwnProperty(h) && headers[h] !== null) {
            xhr.setRequestHeader(h, headers[h]);
        }
    }
    xhr.send(formData);

    return {
        abort: function abort() {
            xhr.abort();
        }
    };
}
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/uploader.js






var uploader_noop = func.noop;

var uploader_Uploader = function () {
    function Uploader(options) {
        classCallCheck_default()(this, Uploader);

        this.options = extends_default()({
            beforeUpload: uploader_noop,
            onProgress: uploader_noop,
            onSuccess: uploader_noop,
            onError: uploader_noop,
            data: {},
            name: 'file',
            method: 'post'
        }, options);
        this.reqs = {};
    }

    Uploader.prototype.setOptions = function setOptions(options) {
        extends_default()(this.options, options);
    };

    Uploader.prototype.startUpload = function startUpload(files) {
        var _this = this;

        var filesArr = files.length ? Array.prototype.slice.call(files) : [files];
        filesArr.forEach(function (file) {
            file.uid = file.uid || util_uid();
            _this.upload(file);
        });
    };

    Uploader.prototype.abort = function abort(file) {
        var reqs = this.reqs;

        if (file) {
            var _uid = file;
            if (file && file.uid) {
                _uid = file.uid;
            }
            if (reqs[_uid]) {
                reqs[_uid].abort();
                delete reqs[_uid];
            }
        } else {
            Object.keys(reqs).forEach(function (uid) {
                if (reqs[uid]) {
                    reqs[uid].abort();
                }
                delete reqs[uid];
            });
        }
    };

    Uploader.prototype.upload = function upload(file) {
        var _this2 = this;

        var _options = this.options,
            beforeUpload = _options.beforeUpload,
            action = _options.action,
            name = _options.name,
            headers = _options.headers,
            timeout = _options.timeout,
            withCredentials = _options.withCredentials,
            method = _options.method,
            data = _options.data;

        var before = beforeUpload(file, {
            action: action,
            name: name,
            headers: headers,
            timeout: timeout,
            withCredentials: withCredentials,
            method: method,
            data: data
        });

        func.promiseCall(before, function (options) {
            if (options === false) {
                var err = new Error(errorCode.BEFOREUPLOAD_REJECT);
                err.code = errorCode.BEFOREUPLOAD_REJECT;
                return _this2.options.onError(err, null, file);
            }
            _this2.post(file, util_obj.isPlainObject(options) ? options : undefined);
        }, function (error) {
            _this2.options.onError(error, null, file);
        });
    };

    Uploader.prototype.post = function post(file) {
        var _this3 = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var requestOptions = extends_default()({}, this.options, options);
        var action = requestOptions.action,
            name = requestOptions.name,
            headers = requestOptions.headers,
            timeout = requestOptions.timeout,
            withCredentials = requestOptions.withCredentials,
            _onProgress = requestOptions.onProgress,
            _onSuccess = requestOptions.onSuccess,
            _onError = requestOptions.onError,
            method = requestOptions.method;


        var data = requestOptions.data;
        if (typeof data === 'function') {
            data = data(file);
        }

        var uid = file.uid;


        var request = typeof requestOptions.request === 'function' ? requestOptions.request : request_upload;
        this.reqs[uid] = request({
            action: action,
            filename: name,
            file: file,
            data: data,
            timeout: timeout,
            headers: headers,
            withCredentials: withCredentials,
            method: method,
            onProgress: function onProgress(e) {
                _onProgress(e, file);
            },
            onSuccess: function onSuccess(ret) {
                delete _this3.reqs[uid];
                _onSuccess(ret, file);
            },
            onError: function onError(err, ret) {
                delete _this3.reqs[uid];
                _onError(err, ret, file);
            }
        });
    };

    return Uploader;
}();


// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/selecter.js





var selecter__class, selecter__temp2;






var selecter_noop = func.noop;

/**
 * Upload.Selecter
 * @description [底层能力] 可自定义样式的文件选择器
 */

var selecter_Selecter = (selecter__temp2 = selecter__class = function (_React$Component) {
    inherits_default()(Selecter, _React$Component);

    function Selecter() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Selecter);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.onSelect = function (e) {
            var files = e.target.files;
            var filesArr = files.length ? Array.prototype.slice.call(files) : [files];

            filesArr.forEach(function (file) {
                file.uid = util_uid();
            });

            _this.props.onSelect(filesArr);
        }, _this.onClick = function () {
            var el = _this.fileRef;
            if (!el) {
                return;
            }
            el.click();
            el.value = '';
        }, _this.onKeyDown = function (e) {
            if (e.key === 'Enter') {
                _this.onClick();
            }
        }, _this.onDrop = function (e) {
            e.preventDefault();

            var files = e.dataTransfer.files;
            var filesArr = Array.prototype.slice.call(files);

            _this.props.onDrop(filesArr);
        }, _this.onDragOver = function (e) {
            e.preventDefault();
            _this.props.onDragOver(e);
        }, _this.saveFileRef = function (ref) {
            _this.fileRef = ref;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    /**
     * 点击上传按钮
     * @return {void}
     */


    /**
     * 键盘事件
     * @param  {SyntheticEvent} e
     * @return {void}
     */


    /**
     * 拖拽
     * @param  {SyntheticEvent} e
     * @return {void}
     */


    Selecter.prototype.render = function render() {
        var _props = this.props,
            accept = _props.accept,
            multiple = _props.multiple,
            children = _props.children,
            id = _props.id,
            disabled = _props.disabled,
            dragable = _props.dragable,
            style = _props.style,
            className = _props.className,
            name = _props.name;


        var events = {};
        if (!disabled) {
            events = extends_default()({
                onClick: this.onClick,
                onKeyDown: this.onKeyDown,
                tabIndex: '0'
            }, dragable ? {
                onDrop: this.onDrop,
                onDragOver: this.onDragOver,
                onDragLeave: this.props.onDragLeave
            } : {});
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({
                role: 'upload',
                style: style,
                className: className
            }, events),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', { type: 'file',
                name: name,
                id: id,
                ref: this.saveFileRef,
                style: { display: 'none' },
                accept: accept,
                'aria-hidden': true,
                multiple: multiple,
                onChange: this.onSelect,
                disabled: disabled
            }),
            children
        );
    };

    return Selecter;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), selecter__class.propTypes = {
    id: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 是否禁用上传功能
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件
     */
    multiple: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 是否支持拖拽上传，`ie10+` 支持。
     */
    dragable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)
     */
    accept: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 文件选择回调
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽经过回调
     */
    onDragOver: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽离开回调
     */
    onDragLeave: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 拖拽完成回调
     */
    onDrop: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    name: _prop_types_15_7_2_prop_types_default.a.string
}, selecter__class.defaultProps = {
    name: 'file',
    multiple: false,
    onSelect: selecter_noop,
    onDragOver: selecter_noop,
    onDragLeave: selecter_noop,
    onDrop: selecter_noop
}, selecter__temp2);
selecter_Selecter.displayName = 'Selecter';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/html5-uploader.js





var html5_uploader__class, html5_uploader__temp2;







var html5_uploader_Html5Uploader = (html5_uploader__temp2 = html5_uploader__class = function (_Component) {
    inherits_default()(Html5Uploader, _Component);

    function Html5Uploader() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Html5Uploader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.getUploadOptions = function (props) {
            return {
                action: props.action,
                name: props.name,
                timeout: props.timeout,
                method: props.method,
                beforeUpload: props.beforeUpload,
                onProgress: props.onProgress,
                onSuccess: props.onSuccess,
                onError: props.onError,
                withCredentials: props.withCredentials,
                headers: props.headers,
                data: props.data,
                request: props.request
            };
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Html5Uploader.prototype.componentDidMount = function componentDidMount() {
        var props = this.props;

        var options = this.getUploadOptions(props);
        this.uploader = new uploader_Uploader(options);
    };

    Html5Uploader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var options = this.getUploadOptions(nextProps);
        this.uploader.setOptions(options);
    };

    Html5Uploader.prototype.componentWillUnmount = function componentWillUnmount() {
        this.abort();
    };

    Html5Uploader.prototype.abort = function abort(file) {
        this.uploader.abort(file);
    };

    Html5Uploader.prototype.startUpload = function startUpload(fileList) {
        this.uploader.startUpload(fileList);
    };

    Html5Uploader.prototype.render = function render() {
        var _props = this.props,
            accept = _props.accept,
            multiple = _props.multiple,
            children = _props.children,
            id = _props.id,
            disabled = _props.disabled,
            dragable = _props.dragable,
            style = _props.style,
            className = _props.className,
            onSelect = _props.onSelect,
            onDragOver = _props.onDragOver,
            onDragLeave = _props.onDragLeave,
            onDrop = _props.onDrop,
            name = _props.name;


        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            selecter_Selecter,
            {
                id: id,
                accept: accept,
                multiple: multiple,
                dragable: dragable,
                disabled: disabled,
                className: className,
                style: style,
                onSelect: onSelect,
                onDragOver: onDragOver,
                onDragLeave: onDragLeave,
                onDrop: onDrop,
                name: name
            },
            children
        );
    };

    return Html5Uploader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), html5_uploader__class.propTypes = extends_default()({}, selecter_Selecter.propTypes, {
    /**
     * 上传的地址
     */
    action: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)
     */
    accept: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 上传额外传参
     */
    data: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 设置上传的请求头部
     */
    headers: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 是否允许请求携带 cookie
     */
    withCredentials: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 上传文件之前
     * @param {Object} file 文件对象
     * @return {Boolean} `false` 停止上传
     */
    beforeUpload: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 正在上传文件的钩子，参数为上传的事件以及文件
     */
    onProgress: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 上传成功回调函数，参数为请求下响应信息以及文件
     */
    onSuccess: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 上传失败回调函数，参数为上传失败的信息、响应信息以及文件
     */
    onError: _prop_types_15_7_2_prop_types_default.a.func,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 上传超时,单位ms
     */
    timeout: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 上传方法
     */
    method: _prop_types_15_7_2_prop_types_default.a.oneOf(['post', 'put']),
    request: _prop_types_15_7_2_prop_types_default.a.func
}), html5_uploader__class.defaultProps = extends_default()({}, selecter_Selecter.defaultProps, {
    name: 'file',
    multiple: false,
    withCredentials: true,
    beforeUpload: func.noop,
    onSelect: func.noop,
    onDragOver: func.noop,
    onDragLeave: func.noop,
    onDrop: func.noop,
    onProgress: func.noop,
    onSuccess: func.noop,
    onError: func.noop,
    onAbort: func.noop,
    method: 'post'
}), html5_uploader__temp2);
html5_uploader_Html5Uploader.displayName = 'Html5Uploader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/iframe-uploader.js





var iframe_uploader__class, iframe_uploader__temp, iframe_uploader__initialiseProps;







var INPUT_STYLE = {
    position: 'absolute',
    top: 0,
    right: 0,
    fontSize: 9999,
    zIndex: 9999,
    opacity: 0,
    outline: 'none',
    cursor: 'pointer'
};

var iframe_uploader_IframeUploader = (iframe_uploader__temp = iframe_uploader__class = function (_React$Component) {
    inherits_default()(IframeUploader, _React$Component);

    function IframeUploader(props) {
        classCallCheck_default()(this, IframeUploader);

        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        iframe_uploader__initialiseProps.call(_this);

        _this.domain = typeof document !== 'undefined' && document.domain ? document.domain : '';
        return _this;
    }

    IframeUploader.prototype.componentDidMount = function componentDidMount() {
        this.updateInputWH();
    };

    IframeUploader.prototype.componentDidUpdate = function componentDidUpdate() {
        this.updateInputWH();
    };

    IframeUploader.prototype.startUpload = function startUpload() {
        this.upload(this.file);
        this.file = {};
    };

    IframeUploader.prototype.upload = function upload(file) {
        var _this2 = this;

        if (!this.state.uploading) {
            // eslint-disable-next-line
            this.state.uploading = true;
            this.setState({ uploading: true });
        }

        var beforeUpload = this.props.beforeUpload;

        if (!beforeUpload) {
            return this.post(file);
        }
        var before = beforeUpload(file);
        if (before && before.then) {
            before.then(function () {
                _this2.post(file);
            }, function () {
                _this2.endUpload();
            });
        } else if (before !== false) {
            this.post(file);
        } else {
            this.endUpload();
        }
    };

    IframeUploader.prototype.endUpload = function endUpload() {
        this.file = {};
        if (this.state.uploading) {
            // eslint-disable-next-line
            this.state.uploading = false;
            this.setState({ uploading: false });
        }
    };

    IframeUploader.prototype.updateInputWH = function updateInputWH() {
        var rootNode = external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default.a.findDOMNode(this);
        var inputNode = this.refs.input;
        inputNode.style.height = rootNode.offsetHeight + 'px';
        inputNode.style.width = rootNode.offsetWidth + 'px';
    };

    IframeUploader.prototype.abort = function abort(file) {
        if (file) {
            var _uid = file;
            if (file && file.uid) {
                _uid = file.uid;
            }
            if (_uid === this.file.uid) {
                this.endUpload();
            }
        } else {
            this.endUpload();
        }
    };

    IframeUploader.prototype.post = function post(file) {
        var formNode = this.refs.form;
        var dataSpan = this.refs.data;

        var data = this.props.data;
        if (typeof data === 'function') {
            data = data(file);
        }

        var inputs = document.createDocumentFragment();
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                var input = document.createElement('input');
                input.setAttribute('name', key);
                input.value = data[key];
                inputs.appendChild(input);
            }
        }
        dataSpan.appendChild(inputs);
        formNode.submit();
        dataSpan.innerHTML = '';
        this.props.onStart(file);
    };

    IframeUploader.prototype.render = function render() {
        var _props = this.props,
            disabled = _props.disabled,
            className = _props.className,
            children = _props.children,
            accept = _props.accept,
            name = _props.name,
            style = _props.style;


        var iframeName = name + '-iframe';

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'span',
            { className: className, style: extends_default()({
                    position: 'relative',
                    zIndex: 0,
                    display: 'inline-block'
                }, style) },
            !disabled ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('iframe', { ref: 'iframe', name: iframeName, onLoad: this.onLoad, style: { display: 'none' } }) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'form',
                { ref: 'form', method: 'post', action: this.props.action, encType: 'multipart/form-data',
                    target: iframeName },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', { ref: 'input', type: 'file', accept: accept, name: name, onChange: this.onSelect,
                    style: INPUT_STYLE }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('input', { name: '_documentDomain', value: this.domain, type: 'hidden' }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('span', { ref: 'data' })
            ),
            children
        );
    };

    return IframeUploader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), iframe_uploader__class.propTypes = {
    style: _prop_types_15_7_2_prop_types_default.a.object,
    action: _prop_types_15_7_2_prop_types_default.a.string.isRequired,
    name: _prop_types_15_7_2_prop_types_default.a.string.isRequired,
    data: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.func]),
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    headers: _prop_types_15_7_2_prop_types_default.a.object,
    autoUpload: _prop_types_15_7_2_prop_types_default.a.bool,
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    beforeUpload: _prop_types_15_7_2_prop_types_default.a.func,
    onStart: _prop_types_15_7_2_prop_types_default.a.func,
    onSuccess: _prop_types_15_7_2_prop_types_default.a.func,
    onError: _prop_types_15_7_2_prop_types_default.a.func,
    accept: _prop_types_15_7_2_prop_types_default.a.string
}, iframe_uploader__class.defaultProps = {
    name: 'file',
    onSelect: func.noop,
    beforeUpload: func.noop,
    onStart: func.noop,
    onSuccess: func.noop,
    onError: func.noop,
    onAbort: func.noop
}, iframe_uploader__initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.state = {
        uploading: false
    };
    this.file = {};

    this.onLoad = function () {
        if (!_this3.state.uploading) {
            return;
        }
        var props = _this3.props,
            file = _this3.file;

        var response = void 0;
        try {
            var doc = _this3.refs.iframe.contentDocument;
            var script = doc.getElementsByTagName('script')[0];
            if (script && script.parentNode === doc.body) {
                doc.body.removeChild(script);
            }
            response = doc.body.innerHTML;
            props.onSuccess(response, file);
        } catch (err) {
            log.warning('cross domain error for Upload. Maybe server should return document.domain script.');
            response = 'cross-domain';
            props.onError(err, null, file);
        }
        _this3.endUpload();
    };

    this.onSelect = function (e) {
        _this3.file = {
            uid: util_uid(),
            name: e.target.value
        };
        _this3.props.onSelect([_this3.file]);
    };
}, iframe_uploader__temp);
iframe_uploader_IframeUploader.displayName = 'IframeUploader';


/* harmony default export */ var iframe_uploader = (iframe_uploader_IframeUploader);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/runtime/index.js








var runtime_Uploader = function (_React$Component) {
    inherits_default()(Uploader, _React$Component);

    function Uploader() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Uploader);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            Component: html5_uploader_Html5Uploader
        }, _this.saveUploaderRef = function (ref) {
            _this.uploaderRef = ref;
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Uploader.prototype.componentDidMount = function componentDidMount() {
        if (typeof File === 'undefined') {
            /* eslint react/no-did-mount-set-state:0 */
            this.setState({
                Component: iframe_uploader
            });
        }
    };

    Uploader.prototype.abort = function abort(file) {
        this.uploaderRef.abort(file);
    };

    Uploader.prototype.startUpload = function startUpload(files) {
        this.uploaderRef.startUpload(files);
    };

    Uploader.prototype.render = function render() {
        var Uploader = this.state.Component;
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(Uploader, extends_default()({}, this.props, { ref: this.saveUploaderRef }));
    };

    return Uploader;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component);

runtime_Uploader.displayName = 'Uploader';

// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/list.js





var list__class, list__temp2;











var list_List = (list__temp2 = list__class = function (_Component) {
    inherits_default()(List, _Component);

    function List() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, List);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleClose = function (file) {
            var _this$props = _this.props,
                onRemove = _this$props.onRemove,
                uploader = _this$props.uploader;


            var remove = onRemove(file);

            func.promiseCall(remove, function () {
                uploader && uploader.removeFile(file);
            });
        }, _this.handleCancel = function (file) {
            var _this$props2 = _this.props,
                onCancel = _this$props2.onCancel,
                uploader = _this$props2.uploader;

            var cancel = onCancel(file);

            func.promiseCall(cancel, function () {
                uploader && uploader.abort(file);
            });
        }, _this.onImageError = function (file, obj) {
            obj.onerror = null;
            _this.props.onImageError(obj, file);
        }, _this.onPreview = function (file, e) {
            _this.props.onPreview(file, e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    List.prototype.componentDidUpdate = function componentDidUpdate() {
        var _this2 = this;

        var _props = this.props,
            listType = _props.listType,
            useDataURL = _props.useDataURL,
            value = _props.value;

        if (listType !== 'image' && listType !== 'card') {
            return;
        }

        useDataURL && value.forEach(function (file) {
            if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File) || file.imgURL !== undefined) {
                return;
            }
            file.imgURL = '';
            previewFile(file.originFileObj, function (previewDataUrl) {
                file.imgURL = previewDataUrl;
                _this2.forceUpdate();
            });
        });
    };

    List.prototype.getInfo = function getInfo(file) {
        var _classNames;

        var prefixCls = this.props.prefix + 'upload';
        var downloadURL = file.downloadURL || file.url;
        var imgURL = file.imgURL || file.url;
        var size = this.sizeCaculator(file.size);
        var itemCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefixCls + '-list-item'] = true, _classNames[prefixCls + '-list-item-' + file.state] = file.state, _classNames[prefixCls + '-list-item-error-with-msg'] = file.state === 'error' && file.errorMsg, _classNames));
        var alt = file.name || file.alt;
        return { prefixCls: prefixCls, downloadURL: downloadURL, imgURL: imgURL, size: size, itemCls: itemCls, alt: alt };
    };
    // transfer size from number to xx K/ XxxM / xxG


    List.prototype.sizeCaculator = function sizeCaculator(size) {
        var fileSize = parseFloat(size, 10);
        // fileSize为浮点数 用 < 0.000001 替代 === 0
        if (isNaN(fileSize) || fileSize < 0.0000001) {
            return 0;
        }
        var SIZE_SUFFIX = ['B', 'K', 'M', 'G', 'T', 'P'];
        var suffixIndex = 0;

        // 在Mac上实验发现 取1024造成显示的大小和实际大小不一致
        // 因为单位制不同 见 https://superuser.com/questions/938234/size-of-files-in-windows-os-its-kb-or-kb
        var BIT_NUMBER_SYSTEM = 1024;
        while (fileSize >= BIT_NUMBER_SYSTEM && suffixIndex < SIZE_SUFFIX.length) {
            suffixIndex++;
            fileSize /= BIT_NUMBER_SYSTEM;
        }

        var suffix = SIZE_SUFFIX[suffixIndex];
        fileSize = fileSize.toFixed(2);

        return '' + fileSize + suffix;
    };

    List.prototype.getTextList = function getTextList(file) {
        var _this3 = this;

        var _props2 = this.props,
            extraRender = _props2.extraRender,
            progressProps = _props2.progressProps;

        var _getInfo = this.getInfo(file),
            prefixCls = _getInfo.prefixCls,
            downloadURL = _getInfo.downloadURL,
            size = _getInfo.size,
            itemCls = _getInfo.itemCls;

        var onClick = function onClick() {
            return file.state === 'uploading' ? _this3.handleCancel(file) : _this3.handleClose(file);
        };
        var onKeyDown = function onKeyDown(e) {
            if (e.keyCode === KEYCODE.ENTER) {
                onClick();
            }
        };
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: itemCls, key: file.uid || file.name },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-name-wrap' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'a',
                    { href: downloadURL, target: '_blank', style: { pointerEvents: downloadURL ? '' : 'none' },
                        className: prefixCls + '-list-item-name' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'span',
                        null,
                        file.name
                    ),
                    !!size && external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'span',
                        { className: prefixCls + '-list-item-size' },
                        '(',
                        size,
                        ')'
                    ),
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'span',
                        { className: prefixCls + '-extra' },
                        extraRender(file)
                    )
                )
            ),
            file.state === 'uploading' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-progress' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress, extends_default()({ size: 'medium', percent: file.percent, textRender: func.noop }, progressProps))
            ) : null,
            file.state === 'error' && file.errorMsg ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-error-msg' },
                file.errorMsg
            ) : null,
            this.props.closable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close',
                size: 'large',
                role: 'button',
                tabIndex: '0',
                onClick: onClick,
                onKeyDown: onKeyDown }) : null
        );
    };

    List.prototype.getImageList = function getImageList(file) {
        var _this4 = this;

        var _props3 = this.props,
            extraRender = _props3.extraRender,
            progressProps = _props3.progressProps;

        var _getInfo2 = this.getInfo(file),
            prefixCls = _getInfo2.prefixCls,
            downloadURL = _getInfo2.downloadURL,
            imgURL = _getInfo2.imgURL,
            size = _getInfo2.size,
            itemCls = _getInfo2.itemCls,
            alt = _getInfo2.alt;

        var img = null;

        var onClick = function onClick() {
            return file.state === 'uploading' ? _this4.handleCancel(file) : _this4.handleClose(file);
        };
        var onKeyDown = function onKeyDown(e) {
            if (e.keyCode === KEYCODE.ENTER) {
                onClick();
            }
        };

        if (file.state === 'uploading' || file.state === 'selected' && !imgURL) {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'picture' });
        } else if (file.state === 'error') {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'cry' });
        } else {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('img', { src: imgURL, onError: this.onImageError.bind(this, file), tabIndex: '0', alt: alt, onClick: this.onPreview.bind(this, file) });
        }

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: itemCls, key: file.uid || file.name },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-thumbnail' },
                img
            ),
            this.props.closable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'close', size: 'large', tabIndex: '0', role: 'button', onClick: onClick, onKeyDown: onKeyDown }) : null,
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'a',
                { href: downloadURL, target: '_blank', style: { pointerEvents: downloadURL ? '' : 'none' }, className: prefixCls + '-list-item-name' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    null,
                    file.name
                ),
                !!size && external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefixCls + '-list-item-size' },
                    '(',
                    size,
                    ')'
                ),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefixCls + '-extra' },
                    extraRender(file)
                )
            ),
            file.state === 'uploading' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-progress' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress, extends_default()({ size: 'medium', percent: file.percent, textRender: func.noop }, progressProps))
            ) : null,
            file.state === 'error' && file.errorMsg ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-error-msg' },
                file.errorMsg
            ) : null
        );
    };

    List.prototype.getPictureCardList = function getPictureCardList(file) {
        var _this5 = this;

        var _props4 = this.props,
            locale = _props4.locale,
            progressProps = _props4.progressProps;

        var _getInfo3 = this.getInfo(file),
            prefixCls = _getInfo3.prefixCls,
            downloadURL = _getInfo3.downloadURL,
            imgURL = _getInfo3.imgURL,
            itemCls = _getInfo3.itemCls,
            alt = _getInfo3.alt;

        var img = null;

        if (file.state === 'uploading' || file.state === 'selected' && !imgURL) {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-handler' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'picture' }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    es_button,
                    { text: true, onClick: function onClick() {
                            return _this5.handleCancel(file);
                        } },
                    locale.card.cancel
                )
            );
        } else if (file.state === 'error') {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-handler' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'cry' })
            );
        } else {
            img = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement('img', { src: imgURL, tabIndex: '0', alt: alt, onError: this.onImageError.bind(this, file), onClick: this.onPreview.bind(this, file) });
        }

        var onClose = function onClose() {
            return _this5.handleClose(file);
        };
        var onKeyDownClose = function onKeyDownClose(e) {
            if (e.keyCode === KEYCODE.ENTER) {
                onClose();
            }
        };
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: itemCls, key: file.uid || file.name },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: prefixCls + '-list-item-wrapper' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefixCls + '-list-item-thumbnail' },
                    img
                ),
                file.state === 'uploading' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { className: prefixCls + '-list-item-progress' },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(progress, extends_default()({ size: 'medium', percent: file.percent, textRender: func.noop }, progressProps))
                ) : null,
                file.state !== 'uploading' ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'span',
                    { className: prefixCls + '-tool ' + (!this.props.closable ? '`${prefixCls}-noclose' : '') },
                    external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'a',
                        { href: downloadURL, target: '_blank', tabIndex: downloadURL ? '0' : '-1', style: { pointerEvents: downloadURL ? '' : 'none' } },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: downloadURL ? 'download' : '', className: prefixCls + '-tool-download-icon' })
                    ),
                    this.props.closable ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                        'span',
                        { className: prefixCls + '-tool-close' },
                        external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'ashbin', tabIndex: '0', role: 'button', onClick: onClose, onKeyDown: onKeyDownClose })
                    ) : null
                ) : ''
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'span',
                { className: prefixCls + '-list-item-name' },
                file.name
            )
        );
    };

    List.prototype.render = function render() {
        var _this6 = this,
            _classNames2;

        var _props5 = this.props,
            listType = _props5.listType,
            children = _props5.children,
            prefix = _props5.prefix;

        var prefixCls = prefix + 'upload';

        var list = this.props.value.map(function (file) {
            if (listType === 'text') {
                return _this6.getTextList(file);
            } else if (listType === 'image') {
                return _this6.getImageList(file);
            } else if (listType === 'card') {
                return _this6.getPictureCardList(file);
            }
            return null;
        });
        var listclassNames = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefixCls + '-list'] = true, _classNames2[prefixCls + '-list-' + this.props.listType] = true, _classNames2));

        var others = util_obj.pickAttrsWith(this.props, 'data-');
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({}, others, { className: listclassNames }),
            list,
            children
        );
    };

    return List;
}(external___root___React___commonjs2___react___commonjs___react___amd___react__["Component"]), list__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 多语言
     */
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 文件列表，数据格式请参考 文件对象
     */
    listType: _prop_types_15_7_2_prop_types_default.a.oneOf(['text', 'image', 'card']),
    /**
     * 文件列表
     */
    value: _prop_types_15_7_2_prop_types_default.a.array,
    closable: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 删除文件回调(支持Promise)
     */
    onRemove: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 取消上传回调(支持Promise)
     */
    onCancel: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 头像加载出错回调
     */
    onImageError: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * listType=card时点击图片回调
     */
    onPreview: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义额外渲染
     */
    extraRender: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 透传给Progress props
     */
    progressProps: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    uploader: _prop_types_15_7_2_prop_types_default.a.any,
    useDataURL: _prop_types_15_7_2_prop_types_default.a.bool
}, list__class.defaultProps = {
    prefix: 'next-',
    listType: 'text',
    value: [],
    locale: zh_cn.Upload,
    closable: false,
    onRemove: func.noop,
    onCancel: func.noop,
    extraRender: func.noop,
    onImageError: func.noop,
    onPreview: func.noop,
    progressProps: {}
}, list__temp2);
list_List.displayName = 'List';


/* harmony default export */ var upload_list = (list_List);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/upload.js






var upload__class, upload__temp, upload__initialiseProps;












var upload_noop = func.noop;

/**
 * Upload
 */
var upload_Upload = (upload__temp = upload__class = function (_Base) {
    inherits_default()(Upload, _Base);

    function Upload(props) {
        classCallCheck_default()(this, Upload);

        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        upload__initialiseProps.call(_this);

        var value = void 0;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }

        _this.state = {
            value: typeof value === 'undefined' ? [] : [].concat(value)
        };

        _this.uploading = false;
        return _this;
    }

    Upload.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps && !this.uploading) {
            this.setState({
                value: typeof nextProps.value === 'undefined' ? [] : [].concat(nextProps.value)
            });
        }
    };

    /**
     * 对外暴露API, 添加文件
     * @param files
     */
    Upload.prototype.selectFiles = function selectFiles(files) {
        var filesArr = files.length ? Array.prototype.slice.call(files) : [files];

        this.onSelect(filesArr);
    };

    Upload.prototype.uploadFiles = function uploadFiles(files) {
        var fileList = files.filter(function (file) {
            if (file.state === 'selected') {
                file.state = 'uploading';
                return true;
            }
            return false;
        }).map(function (file) {
            return file.originFileObj;
        });

        fileList.length && this.uploaderRef.startUpload(fileList);
    };

    /**
     * 对外暴露api，控制文件上传
     */


    Upload.prototype.startUpload = function startUpload() {
        this.uploadFiles(this.state.value);
    };

    Upload.prototype.replaceFiles = function replaceFiles(old, current) {
        var targetItem = getFileItem(old, this.state.value);
        if (!targetItem) {
            return;
        }

        current.uid = old.uid;
        targetItem.originFileObj = current;
    };

    Upload.prototype.isUploading = function isUploading() {
        return this.uploading;
    };

    /**
     * 删除文件
     * @param {File} file
     * @return {void}
     */


    /**
     * 取消上传
     * @param {File} file
     * @return {void}
     */


    Upload.prototype.render = function render() {
        var _classNames, _classNames2;

        var _props = this.props,
            listType = _props.listType,
            prefix = _props.prefix,
            dragable = _props.dragable,
            shape = _props.shape,
            className = _props.className,
            style = _props.style,
            useDataURL = _props.useDataURL,
            disabled = _props.disabled,
            limit = _props.limit,
            closable = _props.closable,
            beforeUpload = _props.beforeUpload,
            readonly = _props.readonly,
            onRemove = _props.onRemove,
            onCancel = _props.onCancel,
            onPreview = _props.onPreview,
            list = _props.list,
            extraRender = _props.extraRender,
            progressProps = _props.progressProps,
            others = objectWithoutProperties_default()(_props, ['listType', 'prefix', 'dragable', 'shape', 'className', 'style', 'useDataURL', 'disabled', 'limit', 'closable', 'beforeUpload', 'readonly', 'onRemove', 'onCancel', 'onPreview', 'list', 'extraRender', 'progressProps']);

        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'upload'] = true, _classNames[prefix + 'disabled'] = disabled, _classNames[prefix + 'readonly'] = readonly, _classNames[className] = className, _classNames));

        var isExceedLimit = this.state.value.length >= limit;
        var innerCls = _classnames_2_2_6_classnames_default()((_classNames2 = {}, _classNames2[prefix + 'upload-inner'] = true, _classNames2[prefix + 'hidden'] = isExceedLimit, _classNames2));

        var children = this.props.children;
        if (shape === 'card') {
            var _classNames3;

            var cardCls = _classnames_2_2_6_classnames_default()((_classNames3 = {}, _classNames3[prefix + 'upload-card'] = true, _classNames3[prefix + 'disabled'] = disabled, _classNames3));
            children = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'div',
                { className: cardCls },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'add', size: 'large' }),
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                    'div',
                    { tabIndex: '0', role: 'button', className: prefix + 'upload-text' },
                    children
                )
            );
        }

        // disabled 状态下把 remove函数替换成禁止 remove的函数
        var onRemoveFunc = disabled ? func.prevent : onRemove;
        var otherAttributes = util_obj.pickAttrsWith(this.props, 'data-');
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            extends_default()({ className: cls, style: style }, otherAttributes),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                runtime_Uploader,
                extends_default()({}, others, {
                    beforeUpload: beforeUpload,
                    dragable: dragable,
                    disabled: disabled || isExceedLimit,
                    className: innerCls,
                    onSelect: this.onSelect,
                    onDrop: this.onDrop,
                    onProgress: this.onProgress,
                    onSuccess: this.onSuccess,
                    onError: this.onError,
                    ref: this.saveUploaderRef
                }),
                children
            ),
            listType || list ? external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(upload_list, { useDataURL: useDataURL, uploader: this, listType: listType, value: this.state.value,
                closable: closable, onRemove: onRemoveFunc, progressProps: progressProps,
                onCancel: onCancel, onPreview: onPreview, extraRender: extraRender }) : null
        );
    };

    return Upload;
}(upload_base_Base), upload__class.displayName = 'Upload', upload__class.propTypes = extends_default()({}, html5_uploader_Html5Uploader.propTypes, upload_list.propTypes, {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string.isRequired,
    /**
     * 上传的地址
     */
    action: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 文件列表
     */
    value: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 默认文件列表
     */
    defaultValue: _prop_types_15_7_2_prop_types_default.a.array,
    /**
     * 上传按钮形状
     */
    shape: _prop_types_15_7_2_prop_types_default.a.oneOf(['card']),
    /**
     * 上传列表的样式
     * @enumdesc 文字, 图文, 卡片
     */
    listType: _prop_types_15_7_2_prop_types_default.a.oneOf(['text', 'image', 'card']),
    list: _prop_types_15_7_2_prop_types_default.a.any,
    /**
     * 文件名字段
     */
    name: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 上传额外传参
     */
    data: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.object, _prop_types_15_7_2_prop_types_default.a.func]),
    /**
     * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)
     * @param {Object} response 返回
     * @param {File} file 文件对象
     */
    formatter: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 最大文件上传个数
     */
    limit: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 设置上传超时,单位ms
     */
    timeout: _prop_types_15_7_2_prop_types_default.a.number,
    /**
     * 可选参数，是否支持拖拽上传，`ie10+` 支持。
     */
    dragable: _prop_types_15_7_2_prop_types_default.a.bool,
    closable: _prop_types_15_7_2_prop_types_default.a.bool,
    useDataURL: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 可选参数，是否禁用上传功能
     */
    disabled: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 选择文件回调
     */
    onSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 上传中
     */
    onProgress: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 上传文件改变时的状态
     * @param {Object} info 文件事件对象
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件
     * @param {Object} file 文件
     * @param {Array<Object>} value 值
     */
    onSuccess: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.
     * @param {Object} file
     * @returns {Boolean} 返回false会阻止上传,其他则表示正常
     */
    afterSelect: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 移除文件回调函数
     * @param {Object} file 文件
     * @returns {Boolean|Promise} 返回 false、Promise.resolve(false)、 Promise.reject() 将阻止文件删除
     */
    onRemove: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件
     * @param {Object} file 出错的文件
     * @param {Array} value 当前值
     */
    onError: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 可选参数, 详见 [beforeUpload](#beforeUpload)
     * @param {Object} file 所有文件
     * @param {Object} options 参数
     * @returns {Boolean|Object|Promise} 返回值作用见demo
     */
    beforeUpload: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 放文件
     */
    onDrop: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 自定义class
     */
    className: _prop_types_15_7_2_prop_types_default.a.string,
    /**
     * 自定义内联样式
     */
    style: _prop_types_15_7_2_prop_types_default.a.object,
    /**
     * 子元素
     */
    children: _prop_types_15_7_2_prop_types_default.a.node,
    /**
     * 自动上传
     */
    autoUpload: _prop_types_15_7_2_prop_types_default.a.bool,
    /**
     * 自定义上传方法
     * @param {Object} option
     * @return {Object} object with abort method
     */
    request: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 透传给Progress props
     */
    progressProps: _prop_types_15_7_2_prop_types_default.a.object
}), upload__class.defaultProps = extends_default()({}, html5_uploader_Html5Uploader.defaultProps, {
    prefix: 'next-',
    limit: Infinity,
    autoUpload: true,
    closable: true,
    onSelect: upload_noop,
    onProgress: upload_noop,
    onChange: upload_noop,
    onSuccess: upload_noop,
    onRemove: upload_noop,
    onError: upload_noop,
    onDrop: upload_noop,
    beforeUpload: upload_noop,
    afterSelect: upload_noop
}), upload__initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.onSelect = function (files) {
        var _props2 = _this2.props,
            autoUpload = _props2.autoUpload,
            afterSelect = _props2.afterSelect,
            onSelect = _props2.onSelect,
            limit = _props2.limit;
        // 总数

        var total = _this2.state.value.length + files.length;
        // 差额
        var less = limit - _this2.state.value.length;
        if (less <= 0) {
            // 差额不足 则不上传
            return;
        }

        var fileList = files.map(function (file) {
            var objFile = fileToObject(file);
            objFile.state = 'selected';
            return objFile;
        });

        // 默认全量上传
        var uploadFiles = fileList;
        var discardFiles = [];
        if (total > limit) {
            // 全量上传总数会超过limit 但是 还有差额
            uploadFiles = fileList.slice(0, less);
            discardFiles = fileList.slice(less);
        }

        var value = _this2.state.value.concat(fileList);

        /* eslint-disable-next */
        _this2.state.value = value;

        if (autoUpload) {
            _this2.uploadFiles(uploadFiles);
        }

        onSelect(uploadFiles, value);
        discardFiles.forEach(function (file) {
            // 丢弃的文件
            var err = new Error(errorCode.EXCEED_LIMIT);
            err.code = errorCode.EXCEED_LIMIT;
            _this2.onError(err, null, file);
        });

        if (!autoUpload) {
            uploadFiles.forEach(function (file) {
                var isPassed = afterSelect(file);
                func.promiseCall(isPassed, func.noop, function (error) {
                    _this2.onError(error, null, file); // TODO: handle error message
                });
            });
            _this2.onChange(value, uploadFiles);
        }
    };

    this.onDrop = function (files) {
        _this2.onSelect(files);
    };

    this.onProgress = function (e, file) {
        _this2.uploading = true;

        var value = _this2.state.value;
        var targetItem = getFileItem(file, value);

        if (!targetItem) {
            return;
        }

        extends_default()(targetItem, {
            state: 'uploading',
            percent: e.percent
        });

        _this2.setState({
            value: value
        });

        _this2.props.onProgress(value, targetItem);
    };

    this.onSuccess = function (response, file) {
        _this2.uploading = false;

        var formatter = _this2.props.formatter;


        if (formatter) {
            response = formatter(response, file);
        }

        try {
            if (typeof response === 'string') {
                response = JSON.parse(response);
            }
        } catch (e) {
            e.code = errorCode.RESPONSE_FAIL;
            return _this2.onError(e, response, file);
        }

        if (response.success === false) {
            var err = new Error(response.message || errorCode.RESPONSE_FAIL);
            err.code = errorCode.RESPONSE_FAIL;
            return _this2.onError(err, response, file);
        }

        var value = _this2.state.value;
        var targetItem = getFileItem(file, value);

        if (!targetItem) {
            return;
        }

        extends_default()(targetItem, {
            state: 'done',
            response: response,
            url: response.url,
            downloadURL: response.downloadURL || response.url // 下载地址(可选)
        });

        if (!_this2.props.useDataURL) {
            targetItem.imgURL = response.imgURL || response.url; // 缩略图地址(可选)
        }

        _this2.props.onSuccess(targetItem, value);
        _this2.onChange(value, targetItem);
    };

    this.onError = function (err, response, file) {
        _this2.uploading = false;

        var value = _this2.state.value;
        var targetItem = getFileItem(file, value);

        if (!targetItem) {
            return;
        }

        extends_default()(targetItem, {
            state: 'error',
            error: err,
            response: response
        });

        _this2.props.onError(targetItem, value);
        _this2.onChange(value, targetItem);
    };

    this.removeFile = function (file) {
        file.state = 'removed';
        _this2.uploaderRef.abort(file); // 删除组件时调用组件的 `abort` 方法中断上传

        var fileList = _this2.state.value;
        var targetItem = getFileItem(file, fileList);
        var index = fileList.indexOf(targetItem);
        if (index !== -1) {
            fileList.splice(index, 1);
            _this2.onChange(fileList, targetItem);
        }
    };

    this.abort = function (file) {
        var fileList = _this2.state.value;
        var targetItem = getFileItem(file, fileList);
        var index = fileList.indexOf(targetItem);
        if (index !== -1) {
            fileList.splice(index, 1);
            _this2.onChange(fileList, targetItem);
        }
        _this2.uploaderRef.abort(file); // 取消上传时调用组件的 `abort` 方法中断上传
    };

    this.onChange = function (value, file) {
        _this2.setState({
            value: value
        });
        _this2.props.onChange(value, file);
    };
}, upload__temp);


/* harmony default export */ var upload_upload = (upload_Upload);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/card.js





var upload_card__class, upload_card__temp, card__initialiseProps;










/**
 * Upload.Card
 * @description 继承 Upload 的 API，除非特别说明
 */
var upload_card_Card = (upload_card__temp = upload_card__class = function (_Base) {
    inherits_default()(Card, _Base);

    function Card(props) {
        classCallCheck_default()(this, Card);

        var _this = possibleConstructorReturn_default()(this, _Base.call(this, props));

        card__initialiseProps.call(_this);

        var value = void 0;
        /* istanbul ignore else */
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }

        _this.state = {

            value: typeof value === 'undefined' ? /* istanbul ignore next */[] : value,
            uploaderRef: _this.uploaderRef
        };
        return _this;
    }
    /* eslint react/no-did-mount-set-state: [0] */


    Card.prototype.componentDidMount = function componentDidMount() {
        this.setState({ uploaderRef: this.uploaderRef });
    };

    Card.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        /* istanbul ignore if */
        if ('value' in nextProps) {
            this.setState({
                value: typeof nextProps.value === 'undefined' ? [] : nextProps.value
            });
        }
    };

    Card.prototype.isUploading = function isUploading() {
        return this.state.uploaderRef.isUploading();
    };

    Card.prototype.saveRef = function saveRef(ref) {
        this.saveUploaderRef(ref);
    };

    Card.prototype.render = function render() {
        var _classNames,
            _this2 = this;

        var _props = this.props,
            action = _props.action,
            disabled = _props.disabled,
            prefix = _props.prefix,
            locale = _props.locale,
            className = _props.className,
            style = _props.style,
            limit = _props.limit,
            onPreview = _props.onPreview,
            onRemove = _props.onRemove,
            onCancel = _props.onCancel,
            timeout = _props.timeout;


        var isExceedLimit = this.state.value.length >= limit;
        var uploadButtonCls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames[prefix + 'upload-list-item'] = true, _classNames[prefix + 'hidden'] = isExceedLimit, _classNames));

        var children = this.props.children || locale.card.addPhoto;

        var onRemoveFunc = disabled ? func.prevent : onRemove;
        var othersForList = util_obj.pickOthers(Card.propTypes, this.props);
        var othersForUpload = util_obj.pickOthers(upload_list.propTypes, othersForList);
        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            upload_list,
            extends_default()({ className: className,
                style: style,
                listType: 'card',
                closable: true,
                locale: locale,
                value: this.state.value,
                onRemove: onRemoveFunc,
                onCancel: onCancel,
                onPreview: onPreview,
                uploader: this.state.uploaderRef
            }, othersForList),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                upload_upload,
                extends_default()({}, othersForUpload, {
                    shape: 'card',
                    disabled: disabled,
                    action: action,
                    timeout: timeout,
                    value: this.state.value,
                    onProgress: this.onProgress,
                    onChange: this.onChange,
                    ref: function ref(_ref) {
                        return _this2.saveRef(_ref);
                    },
                    className: uploadButtonCls
                }),
                children
            )
        );
    };

    return Card;
}(upload_base_Base), upload_card__class.displayName = 'Card', upload_card__class.propTypes = {
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    children: _prop_types_15_7_2_prop_types_default.a.object,
    value: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.array, _prop_types_15_7_2_prop_types_default.a.object]),
    defaultValue: _prop_types_15_7_2_prop_types_default.a.oneOfType([_prop_types_15_7_2_prop_types_default.a.array, _prop_types_15_7_2_prop_types_default.a.object]),
    /**
     * 点击图片回调
     */
    onPreview: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 改变时候的回调
     */
    onChange: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 点击移除的回调
     */
    onRemove: _prop_types_15_7_2_prop_types_default.a.func,
    /**
     * 取消上传的回调
     */
    onCancel: _prop_types_15_7_2_prop_types_default.a.func
}, upload_card__class.defaultProps = {
    prefix: 'next-',
    locale: zh_cn.Upload,
    onChange: func.noop,
    onPreview: func.noop
}, card__initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.onProgress = function (value) {
        _this3.setState({
            value: value
        });
    };

    this.onChange = function (value, file) {
        if (!('value' in _this3.props)) {
            _this3.setState({
                value: value
            });
        }
        _this3.props.onChange(value, file);
    };
}, upload_card__temp);


/* harmony default export */ var upload_card = (upload_card_Card);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/dragger.js






var dragger__class, dragger__temp2;









/**
 * Upload.Drager
 * @description IE10+ 支持。继承 Upload 的 API，除非特别说明
 */
var dragger_Dragger = (dragger__temp2 = dragger__class = function (_React$Component) {
    inherits_default()(Dragger, _React$Component);

    function Dragger() {
        var _temp, _this, _ret;

        classCallCheck_default()(this, Dragger);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = possibleConstructorReturn_default()(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
            dragOver: false
        }, _this.onDragOver = function (e) {
            _this.setState({
                dragOver: true
            });
            _this.props.onDragOver(e);
        }, _this.onDragLeave = function (e) {
            _this.setState({
                dragOver: false
            });
            _this.props.onDragLeave(e);
        }, _this.onDrop = function (e) {
            _this.setState({
                dragOver: false
            });
            _this.props.onDrop(e);
        }, _temp), possibleConstructorReturn_default()(_this, _ret);
    }

    Dragger.prototype.render = function render() {
        var _classNames;

        var _props = this.props,
            className = _props.className,
            style = _props.style,
            shape = _props.shape,
            locale = _props.locale,
            prefix = _props.prefix,
            listType = _props.listType,
            others = objectWithoutProperties_default()(_props, ['className', 'style', 'shape', 'locale', 'prefix', 'listType']);

        var prefixCls = prefix + 'upload-drag';
        var cls = _classnames_2_2_6_classnames_default()((_classNames = {}, _classNames['' + prefixCls] = true, _classNames[prefixCls + '-over'] = this.state.dragOver, _classNames[className] = !!className, _classNames));

        var children = this.props.children || external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            'div',
            { className: cls },
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'p',
                { className: prefixCls + '-icon' },
                external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_icon, { type: 'upload', size: 'large' })
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'p',
                { className: prefixCls + '-text' },
                locale.drag.text
            ),
            external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
                'p',
                { className: prefixCls + '-hint' },
                locale.drag.hint
            )
        );

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(
            upload_upload,
            extends_default()({}, others, {
                prefix: prefix,
                shape: shape,
                listType: listType,
                dragable: true,
                style: style,
                onDragOver: this.onDragOver,
                onDragLeave: this.onDragLeave,
                onDrop: this.onDrop,
                ref: this.saveUploaderRef
            }),
            children
        );
    };

    return Dragger;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component), dragger__class.propTypes = {
    /**
     * 样式前缀
     */
    prefix: _prop_types_15_7_2_prop_types_default.a.string,
    locale: _prop_types_15_7_2_prop_types_default.a.object,
    shape: _prop_types_15_7_2_prop_types_default.a.string,
    onDragOver: _prop_types_15_7_2_prop_types_default.a.func,
    onDragLeave: _prop_types_15_7_2_prop_types_default.a.func,
    onDrop: _prop_types_15_7_2_prop_types_default.a.func,
    limit: _prop_types_15_7_2_prop_types_default.a.number,
    className: _prop_types_15_7_2_prop_types_default.a.string,
    style: _prop_types_15_7_2_prop_types_default.a.object,
    defaultValue: _prop_types_15_7_2_prop_types_default.a.array,
    children: _prop_types_15_7_2_prop_types_default.a.node,
    listType: _prop_types_15_7_2_prop_types_default.a.string,
    timeout: _prop_types_15_7_2_prop_types_default.a.number
}, dragger__class.defaultProps = {
    prefix: 'next-',
    onDragOver: func.noop,
    onDragLeave: func.noop,
    onDrop: func.noop,
    locale: zh_cn.Upload
}, dragger__temp2);
dragger_Dragger.displayName = 'Dragger';


/* harmony default export */ var dragger = (dragger_Dragger);
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/upload/index.js
















upload_upload.Card = config_provider.config(upload_card, { componentName: 'Upload' });
upload_upload.Dragger = config_provider.config(dragger, { componentName: 'Upload' });
upload_upload.Selecter = selecter_Selecter;
upload_upload.Uploader = uploader_Uploader;
upload_upload.ErrorCode = errorCode;
// compatible with 0.x version
/* istanbul ignore next */
function upload__transform(props, deprecated) {
    var listType = props.listType,
        defaultFileList = props.defaultFileList,
        fileList = props.fileList,
        others = objectWithoutProperties_default()(props, ['listType', 'defaultFileList', 'fileList']);

    var newprops = others;

    if (listType === 'text-image') {
        deprecated('listType=text-image', 'listType=image', 'Upload');
        newprops.listType = 'image';
    } else if (listType === 'picture-card') {
        deprecated('listType=picture-card', 'listType=card', 'Upload');
        newprops.listType = 'card';
    } else {
        newprops.listType = listType;
    }

    if ('defaultFileList' in props) {
        deprecated('defaultFileList', 'defaultValue', 'Upload');
        newprops.defaultValue = defaultFileList;
    }

    if ('fileList' in props) {
        deprecated('fileList', 'value', 'Upload');
        newprops.value = fileList;
    }

    return newprops;
}

// compatible with 0.x version
upload_upload.ImageUpload = config_provider.config(upload_card, {
    componentName: 'Upload',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Upload.ImageUpload', 'Upload.Card', 'Upload');
        var newprops = upload__transform(props, function () {});
        if (newprops.locale && newprops.locale.image) {
            newprops.locale.card = newprops.locale.image;
        }

        return newprops;
    }
});

// compatible with 0.x version
upload_upload.DragUpload = config_provider.config(dragger, {
    componentName: 'Upload',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Upload.DragUpload', 'Upload.Dragger', 'Upload');
        var newprops = upload__transform(props, function () {});
        if (!newprops.listType) {
            newprops.listType = 'card';
        }

        return newprops;
    }
});

// compatible with 0.x version
/* istanbul ignore next */
upload_upload.Core = function (_React$Component) {
    inherits_default()(Core, _React$Component);

    function Core(props) {
        classCallCheck_default()(this, Core);

        // eslint-disable-next-line
        var _this = possibleConstructorReturn_default()(this, _React$Component.call(this, props));

        _this.handleSelect = function (files) {
            _this.uploader.startUpload(files);
        };

        var _this$props = _this.props,
            action = _this$props.action,
            name = _this$props.name,
            method = _this$props.method,
            beforeUpload = _this$props.beforeUpload,
            onProgress = _this$props.onProgress,
            onError = _this$props.onError,
            withCredentials = _this$props.withCredentials,
            headers = _this$props.headers,
            data = _this$props.data,
            onSuccess = _this$props.onSuccess;


        _this.uploader = new uploader_Uploader({
            action: action,
            name: name,
            method: method,
            beforeUpload: beforeUpload,
            onProgress: onProgress,
            onError: onError,
            withCredentials: withCredentials,
            headers: headers,
            data: data,
            onSuccess: onSuccess
        });
        return _this;
    }

    Core.prototype.abort = function abort() {
        this.uploader.abort();
    };

    Core.prototype.render = function render() {
        log.deprecated('Upload.Core', 'Upload.Selecter and Upload.Uploader', 'Upload');

        // eslint-disable-next-line

        var _props = this.props,
            action = _props.action,
            name = _props.name,
            method = _props.method,
            beforeUpload = _props.beforeUpload,
            onProgress = _props.onProgress,
            onError = _props.onError,
            withCredentials = _props.withCredentials,
            headers = _props.headers,
            data = _props.data,
            onSuccess = _props.onSuccess,
            others = objectWithoutProperties_default()(_props, ['action', 'name', 'method', 'beforeUpload', 'onProgress', 'onError', 'withCredentials', 'headers', 'data', 'onSuccess']);

        var props = others;

        return external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(selecter_Selecter, extends_default()({}, upload__transform(props, function () {}), { onSelect: this.handleSelect }));
    };

    return Core;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component);

// compatible with 0.x version
upload_upload.List = config_provider.config(upload_list, {
    componentName: 'Upload',
    transform: upload__transform
});

// compatible with 0.x version
/* istanbul ignore next */
upload_upload.CropUpload = function () {
    log.deprecated('Upload.CropUpload', '@alife/bc-next-crop-upload', 'Upload');
    return null;
};

/* harmony default export */ var es_upload = (config_provider.config(upload_upload, {
    transform: upload__transform
}));
// CONCATENATED MODULE: ./node_modules/_@alifd_next@1.12.8@@alifd/next/es/index.js
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Affix", function() { return affix; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Animate", function() { return es_animate; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Badge", function() { return badge; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Balloon", function() { return balloon; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Breadcrumb", function() { return breadcrumb; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Button", function() { return es_button; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Calendar", function() { return es_calendar; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Card", function() { return card; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Cascader", function() { return cascader; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "CascaderSelect", function() { return cascader_select; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Checkbox", function() { return es_checkbox; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Collapse", function() { return es_collapse; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ConfigProvider", function() { return config_provider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "DatePicker", function() { return date_picker; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Dialog", function() { return dialog; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Dropdown", function() { return dropdown; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Field", function() { return es_field; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Form", function() { return es_form; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Grid", function() { return grid; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Icon", function() { return es_icon; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Input", function() { return es_input; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Loading", function() { return es_loading; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Menu", function() { return es_menu; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MenuButton", function() { return menu_button; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Message", function() { return es_message; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Nav", function() { return es_nav; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "NumberPicker", function() { return number_picker; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Overlay", function() { return es_overlay; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Pagination", function() { return es_pagination; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Paragraph", function() { return paragraph; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Progress", function() { return progress; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Radio", function() { return es_radio; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Range", function() { return es_range; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Rating", function() { return rating; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Search", function() { return search; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Select", function() { return es_select; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Slider", function() { return es_slider; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "SplitButton", function() { return split_button; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Step", function() { return es_step; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Switch", function() { return es_switch; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Tab", function() { return es_tab; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Table", function() { return es_table; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Tag", function() { return es_tag; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TimePicker", function() { return time_picker; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Timeline", function() { return es_timeline; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Transfer", function() { return es_transfer; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Tree", function() { return es_tree; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "TreeSelect", function() { return tree_select; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Upload", function() { return es_upload; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "VirtualList", function() { return virtual_list; });



















































/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(61), __esModule: true };

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(62);
module.exports = __webpack_require__(12).Object.assign;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(20);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(64) });


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(24);
var gOPS = __webpack_require__(34);
var pIE = __webpack_require__(27);
var toObject = __webpack_require__(46);
var IObject = __webpack_require__(44);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(22)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(18);
var toLength = __webpack_require__(66);
var toAbsoluteIndex = __webpack_require__(67);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(30);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(30);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(69), __esModule: true };

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(70);
__webpack_require__(76);
module.exports = __webpack_require__(38).f('iterator');


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(71)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(47)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(30);
var defined = __webpack_require__(29);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(36);
var descriptor = __webpack_require__(23);
var setToStringTag = __webpack_require__(37);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(14)(IteratorPrototype, __webpack_require__(19)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(15);
var anObject = __webpack_require__(21);
var getKeys = __webpack_require__(24);

module.exports = __webpack_require__(17) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(11).document;
module.exports = document && document.documentElement;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(13);
var toObject = __webpack_require__(46);
var IE_PROTO = __webpack_require__(31)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77);
var global = __webpack_require__(11);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(35);
var TO_STRING_TAG = __webpack_require__(19)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(78);
var step = __webpack_require__(79);
var Iterators = __webpack_require__(35);
var toIObject = __webpack_require__(18);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(47)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(81), __esModule: true };

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(82);
__webpack_require__(87);
__webpack_require__(88);
__webpack_require__(89);
module.exports = __webpack_require__(12).Symbol;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(11);
var has = __webpack_require__(13);
var DESCRIPTORS = __webpack_require__(17);
var $export = __webpack_require__(20);
var redefine = __webpack_require__(48);
var META = __webpack_require__(83).KEY;
var $fails = __webpack_require__(22);
var shared = __webpack_require__(32);
var setToStringTag = __webpack_require__(37);
var uid = __webpack_require__(26);
var wks = __webpack_require__(19);
var wksExt = __webpack_require__(38);
var wksDefine = __webpack_require__(39);
var enumKeys = __webpack_require__(84);
var isArray = __webpack_require__(85);
var anObject = __webpack_require__(21);
var isObject = __webpack_require__(16);
var toIObject = __webpack_require__(18);
var toPrimitive = __webpack_require__(28);
var createDesc = __webpack_require__(23);
var _create = __webpack_require__(36);
var gOPNExt = __webpack_require__(86);
var $GOPD = __webpack_require__(50);
var $DP = __webpack_require__(15);
var $keys = __webpack_require__(24);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(49).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(27).f = $propertyIsEnumerable;
  __webpack_require__(34).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(25)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(26)('meta');
var isObject = __webpack_require__(16);
var has = __webpack_require__(13);
var setDesc = __webpack_require__(15).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(22)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(24);
var gOPS = __webpack_require__(34);
var pIE = __webpack_require__(27);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(45);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(18);
var gOPN = __webpack_require__(49).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 87 */
/***/ (function(module, exports) {



/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(39)('asyncIterator');


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(39)('observable');


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(91), __esModule: true };

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(92);
module.exports = __webpack_require__(12).Object.setPrototypeOf;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(20);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(93).set });


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(16);
var anObject = __webpack_require__(21);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(40)(Function.call, __webpack_require__(50).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(95), __esModule: true };

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(96);
var $Object = __webpack_require__(12).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(20);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(36) });


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(98);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try { // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(5));

var _addClass = _interopRequireDefault(__webpack_require__(101));

var _removeClass = _interopRequireDefault(__webpack_require__(104));

var _react = _interopRequireDefault(__webpack_require__(0));

var _Transition = _interopRequireDefault(__webpack_require__(52));

var _PropTypes = __webpack_require__(54);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass.default)(node, c);
  });
};

var removeClass = function removeClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass.default)(node, c);
  });
};
/**
 * A `Transition` component using CSS transitions and animations.
 * It's inspired by the excellent [ng-animate](http://www.nganimate.org/) library.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` stages of the transition. The first class is applied and then a
 * second "active" class in order to activate the css animation. After the animation,
 * matching `done` class names are applied to persist the animation state.
 *
 * When the `in` prop is toggled to `true` the Component will get
 * the `example-enter` CSS class and the `example-enter-active` CSS class
 * added in the next tick. This is a convention based on the `classNames` prop.
 */


var CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');

      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var _this$getClassNames3 = _this.getClassNames('enter'),
          doneClassName = _this$getClassNames3.doneClassName;

      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      addClass(node, doneClassName);

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          className = _this$getClassNames4.className;

      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      var _this$getClassNames5 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames5.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      var _this$getClassNames6 = _this.getClassNames('exit'),
          doneClassName = _this$getClassNames6.doneClassName;

      _this.removeClasses(node, 'exit');

      addClass(node, doneClassName);

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var className = typeof classNames !== 'string' ? classNames[type] : classNames + '-' + type;
      var activeClassName = typeof classNames !== 'string' ? classNames[type + 'Active'] : className + '-active';
      var doneClassName = typeof classNames !== 'string' ? classNames[type + 'Done'] : className + '-done';
      return {
        className: className,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$getClassNames7 = this.getClassNames(type),
        className = _this$getClassNames7.className,
        activeClassName = _this$getClassNames7.activeClassName,
        doneClassName = _this$getClassNames7.doneClassName;

    className && removeClass(node, className);
    activeClassName && removeClass(node, activeClassName);
    doneClassName && removeClass(node, doneClassName);
  };

  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    if (className) {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
      /* eslint-enable no-unused-expressions */

      addClass(node, className);
    }
  };

  _proto.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;
    return _react.default.createElement(_Transition.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react.default.Component);

CSSTransition.propTypes =  false ? _extends({}, _Transition.default.propTypes, {
  /**
   * The animation classNames applied to the component as it enters, exits or has finished the transition.
   * A single name can be provided and it will be suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`, `fade-enter-done`,
   * `fade-exit`, `fade-exit-active`, `fade-exit-done`, `fade-appear`, and `fade-appear-active`.
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply spread
   * them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: _PropTypes.classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: PropTypes.func
}) : {};
var _default = CSSTransition;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(102);

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(__webpack_require__(103));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];

/***/ }),
/* 102 */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(5));

var _react = _interopRequireDefault(__webpack_require__(0));

var _reactDom = __webpack_require__(8);

var _TransitionGroup = _interopRequireDefault(__webpack_require__(55));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */
var ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;

    var child = _react.default.Children.toArray(children)[idx];

    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = _react.default.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : _react.default.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(_react.default.Component);

ReplaceTransition.propTypes =  false ? {
  in: _propTypes.default.bool.isRequired,
  children: function children(props, propName) {
    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
    return null;
  }
} : {};
var _default = ReplaceTransition;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;

var _react = __webpack_require__(0);

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

/***/ }),
/* 107 */
/***/ (function(module, exports) {

var hasOwnProperty = Object.prototype.hasOwnProperty;

function transformEntryEqual(a, b) {
  for (var k in a) {
    if (hasOwnProperty.call(a, k)) {
      return a[k] === b[k];
    }
  }
  return false;
}

function transformEqual(a, b) {
  if ((!a && !b) || (a === b)) {
    return true;
  }
  if (!a !== !b) {
    return false;
  }
  if (a.length !== b.length) {
    return false;
  }
  for (var i = 0; i < a.length; i++) {
    if (!transformEntryEqual(a[i], b[i])) {
      return false;
    }
  }
  return true;
}

function shallowObjectEquals(a, b) {
  var k;
  var i = 0;
  var j = 0;
  for (k in a) {
    if (hasOwnProperty.call(a, k)) {
      switch (k) {
        case 'transform':
          if (!transformEqual(a[k], b[k])) {
            return false;
          }
          break;
        case 'shadowOffset':
          if (!shallowObjectEquals(a[k], b[k])) {
            return false;
          }
          break;
        default:
          if (a[k] !== b[k]) {
            return false;
          }
          break;
      }
      i++;
    }
  }
  for (k in b) {
    if (hasOwnProperty.call(b, k)) {
      j++;
    }
  }
  return i === j;
}

function styleEqual(a, b) {
  if ((!a && !b) || (a === b)) {
    return true;
  }
  if (!a !== !b) {
    return false;
  }
  switch (typeof a) {
    case 'object':
      if (a instanceof Array) {
        for (var i = 0; i < a.length; i++) {
          if (!styleEqual(a[i], b[i])) {
            return false;
          }
        }
        return a.length === b.length;
      } else {
        return shallowObjectEquals(a, b);
      }
      break;
    case 'number':
    default:
      return a === b;
  }
}

module.exports = styleEqual;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
});