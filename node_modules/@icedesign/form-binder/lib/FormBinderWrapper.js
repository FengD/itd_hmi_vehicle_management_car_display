"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _asyncValidator = _interopRequireDefault(require("async-validator"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var REG_KEY = /\[(['"a-z_A-Z0-9]*)\]|\./gi;

var IceFormBinderWrapper =
/*#__PURE__*/
function (_Component) {
  _inherits(IceFormBinderWrapper, _Component);

  _createClass(IceFormBinderWrapper, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        getter: this.getter,
        setter: this.setter,
        addValidate: this.addValidate,
        removeValidate: this.removeValidate,
        getError: this.getError,
        validate: this.validate
      };
    }
  }]);

  function IceFormBinderWrapper(props) {
    var _this;

    _classCallCheck(this, IceFormBinderWrapper);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(IceFormBinderWrapper).call(this, props));

    _this.addValidate = function (path, rules, fieldDOM) {
      _this.validateRules[path] = rules;
      _this.validateRefs[path] = fieldDOM;
    };

    _this.removeValidate = function (path) {
      delete _this.validateRules[path];
      delete _this.validateRefs[path];
    };

    _this.getter = function (name) {
      if (!name) {
        throw new Error('The name attribute is required in <FormBinder> component');
      }

      var value = _this.state.value;
      var arr = name.split(REG_KEY).filter(function (item) {
        return !!item;
      });
      var result = arr.reduce(function (prev, curr, currIndex) {
        if (!prev.errorName) {
          var key = curr.replace(/[\'\"]/gi, '');
          prev.value = prev.value[key];

          if (currIndex !== arr.length - 1) {
            var currentValueType = Object.prototype.toString.call(prev.value);

            if (/String|Number|Boolean|Null|Undefined/.test(currentValueType)) {
              prev.errorName = curr;
            }
          }
        }

        return prev;
      }, {
        value: value,
        errorName: null
      });
      return result.value;
    };

    _this.setter = function (name, newValue) {
      var value = _this.state.value;
      var arr = name.split(REG_KEY).filter(function (item) {
        return !!item;
      });
      arr.reduce(function (prev, curr, currentIndex) {
        if (arr.length === currentIndex + 1) {
          prev[curr] = newValue;
        }

        return prev[curr];
      }, value);

      _this.setState({}, function () {
        if (_this.props.onChange) {
          _this.props.onChange(value);
        }
      });
    };

    _this.validate = function (name) {
      var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var validator = new _asyncValidator.default(_defineProperty({}, name, rules));
      validator.validate(_defineProperty({}, name, _this.getter(name)), function (errors) {
        if (errors && errors.length > 0) {
          _this.setState(function (state) {
            var formErrors = state.errors.filter(function (error) {
              return error.field !== errors[0].field;
            });
            Array.prototype.push.apply(formErrors, errors);
            return {
              errors: formErrors
            };
          });
        } else {
          _this.setState({
            errors: _this.state.errors.filter(function (error) {
              return error.field !== name;
            })
          });
        }
      });
    };

    _this.validateAll = function (cb) {
      _this.validateFields(cb);
    };

    _this.validateFields = function (ns, opt, cb) {
      var _getParams = (0, _utils.getParams)(ns, opt, cb),
          names = _getParams.names,
          callback = _getParams.callback,
          options = _getParams.options;

      var needValidateValues = {};
      var needValidateRules = {};

      if (Array.isArray(names)) {
        Object.keys(_this.validateRules).forEach(function (name) {
          if (names.includes(name)) {
            needValidateRules[name] = _this.validateRules[name];
          }
        });
      } else {
        needValidateRules = _this.validateRules;
      }

      Object.keys(needValidateRules).forEach(function (name) {
        needValidateValues[name] = _this.getter(name);
      }); // 当数据不符合校验规则时，在 validator.validate 的回调函数中，就可以得到相应的错误信息
      // https://github.com/yiminghe/async-validator#usage

      var validator = new _asyncValidator.default(needValidateRules);
      validator.validate(needValidateValues, function (errors) {
        // 校验时的回调
        if (callback && typeof callback === 'function') {
          callback(errors, _this.state.value);
        } // 报错后滚动到对应的错误位置


        if (_this.props.enableScrollErrorField && errors && errors.length > 0) {
          // todo 默认定位到第一个，最好有报错动效
          _this.validateRefs[errors[0].field].scrollIntoView && _this.validateRefs[errors[0].field].scrollIntoView();
          window.scroll(window.scrollX, window.scrollY - _this.props.scrollErrorFieldTopOffset);
        } // 表单域错误处理


        if (errors) {
          _this.setState({
            errors: errors
          });
        } else {
          _this.setState({
            errors: []
          });
        }
      });
    };

    _this.getError = function (path) {
      var errors = _this.state.errors;

      if (!errors.length) {
        return [];
      }

      return errors.filter(function (error) {
        return error.field === path;
      });
    };

    _this.validateRules = {};
    _this.validateRefs = {};
    _this.state = {
      value: props.value || {},
      errors: []
    };
    return _this;
  }

  _createClass(IceFormBinderWrapper, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value || {}
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement(_react.default.Fragment, null, this.props.children);
    }
  }]);

  return IceFormBinderWrapper;
}(_react.Component);

exports.default = IceFormBinderWrapper;
IceFormBinderWrapper.displayName = 'IceFormBinderWrapper';
IceFormBinderWrapper.propTypes = {
  /**
   * 全局校验滚动到报错位置时，距离顶部的偏移值（适用于头部 fixed 的场景）
   */
  scrollErrorFieldTopOffset: _propTypes.default.number,

  /**
   * 全局校验时，是否开启滚动到报错表单位置
   */
  enableScrollErrorField: _propTypes.default.bool,

  /**
   * 当前表单的根 value 数据
   */
  value: _propTypes.default.object,

  /**
   * 当前表单元素变更时触发 */
  onChange: _propTypes.default.func
};
IceFormBinderWrapper.defaultProps = {
  value: {},
  scrollErrorFieldTopOffset: 0,
  enableScrollErrorField: false,
  onChange: function onChange() {}
};
IceFormBinderWrapper.childContextTypes = {
  getter: _propTypes.default.func,
  setter: _propTypes.default.func,
  getError: _propTypes.default.func,
  addValidate: _propTypes.default.func,
  removeValidate: _propTypes.default.func,
  validate: _propTypes.default.func
};