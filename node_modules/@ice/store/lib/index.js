"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("./store");
var Icestore = /** @class */ (function () {
    function Icestore() {
        /** Stores registered */
        this.stores = {};
        /** Global middlewares applied to all stores */
        this.globalMiddlewares = [];
        /** middleware applied to single store */
        this.middlewareMap = {};
    }
    /**
     * Register and init store
     * @param {string} namespace - unique name of store
     * @param {object} bindings - object of state and actions used to init store
     * @return {object} store instance
     */
    Icestore.prototype.registerStore = function (namespace, bindings) {
        if (this.stores[namespace]) {
            throw new Error("Namespace have been used: " + namespace + ".");
        }
        var storeMiddlewares = this.middlewareMap[namespace] || [];
        var middlewares = this.globalMiddlewares.concat(storeMiddlewares);
        this.stores[namespace] = new store_1.default(namespace, bindings, middlewares);
        return this.stores[namespace];
    };
    /**
     * Apply middleware to stores
     * @param {array} middlewares - middlewares queue of store
     * @param {string} namespace - unique name of store
     */
    Icestore.prototype.applyMiddleware = function (middlewares, namespace) {
        if (namespace !== undefined) {
            this.middlewareMap[namespace] = middlewares;
        }
        else {
            this.globalMiddlewares = middlewares;
        }
    };
    /**
     * Find store by namespace
     * @param {string} namespace - unique name of store
     * @return {object} store instance
     */
    Icestore.prototype.getModel = function (namespace) {
        var store = this.stores[namespace];
        if (!store) {
            throw new Error("Not found namespace: " + namespace + ".");
        }
        return store;
    };
    /**
     * Get state of store by namespace
     * @param {string} namespace - unique name of store
     * @return {object} store's state
     */
    Icestore.prototype.getState = function (namespace) {
        return this.getModel(namespace).getState();
    };
    /**
     * Hook of using store
     * @param {string} namespace - unique name of store
     * @return {object} store's bindings
     */
    Icestore.prototype.useStore = function (namespace) {
        return this.getModel(namespace).useStore();
    };
    /**
     * Hook of using multiple stores
     * @param {string} namespace - unique name of store
     * @return {array} array of store's bindings
     */
    Icestore.prototype.useStores = function (namespaces) {
        var _this = this;
        return namespaces.map(function (namespace) { return _this.useStore(namespace); });
    };
    return Icestore;
}());
exports.default = Icestore;
//# sourceMappingURL=index.js.map