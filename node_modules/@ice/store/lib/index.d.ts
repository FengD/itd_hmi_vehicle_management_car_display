import Store from './store';
import { Middleware } from './interface';
export default class Icestore {
    /** Stores registered */
    private stores;
    /** Global middlewares applied to all stores */
    private globalMiddlewares;
    /** middleware applied to single store */
    private middlewareMap;
    /**
     * Register and init store
     * @param {string} namespace - unique name of store
     * @param {object} bindings - object of state and actions used to init store
     * @return {object} store instance
     */
    registerStore(namespace: string, bindings: object): Store;
    /**
     * Apply middleware to stores
     * @param {array} middlewares - middlewares queue of store
     * @param {string} namespace - unique name of store
     */
    applyMiddleware(middlewares: Middleware[], namespace: string): void;
    /**
     * Find store by namespace
     * @param {string} namespace - unique name of store
     * @return {object} store instance
     */
    private getModel;
    /**
     * Get state of store by namespace
     * @param {string} namespace - unique name of store
     * @return {object} store's state
     */
    getState(namespace: string): object;
    /**
     * Hook of using store
     * @param {string} namespace - unique name of store
     * @return {object} store's bindings
     */
    useStore(namespace: string): object;
    /**
     * Hook of using multiple stores
     * @param {string} namespace - unique name of store
     * @return {array} array of store's bindings
     */
    useStores(namespaces: string[]): object[];
}
