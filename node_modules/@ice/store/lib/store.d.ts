import { Middleware } from './interface';
export default class Store {
    /** Store state and actions user defined */
    private bindings;
    /** Queue of setState method from useState hook */
    private queue;
    /** Namespace of store */
    private namespace;
    /** Middleware queue of store */
    private middlewares;
    /** Flag of whether disable loading effect globally */
    disableLoading: boolean;
    /**
     * Constuctor of Store
     * @param {string} namespace - unique name of store
     * @param {object} bindings - object of state and actions used to init store
     * @param {array} middlewares - middlewares queue of store
     */
    constructor(namespace: string, bindings: object, middlewares: Middleware[]);
    /**
     * Create action which will trigger state update after mutation
     * @param {function} func - original method user defined
     * @param {string} actionName - name of action function
     * @return {function} action function
     */
    private createAction;
    /**
     * Get state from bindings
     * @return {object} state
     */
    getState: () => object;
    /**
     * Trigger setState method in queue
     */
    private setState;
    /**
     * Hook used to register setState and expose bindings
     * @return {object} bindings of store
     */
    useStore(): object;
}
