"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var intl_utils_1 = require("@formatjs/intl-utils");
function isUnitSupported(unit) {
    try {
        new Intl.NumberFormat(undefined, {
            style: 'unit',
            unit: unit,
        });
    }
    catch (e) {
        return false;
    }
    return true;
}
exports.isUnitSupported = isUnitSupported;
var NativeNumberFormat = Intl.NumberFormat;
var UnifiedNumberFormat = /** @class */ (function () {
    function UnifiedNumberFormat(locales, options) {
        if (options === void 0) { options = {}; }
        options = options === undefined ? Object.create(null) : intl_utils_1.toObject(options);
        var style = options.style, unit = options.unit, unitDisplay = options.unitDisplay, coreOpts = __rest(options, ["style", "unit", "unitDisplay"]);
        if (style === 'unit') {
            if (!unit) {
                throw new TypeError('Unit is required for `style: unit`');
            }
            intl_utils_1.setInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'unit', unit);
            intl_utils_1.setInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'unitDisplay', intl_utils_1.getOption(options, 'unitDisplay', 'string', ['long', 'short', 'narrow'], 'short'));
            var requestedLocales = intl_utils_1.getCanonicalLocales(locales);
            var opt = Object.create(null);
            var matcher = intl_utils_1.getOption(options, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
            opt.localeMatcher = matcher;
            var localeData = UnifiedNumberFormat.localeData;
            var r = intl_utils_1.createResolveLocale(UnifiedNumberFormat.getDefaultLocale)(UnifiedNumberFormat.availableLocales, requestedLocales, opt, UnifiedNumberFormat.relevantExtensionKeys, localeData);
            intl_utils_1.setInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);
            this.patternData = localeData[r.locale][unit];
        }
        this.nf = new NativeNumberFormat(locales, __assign(__assign({}, coreOpts), { style: style === 'unit' ? 'decimal' : style }));
        this.pl = new Intl.PluralRules(locales);
    }
    UnifiedNumberFormat.prototype.format = function (num) {
        var formattedNum = this.nf.format(num);
        if (this.patternData) {
            var unitDisplay = intl_utils_1.getInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'unitDisplay');
            var pl = this.pl.select(num);
            var pattern = this.patternData[unitDisplay][pl === 'one' ? 'one' : 'other'];
            return pattern.replace('{0}', formattedNum);
        }
        return formattedNum;
    };
    UnifiedNumberFormat.prototype.formatToParts = function (num) {
        return this.nf.formatToParts(num);
    };
    UnifiedNumberFormat.prototype.resolvedOptions = function () {
        var ro = this.nf.resolvedOptions();
        var unit = intl_utils_1.getInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'unit');
        if (unit) {
            ro.style = 'unit';
            ro.unit = unit;
            ro.unitDisplay = intl_utils_1.getInternalSlot(UnifiedNumberFormat.__INTERNAL_SLOT_MAP__, this, 'unitDisplay');
        }
        return ro;
    };
    UnifiedNumberFormat.supportedLocalesOf = function (locales, options) {
        return intl_utils_1.supportedLocales(UnifiedNumberFormat.availableLocales, intl_utils_1.getCanonicalLocales(locales), options);
    };
    UnifiedNumberFormat.__addLocaleData = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        var _loop_1 = function (datum) {
            var availableLocales = Object.keys(__spreadArrays(datum.availableLocales, Object.keys(datum.aliases), Object.keys(datum.parentLocales)).reduce(function (all, k) {
                all[k] = true;
                return all;
            }, {}));
            availableLocales.forEach(function (locale) {
                try {
                    UnifiedNumberFormat.localeData[locale] = intl_utils_1.unpackData(locale, datum);
                }
                catch (e) {
                    // If we can't unpack this data, ignore the locale
                }
            });
        };
        for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
            var datum = data_1[_a];
            _loop_1(datum);
        }
        UnifiedNumberFormat.availableLocales = Object.keys(UnifiedNumberFormat.localeData);
        if (!UnifiedNumberFormat.__defaultLocale) {
            UnifiedNumberFormat.__defaultLocale =
                UnifiedNumberFormat.availableLocales[0];
        }
    };
    UnifiedNumberFormat.getDefaultLocale = function () {
        return UnifiedNumberFormat.__defaultLocale;
    };
    UnifiedNumberFormat.localeData = {};
    UnifiedNumberFormat.availableLocales = [];
    UnifiedNumberFormat.__defaultLocale = 'en';
    UnifiedNumberFormat.relevantExtensionKeys = [];
    UnifiedNumberFormat.polyfilled = true;
    UnifiedNumberFormat.__INTERNAL_SLOT_MAP__ = new WeakMap();
    return UnifiedNumberFormat;
}());
exports.UnifiedNumberFormat = UnifiedNumberFormat;
