import { Unit } from './units-constants';
import { UnitData, UnifiedNumberFormatLocaleData } from '@formatjs/intl-utils';
export declare function isUnitSupported(unit: Unit): boolean;
export interface UnifiedNumberFormatOptions extends Intl.NumberFormatOptions {
    compactDisplay?: 'short' | 'long';
    currencyDisplay?: 'symbol' | 'code' | 'name' | 'narrowSymbol';
    currencySign?: 'standard' | 'accounting';
    notation?: 'standard' | 'scientific' | 'engineering' | 'compact';
    signDisplay?: 'auto' | 'always' | 'never' | 'exceptZero';
    unit?: Unit;
    unitDisplay?: 'long' | 'short' | 'narrow';
}
export interface ResolvedUnifiedNumberFormatOptions extends Intl.ResolvedNumberFormatOptions {
    compactDisplay?: 'short' | 'long';
    currencyDisplay?: 'symbol' | 'code' | 'name' | 'narrowSymbol';
    currencySign?: 'standard' | 'accounting';
    notation?: 'standard' | 'scientific' | 'engineering' | 'compact';
    signDisplay?: 'auto' | 'always' | 'never' | 'exceptZero';
    unit?: Unit;
    unitDisplay?: 'long' | 'short' | 'narrow';
}
export declare class UnifiedNumberFormat implements Intl.NumberFormat {
    private nf;
    private pl;
    private patternData?;
    constructor(locales: string | string[], options?: UnifiedNumberFormatOptions);
    format(num: number): string;
    formatToParts(num: number): Intl.NumberFormatPart[];
    resolvedOptions(): ResolvedUnifiedNumberFormatOptions;
    static supportedLocalesOf(locales: string | string[], options?: Pick<UnifiedNumberFormatOptions, 'localeMatcher'>): string[];
    static __addLocaleData(...data: UnifiedNumberFormatLocaleData[]): void;
    static localeData: Record<string, Record<string, UnitData>>;
    private static availableLocales;
    private static __defaultLocale;
    private static getDefaultLocale;
    private static relevantExtensionKeys;
    static polyfilled: boolean;
    private static readonly __INTERNAL_SLOT_MAP__;
}
